
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var Relic = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... true
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 7,
  "!=": 56,
  "!==": 54,
  "$accept": 0,
  "$end": 1,
  "%": 9,
  "&": 14,
  "&&": 63,
  "(": 21,
  ")": 22,
  ")>": 79,
  "*": 8,
  "**": 45,
  "+": 4,
  "++": 41,
  ",": 17,
  "-": 5,
  "--": 42,
  ".": 23,
  "...": 116,
  ":": 20,
  ";": 18,
  "<": 12,
  "<(": 78,
  "<<": 48,
  "<=": 58,
  "==": 55,
  "===": 52,
  ">": 11,
  ">=": 57,
  ">>": 49,
  ">>>": 50,
  "?": 19,
  "??": 64,
  "@": 3,
  "AND": 60,
  "AS": 143,
  "ASYNC": 74,
  "AT": 144,
  "AWAIT": 30,
  "Access": 260,
  "AlphaNum": 226,
  "Arg": 214,
  "ArgList": 213,
  "Arguments": 212,
  "Array": 262,
  "ArrayArg": 266,
  "ArrayList": 264,
  "Assign": 251,
  "AssignKeyword": 253,
  "Assignable": 254,
  "Assignment": 252,
  "BOOL": 124,
  "BREAK": 90,
  "Block": 181,
  "BlockExpression": 198,
  "Body": 165,
  "CALL_END": 115,
  "CALL_START": 114,
  "CASE": 92,
  "CATCH": 101,
  "CHAIN": 39,
  "CLASS": 76,
  "COMPOUND_AND": 40,
  "COMPOUND_OR": 91,
  "CONST": 160,
  "CONTINUE": 148,
  "Case": 193,
  "Cases": 192,
  "Catch": 200,
  "Class": 184,
  "ClassBlock": 185,
  "ClassBody": 166,
  "ClassConstructor?": 186,
  "ClassFunction": 246,
  "ClassFunctionPrelude": 236,
  "ClassFunctionTag": 237,
  "ClassImplements?": 272,
  "ClassLine": 168,
  "Clause": 171,
  "Clauses": 194,
  "Code": 182,
  "Compare": 175,
  "DEFAULT": 88,
  "DEFAULTS": 147,
  "DELETE": 150,
  "DIVISION": 47,
  "DO": 27,
  "Declaration": 300,
  "DeclarationKeyword": 298,
  "Declarations": 299,
  "Declare": 297,
  "Defaults": 255,
  "EITHER": 65,
  "EITHER_OR": 66,
  "ELSE": 108,
  "EOF": 1,
  "EXISTS": 35,
  "EXPORT": 163,
  "EXTENDS": 77,
  "Else": 208,
  "ElseOtherwise": 205,
  "Export": 304,
  "ExportList": 306,
  "ExportName": 308,
  "ExportNames": 307,
  "Exportable": 309,
  "Expression": 169,
  "ExtendsName": 274,
  "ExtendsNames": 273,
  "FINALLY": 102,
  "FOR": 81,
  "FOR_AS": 97,
  "FOR_AT": 96,
  "FOR_FROM": 95,
  "FOR_IN": 85,
  "FOR_OF": 84,
  "FROM": 145,
  "FUNCTION": 138,
  "FUNC_DIRECTIVE": 69,
  "FUNC_DIRECTIVE?": 245,
  "FUNC_EXISTS": 112,
  "Finally": 201,
  "For": 189,
  "ForAny": 196,
  "ForAssignable": 190,
  "ForExpression": 187,
  "Function": 242,
  "FunctionInterlude": 240,
  "FunctionInterlude?": 243,
  "FunctionPostlude": 241,
  "FunctionPostlude?": 244,
  "FunctionPrelude": 238,
  "FunctionTag": 239,
  "GET": 140,
  "IDENTIFIER": 142,
  "IF": 93,
  "IMPLEMENTS": 152,
  "IMPORT": 162,
  "IN": 146,
  "INCLUDES": 37,
  "INDENT": 31,
  "INDEX_END": 120,
  "INDEX_START": 119,
  "INFINITY": 123,
  "INSTANCEOF": 59,
  "INTERFACE": 151,
  "INTERPOLATION_END": 134,
  "INTERPOLATION_START": 133,
  "IS": 51,
  "ISNT": 53,
  "Identifier": 258,
  "If": 197,
  "IfBlock": 209,
  "IfUnless": 207,
  "Import": 302,
  "ImportList": 305,
  "ImportName": 311,
  "ImportNames": 310,
  "InlineType": 291,
  "IntExtends?": 271,
  "IntTypeSentence?": 278,
  "IntTypeSpecifiers": 279,
  "Interface": 270,
  "InterfaceBody": 275,
  "InterfaceProperties": 276,
  "InterfaceProperty": 277,
  "Interpolation": 231,
  "Interpolations": 230,
  "Invocation": 211,
  "JSX": 228,
  "JSX_END": 130,
  "JSX_START": 129,
  "JointExpression": 188,
  "KEYOF": 157,
  "LET": 159,
  "LOOP": 103,
  "Label": 183,
  "Line": 167,
  "Literal": 225,
  "Logical": 176,
  "Loop": 203,
  "MATH_BIN": 38,
  "MathPostfix": 173,
  "MathPrefix": 172,
  "Multicheck": 177,
  "MulticheckClauses": 180,
  "MulticheckCombinations": 179,
  "Multicondition": 178,
  "NAN": 126,
  "NEW": 117,
  "NEWLINE": 26,
  "NOT": 44,
  "NULL": 125,
  "NUMBER": 127,
  "New": 215,
  "ON": 94,
  "OR": 61,
  "OTHERWISE": 109,
  "OUTDENT": 32,
  "Object": 220,
  "Operation": 170,
  "Operator": 174,
  "OptComma": 219,
  "OptSeparator": 303,
  "OptVoids": 267,
  "PARAM_END": 72,
  "PARAM_START": 71,
  "PLUS": 46,
  "POSTCASE": 89,
  "POSTFOR": 86,
  "POSTIF": 98,
  "POSTUNLESS": 99,
  "POSTUNTIL": 107,
  "POSTWHILE": 106,
  "PROPERTY": 118,
  "Param": 250,
  "ParamArray": 261,
  "ParamArrayArg": 265,
  "ParamArrayList": 263,
  "ParamAssignable": 256,
  "ParamIdentifier": 259,
  "ParamList": 249,
  "ParamObject": 257,
  "ParamPropList": 222,
  "ParamPropObj": 224,
  "Params": 248,
  "Parenthetical": 218,
  "PropList": 221,
  "PropObj": 223,
  "READONLY": 153,
  "REGEX": 135,
  "REGEX_END": 137,
  "REGEX_START": 136,
  "RETURN": 161,
  "Regex": 232,
  "RegexInterpolation": 235,
  "RegexInterpolations": 234,
  "RegexWithInterpolations": 233,
  "Return": 301,
  "Root": 164,
  "SET": 141,
  "STATIC": 139,
  "STRING": 128,
  "STRING_END": 132,
  "STRING_START": 131,
  "SUCH": 111,
  "SUPER": 113,
  "SWITCH": 87,
  "SYMBOL_EXISTS": 36,
  "Statement": 269,
  "String": 227,
  "StringWithInterpolations": 229,
  "Super": 216,
  "Switch": 191,
  "TAG": 156,
  "THEN": 73,
  "THIS": 121,
  "THROW": 149,
  "TRY": 100,
  "TYPE": 154,
  "TYPEOF": 29,
  "TYPE_JOIN": 155,
  "This": 217,
  "Try": 199,
  "TryBlock": 202,
  "Type": 280,
  "TypeAccess": 286,
  "TypeArgument": 290,
  "TypeArguments": 289,
  "TypeArguments?": 247,
  "TypeArray": 295,
  "TypeArrayItems": 296,
  "TypeDeclaration": 281,
  "TypeFunction": 287,
  "TypeObjProp": 294,
  "TypeObjProps": 293,
  "TypeObject": 292,
  "TypeSentence": 282,
  "TypeValue": 283,
  "TypeWithArguments": 288,
  "TypeWrapped": 285,
  "TypeofKeyof": 284,
  "UNDEFINED": 122,
  "UNLESS": 110,
  "UNTIL": 105,
  "USING": 75,
  "VAR": 158,
  "VOID": 33,
  "Value": 210,
  "Voids": 268,
  "WHEN": 82,
  "WHETHER": 28,
  "WHILE": 104,
  "WHILST": 83,
  "WITH": 80,
  "WITHIN": 70,
  "When": 195,
  "While": 206,
  "WhileUntil": 204,
  "YIELD": 34,
  "[": 24,
  "]": 25,
  "^": 10,
  "error": 2,
  "{": 15,
  "{{": 67,
  "|": 13,
  "||": 62,
  "}": 16,
  "}}": 68,
  "~": 6,
  "~~": 43
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "@",
  4: "+",
  5: "-",
  6: "~",
  7: "!",
  8: "*",
  9: "%",
  10: "^",
  11: ">",
  12: "<",
  13: "|",
  14: "&",
  15: "{",
  16: "}",
  17: ",",
  18: ";",
  19: "?",
  20: ":",
  21: "(",
  22: ")",
  23: ".",
  24: "[",
  25: "]",
  26: "NEWLINE",
  27: "DO",
  28: "WHETHER",
  29: "TYPEOF",
  30: "AWAIT",
  31: "INDENT",
  32: "OUTDENT",
  33: "VOID",
  34: "YIELD",
  35: "EXISTS",
  36: "SYMBOL_EXISTS",
  37: "INCLUDES",
  38: "MATH_BIN",
  39: "CHAIN",
  40: "COMPOUND_AND",
  41: "++",
  42: "--",
  43: "~~",
  44: "NOT",
  45: "**",
  46: "PLUS",
  47: "DIVISION",
  48: "<<",
  49: ">>",
  50: ">>>",
  51: "IS",
  52: "===",
  53: "ISNT",
  54: "!==",
  55: "==",
  56: "!=",
  57: ">=",
  58: "<=",
  59: "INSTANCEOF",
  60: "AND",
  61: "OR",
  62: "||",
  63: "&&",
  64: "??",
  65: "EITHER",
  66: "EITHER_OR",
  67: "{{",
  68: "}}",
  69: "FUNC_DIRECTIVE",
  70: "WITHIN",
  71: "PARAM_START",
  72: "PARAM_END",
  73: "THEN",
  74: "ASYNC",
  75: "USING",
  76: "CLASS",
  77: "EXTENDS",
  78: "<(",
  79: ")>",
  80: "WITH",
  81: "FOR",
  82: "WHEN",
  83: "WHILST",
  84: "FOR_OF",
  85: "FOR_IN",
  86: "POSTFOR",
  87: "SWITCH",
  88: "DEFAULT",
  89: "POSTCASE",
  90: "BREAK",
  91: "COMPOUND_OR",
  92: "CASE",
  93: "IF",
  94: "ON",
  95: "FOR_FROM",
  96: "FOR_AT",
  97: "FOR_AS",
  98: "POSTIF",
  99: "POSTUNLESS",
  100: "TRY",
  101: "CATCH",
  102: "FINALLY",
  103: "LOOP",
  104: "WHILE",
  105: "UNTIL",
  106: "POSTWHILE",
  107: "POSTUNTIL",
  108: "ELSE",
  109: "OTHERWISE",
  110: "UNLESS",
  111: "SUCH",
  112: "FUNC_EXISTS",
  113: "SUPER",
  114: "CALL_START",
  115: "CALL_END",
  116: "...",
  117: "NEW",
  118: "PROPERTY",
  119: "INDEX_START",
  120: "INDEX_END",
  121: "THIS",
  122: "UNDEFINED",
  123: "INFINITY",
  124: "BOOL",
  125: "NULL",
  126: "NAN",
  127: "NUMBER",
  128: "STRING",
  129: "JSX_START",
  130: "JSX_END",
  131: "STRING_START",
  132: "STRING_END",
  133: "INTERPOLATION_START",
  134: "INTERPOLATION_END",
  135: "REGEX",
  136: "REGEX_START",
  137: "REGEX_END",
  138: "FUNCTION",
  139: "STATIC",
  140: "GET",
  141: "SET",
  142: "IDENTIFIER",
  143: "AS",
  144: "AT",
  145: "FROM",
  146: "IN",
  147: "DEFAULTS",
  148: "CONTINUE",
  149: "THROW",
  150: "DELETE",
  151: "INTERFACE",
  152: "IMPLEMENTS",
  153: "READONLY",
  154: "TYPE",
  155: "TYPE_JOIN",
  156: "TAG",
  157: "KEYOF",
  158: "VAR",
  159: "LET",
  160: "CONST",
  161: "RETURN",
  162: "IMPORT",
  163: "EXPORT"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,



    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  164,
  164,
  s,
  [165, 3],
  s,
  [166, 3],
  167,
  167,
  s,
  [168, 3],
  s,
  [169, 12],
  s,
  [170, 23],
  s,
  [171, 3],
  s,
  [172, 8],
  173,
  173,
  s,
  [174, 11],
  s,
  [175, 11],
  s,
  [176, 7],
  177,
  178,
  179,
  179,
  180,
  180,
  s,
  [181, 6],
  s,
  [182, 15],
  s,
  [183, 3],
  s,
  [184, 12],
  s,
  [185, 6],
  s,
  [186, 4],
  187,
  187,
  188,
  188,
  s,
  [189, 22],
  190,
  190,
  s,
  [191, 4],
  192,
  192,
  s,
  [193, 10],
  s,
  [194, 3],
  s,
  [195, 4],
  s,
  [196, 3],
  s,
  [197, 9],
  198,
  198,
  199,
  199,
  s,
  [200, 5],
  201,
  201,
  s,
  [202, 3],
  203,
  203,
  s,
  [204, 4],
  s,
  [205, 3],
  s,
  [206, 7],
  207,
  207,
  s,
  [208, 4],
  s,
  [209, 10],
  s,
  [210, 9],
  s,
  [211, 9],
  s,
  [212, 3],
  s,
  [213, 4],
  s,
  [214, 3],
  215,
  216,
  216,
  217,
  s,
  [218, 3],
  219,
  219,
  s,
  [220, 3],
  s,
  [221, 4],
  s,
  [222, 5],
  s,
  [223, 18],
  s,
  [224, 8],
  s,
  [225, 7],
  226,
  226,
  227,
  s,
  [227, 4, 1],
  230,
  230,
  231,
  231,
  232,
  232,
  233,
  234,
  234,
  235,
  235,
  236,
  236,
  s,
  [237, 5],
  238,
  238,
  239,
  239,
  s,
  [240, 8],
  s,
  [241, 6],
  242,
  243,
  243,
  244,
  244,
  245,
  245,
  s,
  [246, 4],
  s,
  [247, 3],
  248,
  248,
  s,
  [249, 4],
  250,
  251,
  s,
  [252, 4],
  s,
  [253, 3],
  s,
  [254, 5],
  255,
  255,
  s,
  [256, 5],
  257,
  257,
  258,
  s,
  [259, 9],
  260,
  260,
  s,
  [261, 3],
  s,
  [262, 3],
  s,
  [263, 3],
  s,
  [264, 4],
  265,
  265,
  s,
  [266, 4],
  267,
  267,
  s,
  [268, 3],
  s,
  [269, 13],
  270,
  270,
  271,
  271,
  272,
  272,
  s,
  [273, 3],
  274,
  s,
  [275, 7],
  s,
  [276, 8],
  s,
  [277, 11],
  s,
  [278, 4],
  279,
  279,
  s,
  [280, 3],
  s,
  [281, 3],
  s,
  [282, 7],
  s,
  [283, 11],
  284,
  284,
  285,
  285,
  s,
  [286, 4],
  s,
  [287, 4],
  s,
  [288, 3],
  s,
  [289, 4],
  s,
  [290, 3],
  s,
  [291, 5],
  s,
  [292, 3],
  s,
  [293, 4],
  s,
  [294, 11],
  295,
  295,
  s,
  [296, 4],
  297,
  297,
  s,
  [298, 3],
  s,
  [299, 4],
  s,
  [300, 4],
  s,
  [301, 4],
  s,
  [302, 3],
  s,
  [303, 3],
  s,
  [304, 8],
  s,
  [305, 4],
  306,
  306,
  s,
  [307, 3],
  s,
  [308, 6],
  309,
  309,
  s,
  [310, 3],
  s,
  [311, 6]
]),
  rule: u([
  0,
  1,
  3,
  2,
  c,
  [3, 4],
  s,
  [1, 17],
  2,
  2,
  3,
  s,
  [2, 5],
  4,
  2,
  4,
  c,
  [4, 3],
  2,
  s,
  [3, 4],
  c,
  [41, 3],
  3,
  4,
  1,
  c,
  [44, 19],
  s,
  [1, 21],
  s,
  [2, 4],
  3,
  c,
  [6, 3],
  4,
  3,
  5,
  3,
  2,
  5,
  5,
  4,
  5,
  4,
  6,
  5,
  6,
  c,
  [6, 3],
  5,
  c,
  [19, 3],
  4,
  s,
  [3, 4, 1],
  4,
  5,
  7,
  8,
  6,
  6,
  5,
  7,
  c,
  [104, 3],
  c,
  [36, 4],
  0,
  c,
  [97, 4],
  1,
  1,
  3,
  7,
  8,
  8,
  c,
  [3, 3],
  5,
  5,
  s,
  [6, 4],
  c,
  [11, 3],
  9,
  9,
  c,
  [13, 4],
  7,
  2,
  1,
  5,
  4,
  7,
  6,
  c,
  [129, 3],
  3,
  c,
  [139, 3],
  c,
  [90, 5],
  c,
  [12, 3],
  s,
  [2, 4],
  c,
  [107, 5],
  5,
  3,
  7,
  s,
  [3, 4],
  c,
  [201, 3],
  c,
  [27, 4],
  4,
  c,
  [176, 3],
  1,
  c,
  [191, 4],
  s,
  [1, 7],
  4,
  4,
  5,
  c,
  [185, 3],
  c,
  [50, 3],
  c,
  [29, 4],
  s,
  [5, 4],
  4,
  4,
  6,
  6,
  c,
  [202, 3],
  s,
  [1, 8],
  c,
  [147, 3],
  c,
  [3, 3],
  3,
  c,
  [153, 4],
  c,
  [98, 3],
  c,
  [4, 3],
  c,
  [69, 5],
  c,
  [96, 3],
  5,
  0,
  1,
  c,
  [26, 3],
  c,
  [19, 3],
  c,
  [9, 3],
  c,
  [5, 3],
  c,
  [115, 4],
  c,
  [74, 3],
  c,
  [142, 3],
  c,
  [46, 3],
  c,
  [79, 5],
  3,
  2,
  c,
  [272, 3],
  c,
  [121, 4],
  s,
  [1, 10],
  c,
  [13, 3],
  c,
  [207, 3],
  c,
  [9, 4],
  c,
  [26, 3],
  c,
  [36, 3],
  c,
  [269, 7],
  c,
  [16, 3],
  c,
  [41, 3],
  c,
  [329, 4],
  c,
  [283, 6],
  4,
  0,
  1,
  0,
  1,
  s,
  [0, 4, 1],
  1,
  2,
  0,
  c,
  [122, 3],
  c,
  [187, 3],
  c,
  [120, 3],
  1,
  3,
  5,
  c,
  [59, 5],
  c,
  [35, 4],
  c,
  [8, 5],
  c,
  [23, 3],
  c,
  [277, 4],
  c,
  [383, 4],
  c,
  [181, 3],
  c,
  [212, 4],
  c,
  [220, 3],
  c,
  [165, 5],
  1,
  3,
  6,
  c,
  [16, 3],
  c,
  [232, 4],
  0,
  c,
  [45, 5],
  c,
  [9, 3],
  c,
  [55, 5],
  4,
  c,
  [7, 3],
  5,
  7,
  0,
  2,
  0,
  c,
  [194, 4],
  c,
  [6, 3],
  c,
  [346, 3],
  c,
  [70, 4],
  4,
  c,
  [336, 3],
  7,
  9,
  c,
  [7, 3],
  9,
  c,
  [386, 3],
  c,
  [27, 3],
  8,
  c,
  [26, 4],
  c,
  [47, 4],
  c,
  [119, 3],
  c,
  [216, 3],
  c,
  [386, 4],
  c,
  [197, 12],
  c,
  [296, 4],
  4,
  6,
  c,
  [365, 4],
  c,
  [24, 3],
  c,
  [112, 5],
  c,
  [70, 4],
  c,
  [40, 5],
  c,
  [26, 3],
  c,
  [15, 6],
  c,
  [307, 3],
  7,
  8,
  9,
  c,
  [87, 3],
  c,
  [17, 3],
  c,
  [353, 3],
  c,
  [266, 3],
  c,
  [177, 4],
  c,
  [26, 4],
  5,
  c,
  [259, 4],
  s,
  [4, 3],
  6,
  c,
  [224, 3],
  c,
  [129, 4],
  c,
  [578, 4],
  c,
  [224, 4],
  c,
  [58, 5],
  c,
  [346, 6],
  c,
  [43, 5],
  c,
  [11, 3],
  c,
  [10, 3]
])
}),
performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : Root $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yylstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 1:
    /*! Production::    Root : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = Object.assign(new yy["Root"]("", ...['EMPTY']), { rule: "", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 2:
    /*! Production::    Root : Body */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = new yy["Root"]("Body", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Body", yylstack[yysp - 1]])
    break;

case 3:
    /*! Production::    Body : Body NEWLINE Line */
case 6:
    /*! Production::    ClassBody : ClassBody NEWLINE ClassLine */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 2];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-)
    
    
    (yyvstack[yysp - 2][1] = [...yyvstack[yysp - 2][1], Object.assign(yyvstack[yysp], { lineCount: yyvstack[yysp - 1] })]) && Object.assign(yyvstack[yysp - 2], { loc: { first_line: yylstack[yysp - 2].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 2].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 4:
    /*! Production::    Body : Body NEWLINE */
case 7:
    /*! Production::    ClassBody : ClassBody NEWLINE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(yyvstack[yysp - 1][1][yyvstack[yysp - 1][1].length - 1], { lineCount: yyvstack[yysp] }) && Object.assign(yyvstack[yysp - 1], { loc: { first_line: yylstack[yysp - 1].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 1].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 5:
    /*! Production::    Body : Line */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Body"]("Line", ...[[yyvstack[yysp]]]), { rule: "Line", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Line", yylstack[yysp]])
    break;

case 8:
    /*! Production::    ClassBody : ClassLine */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBody"]("ClassLine", ...[[yyvstack[yysp]]]), { rule: "ClassLine", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["ClassLine", yylstack[yysp]])
    break;

case 9:
    /*! Production::    Line : Statement */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Statement", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Statement", yylstack[yysp - 1]])
    break;

case 10:
    /*! Production::    Line : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 11:
    /*! Production::    ClassLine : Statement */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ClassLine"]("Statement", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Statement", yylstack[yysp - 1]])
    break;

case 12:
    /*! Production::    ClassLine : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ClassLine"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 13:
    /*! Production::    ClassLine : ClassFunction */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ClassLine"]("ClassFunction", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ClassFunction", yylstack[yysp - 1]])
    break;

case 14:
    /*! Production::    Expression : While */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("While", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["While", yylstack[yysp - 1]])
    break;

case 15:
    /*! Production::    Expression : For */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("For", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["For", yylstack[yysp - 1]])
    break;

case 16:
    /*! Production::    Expression : Switch */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Switch", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Switch", yylstack[yysp - 1]])
    break;

case 17:
    /*! Production::    Expression : TryBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("TryBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TryBlock", yylstack[yysp - 1]])
    break;

case 18:
    /*! Production::    Expression : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Class", yylstack[yysp - 1]])
    break;

case 19:
    /*! Production::    Expression : Code */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Code", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Code", yylstack[yysp - 1]])
    break;

case 20:
    /*! Production::    Expression : Label */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Label", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Label", yylstack[yysp - 1]])
    break;

case 21:
    /*! Production::    Expression : Value */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Value", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Value", yylstack[yysp - 1]])
    break;

case 22:
    /*! Production::    Expression : JSX */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("JSX", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["JSX", yylstack[yysp - 1]])
    break;

case 23:
    /*! Production::    Expression : If */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("If", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["If", yylstack[yysp - 1]])
    break;

case 24:
    /*! Production::    Expression : Operation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Operation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Operation", yylstack[yysp - 1]])
    break;

case 25:
    /*! Production::    Expression : Assign */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Assign", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Assign", yylstack[yysp - 1]])
    break;

case 26:
    /*! Production::    Operation : MathPrefix Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("MathPrefix Expression", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "MathPrefix Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MathPrefix", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 27:
    /*! Production::    Operation : Expression MathPostfix */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MathPostfix", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MathPostfix", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["MathPostfix", yylstack[yysp]])
    break;

case 28:
    /*! Production::    Operation : Expression Operator Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Operator Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Operator Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Operator", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 29:
    /*! Production::    Operation : "@" Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("@ Value", ...[yyvstack[yysp]]), { rule: "@ Value", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["@", yylstack[yysp - 1]], ["Value", yylstack[yysp]])
    break;

case 30:
    /*! Production::    Operation : DO Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("DO Expression", ...[yyvstack[yysp]]), { rule: "DO Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DO", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 31:
    /*! Production::    Operation : WHETHER Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("WHETHER Expression", ...[yyvstack[yysp]]), { rule: "WHETHER Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WHETHER", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 32:
    /*! Production::    Operation : TYPEOF Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("TYPEOF Expression", ...[yyvstack[yysp]]), { rule: "TYPEOF Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPEOF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 33:
    /*! Production::    Operation : AWAIT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT Expression", ...[yyvstack[yysp]]), { rule: "AWAIT Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["AWAIT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 34:
    /*! Production::    Operation : AWAIT INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "AWAIT INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["AWAIT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 35:
    /*! Production::    Operation : VOID Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("VOID Expression", ...[yyvstack[yysp]]), { rule: "VOID Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["VOID", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 36:
    /*! Production::    Operation : VOID INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("VOID INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "VOID INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["VOID", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 37:
    /*! Production::    Operation : YIELD Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD Expression", ...[yyvstack[yysp]]), { rule: "YIELD Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["YIELD", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 38:
    /*! Production::    Operation : YIELD INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "YIELD INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["YIELD", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 39:
    /*! Production::    Operation : Expression EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression EXISTS", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["EXISTS", yylstack[yysp]])
    break;

case 40:
    /*! Production::    Operation : Expression SYMBOL_EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression SYMBOL_EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression SYMBOL_EXISTS", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["SYMBOL_EXISTS", yylstack[yysp]])
    break;

case 41:
    /*! Production::    Operation : Expression Compare Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Compare Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Compare Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 42:
    /*! Production::    Operation : Expression Logical Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Logical Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Logical Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Logical", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 43:
    /*! Production::    Operation : Expression INCLUDES Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression INCLUDES Expression", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Expression INCLUDES Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["INCLUDES", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 44:
    /*! Production::    Operation : Expression MATH_BIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MATH_BIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MATH_BIN Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["MATH_BIN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 45:
    /*! Production::    Operation : Expression Multicheck */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Multicheck", ...[yyvstack[yysp - 1], yyvstack[yysp].contents]), { rule: "Expression Multicheck", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["Multicheck", yylstack[yysp]])
    break;

case 46:
    /*! Production::    Operation : Multicondition */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Multicondition", ...[null, yyvstack[yysp].contents]), { rule: "Multicondition", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp]])
    break;

case 47:
    /*! Production::    Operation : Expression CHAIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["CHAIN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 48:
    /*! Production::    Operation : Expression CHAIN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["CHAIN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 49:
    /*! Production::    Clause : Clause COMPOUND_AND Compare Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Clause COMPOUND_AND Compare Expression", ...[...yyvstack[yysp - 3].contents, [yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Clause COMPOUND_AND Compare Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clause", yylstack[yysp - 3]], ["COMPOUND_AND", yylstack[yysp - 2]], ["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 50:
    /*! Production::    Clause : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Expression", ...[[yyvstack[yysp]]]), { rule: "Expression", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Expression", yylstack[yysp]])
    break;

case 51:
    /*! Production::    Clause : Compare Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Compare Expression", ...[[yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Compare Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 52:
    /*! Production::    MathPrefix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["++", yylstack[yysp - 1]])
    break;

case 53:
    /*! Production::    MathPrefix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["--", yylstack[yysp - 1]])
    break;

case 54:
    /*! Production::    MathPrefix : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["+", yylstack[yysp - 1]])
    break;

case 55:
    /*! Production::    MathPrefix : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["-", yylstack[yysp - 1]])
    break;

case 56:
    /*! Production::    MathPrefix : "~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["~", yylstack[yysp - 1]])
    break;

case 57:
    /*! Production::    MathPrefix : "~~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["~~", yylstack[yysp - 1]])
    break;

case 58:
    /*! Production::    MathPrefix : NOT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("NOT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["NOT", yylstack[yysp - 1]])
    break;

case 59:
    /*! Production::    MathPrefix : "!" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("!", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["!", yylstack[yysp - 1]])
    break;

case 60:
    /*! Production::    MathPostfix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["++", yylstack[yysp - 1]])
    break;

case 61:
    /*! Production::    MathPostfix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["--", yylstack[yysp - 1]])
    break;

case 62:
    /*! Production::    Operator : "*" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("*", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["*", yylstack[yysp - 1]])
    break;

case 63:
    /*! Production::    Operator : "**" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("**", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["**", yylstack[yysp - 1]])
    break;

case 64:
    /*! Production::    Operator : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["+", yylstack[yysp - 1]])
    break;

case 65:
    /*! Production::    Operator : PLUS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("PLUS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["PLUS", yylstack[yysp - 1]])
    break;

case 66:
    /*! Production::    Operator : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["-", yylstack[yysp - 1]])
    break;

case 67:
    /*! Production::    Operator : DIVISION */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("DIVISION", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["DIVISION", yylstack[yysp - 1]])
    break;

case 68:
    /*! Production::    Operator : "%" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("%", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["%", yylstack[yysp - 1]])
    break;

case 69:
    /*! Production::    Operator : "<<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("<<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["<<", yylstack[yysp - 1]])
    break;

case 70:
    /*! Production::    Operator : ">>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens([">>", yylstack[yysp - 1]])
    break;

case 71:
    /*! Production::    Operator : ">>>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens([">>>", yylstack[yysp - 1]])
    break;

case 72:
    /*! Production::    Operator : "^" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("^", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["^", yylstack[yysp - 1]])
    break;

case 73:
    /*! Production::    Compare : IS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("IS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["IS", yylstack[yysp - 1]])
    break;

case 74:
    /*! Production::    Compare : "===" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("===", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["===", yylstack[yysp - 1]])
    break;

case 75:
    /*! Production::    Compare : ISNT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("ISNT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ISNT", yylstack[yysp - 1]])
    break;

case 76:
    /*! Production::    Compare : "!==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["!==", yylstack[yysp - 1]])
    break;

case 77:
    /*! Production::    Compare : "==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["==", yylstack[yysp - 1]])
    break;

case 78:
    /*! Production::    Compare : "!=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["!=", yylstack[yysp - 1]])
    break;

case 79:
    /*! Production::    Compare : ">=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens([">=", yylstack[yysp - 1]])
    break;

case 80:
    /*! Production::    Compare : "<=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["<=", yylstack[yysp - 1]])
    break;

case 81:
    /*! Production::    Compare : ">" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens([">", yylstack[yysp - 1]])
    break;

case 82:
    /*! Production::    Compare : "<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["<", yylstack[yysp - 1]])
    break;

case 83:
    /*! Production::    Compare : INSTANCEOF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("INSTANCEOF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["INSTANCEOF", yylstack[yysp - 1]])
    break;

case 84:
    /*! Production::    Logical : AND */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("AND", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["AND", yylstack[yysp - 1]])
    break;

case 85:
    /*! Production::    Logical : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["OR", yylstack[yysp - 1]])
    break;

case 86:
    /*! Production::    Logical : "||" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("||", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["||", yylstack[yysp - 1]])
    break;

case 87:
    /*! Production::    Logical : "&&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["&&", yylstack[yysp - 1]])
    break;

case 88:
    /*! Production::    Logical : "|" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("|", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["|", yylstack[yysp - 1]])
    break;

case 89:
    /*! Production::    Logical : "&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["&", yylstack[yysp - 1]])
    break;

case 90:
    /*! Production::    Logical : "??" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("??", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["??", yylstack[yysp - 1]])
    break;

case 91:
    /*! Production::    Multicheck : MulticheckCombinations MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicheck"]("MulticheckCombinations MulticheckClauses", ...[yyvstack[yysp - 1].rule, yyvstack[yysp]]), { rule: "MulticheckCombinations MulticheckClauses", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MulticheckCombinations", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 92:
    /*! Production::    Multicondition : EITHER MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicondition"]("EITHER MulticheckClauses", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "EITHER MulticheckClauses", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EITHER", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 93:
    /*! Production::    MulticheckCombinations : IS EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("IS EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type }).setTokens(["IS", yylstack[yysp - 2]], ["EITHER", yylstack[yysp - 1]])
    break;

case 94:
    /*! Production::    MulticheckCombinations : ISNT EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("ISNT EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type }).setTokens(["ISNT", yylstack[yysp - 2]], ["EITHER", yylstack[yysp - 1]])
    break;

case 95:
    /*! Production::    MulticheckClauses : MulticheckClauses EITHER_OR Clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("MulticheckClauses EITHER_OR Clause", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "MulticheckClauses EITHER_OR Clause", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MulticheckClauses", yylstack[yysp - 2]], ["EITHER_OR", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 96:
    /*! Production::    MulticheckClauses : Clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("Clause", ...[yyvstack[yysp]]), { rule: "Clause", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Clause", yylstack[yysp]])
    break;

case 97:
    /*! Production::    Block : "{{" "}}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ }}", ...[yy.Block.wrap()]), { rule: "{{ }}", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 98:
    /*! Production::    Block : INDENT OUTDENT */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT OUTDENT", ...[yy.Block.wrap()]), { rule: "INDENT OUTDENT", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 99:
    /*! Production::    Block : "{{" INDENT OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT OUTDENT }}", ...[yy.Block.wrap()]), { rule: "{{ INDENT OUTDENT }}", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 100:
    /*! Production::    Block : INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 101:
    /*! Production::    Block : "{{" INDENT Body OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT Body OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT Body OUTDENT }}", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Body", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 102:
    /*! Production::    Block : "{" Body "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{ Body }", ...[yyvstack[yysp - 1]]), { rule: "{ Body }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 103:
    /*! Production::    Code : FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 104:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Block", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Block", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 105:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 106:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Block", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 107:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 108:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 109:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Block", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp - 1]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 5]], ["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 110:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Expression", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 111:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Expression", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 5]], ["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 112:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Block", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 3]], ["PARAM_START", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 113:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 114:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 3]], ["PARAM_START", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 115:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 116:
    /*! Production::    Code : WITHIN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 117:
    /*! Production::    Code : ASYNC Code */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("ASYNC Code", ...[...yyvstack[yysp].contents]), { rule: "ASYNC Code", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"async":true}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp - 1]], ["Code", yylstack[yysp]])
    break;

case 118:
    /*! Production::    Label : USING Identifier THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("USING Identifier THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "USING Identifier THEN Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["USING", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 119:
    /*! Production::    Label : USING Identifier THEN Statement */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("USING Identifier THEN Statement", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "USING Identifier THEN Statement", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["USING", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 120:
    /*! Production::    Label : USING Identifier Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("USING Identifier Block", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "USING Identifier Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["USING", yylstack[yysp - 2]], ["Identifier", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 121:
    /*! Production::    Class : CLASS Identifier ClassConstructor? ClassImplements? */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? ClassImplements?", ...[yyvstack[yysp - 2], false, false, yylstack[yysp - 3].origin === "class*", yyvstack[yysp - 1].unwrap, yyvstack[yysp].unwrap]), { rule: "CLASS Identifier ClassConstructor? ClassImplements?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 2] && yylstack[yysp - 2].last_line, last_column: yylstack[yysp - 2] && yylstack[yysp - 2].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["ClassConstructor?", yylstack[yysp - 1]], ["ClassImplements?", yylstack[yysp]])
    break;

case 122:
    /*! Production::    Class : CLASS Identifier ClassConstructor? ClassImplements? ClassBlock */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? ClassImplements? ClassBlock", ...[yyvstack[yysp - 3], false, yyvstack[yysp][1], yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1].unwrap]), { rule: "CLASS Identifier ClassConstructor? ClassImplements? ClassBlock", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["ClassImplements?", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 123:
    /*! Production::    Class : CLASS Identifier ClassConstructor? ClassImplements? THEN ClassBlock */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? ClassImplements? THEN ClassBlock", ...[yyvstack[yysp - 4], false, yyvstack[yysp][1], yylstack[yysp - 5].origin === "class*", yyvstack[yysp - 3].unwrap, yyvstack[yysp - 2].unwrap]), { rule: "CLASS Identifier ClassConstructor? ClassImplements? THEN ClassBlock", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["ClassImplements?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 124:
    /*! Production::    Class : CLASS ClassConstructor? ClassImplements? ClassBlock */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? ClassImplements? ClassBlock", ...[undefined, false, yyvstack[yysp][1], yylstack[yysp - 3].origin === "class*", yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1].unwrap]), { rule: "CLASS ClassConstructor? ClassImplements? ClassBlock", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["ClassImplements?", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 125:
    /*! Production::    Class : CLASS ClassConstructor? ClassImplements? THEN ClassBlock */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? ClassImplements? THEN ClassBlock", ...[undefined, false, yyvstack[yysp][1], yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 3].unwrap, yyvstack[yysp - 2].unwrap]), { rule: "CLASS ClassConstructor? ClassImplements? THEN ClassBlock", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["ClassImplements?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 126:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? ClassBlock */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? ClassBlock", ...[yyvstack[yysp - 5], yyvstack[yysp - 2], yyvstack[yysp][1], yylstack[yysp - 6].origin === "class*", yyvstack[yysp - 4].unwrap, yyvstack[yysp - 1].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? ClassBlock", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], ["ClassConstructor?", yylstack[yysp - 4]], ["EXTENDS", yylstack[yysp - 3]], ["Value", yylstack[yysp - 2]], ["ClassImplements?", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 127:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock", ...[yyvstack[yysp - 6], yyvstack[yysp - 3], yyvstack[yysp][1], yylstack[yysp - 7].origin === "class*", yyvstack[yysp - 5].unwrap, yyvstack[yysp - 2].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], ["ClassConstructor?", yylstack[yysp - 5]], ["EXTENDS", yylstack[yysp - 4]], ["Value", yylstack[yysp - 3]], ["ClassImplements?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 128:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value ClassImplements? ClassBlock */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value ClassImplements? ClassBlock", ...[undefined, yyvstack[yysp - 2], yyvstack[yysp][1], yylstack[yysp - 5].origin === "class*", yyvstack[yysp - 4].unwrap, yyvstack[yysp - 1].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value ClassImplements? ClassBlock", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 5]], ["ClassConstructor?", yylstack[yysp - 4]], ["EXTENDS", yylstack[yysp - 3]], ["Value", yylstack[yysp - 2]], ["ClassImplements?", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 129:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements? */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements?", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], false, yylstack[yysp - 5].origin === "class*", yyvstack[yysp - 3].unwrap, yyvstack[yysp].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value ClassImplements?", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["EXTENDS", yylstack[yysp - 2]], ["Value", yylstack[yysp - 1]], ["ClassImplements?", yylstack[yysp]])
    break;

case 130:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value ClassImplements? */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value ClassImplements?", ...[undefined, yyvstack[yysp - 1],false, yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 3].unwrap, yyvstack[yysp].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value ClassImplements?", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["EXTENDS", yylstack[yysp - 2]], ["Value", yylstack[yysp - 1]], ["ClassImplements?", yylstack[yysp]])
    break;

case 131:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock", ...[undefined, yyvstack[yysp - 3], yyvstack[yysp][1], yylstack[yysp - 6].origin === "class*", yyvstack[yysp - 5].unwrap, yyvstack[yysp - 2].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value ClassImplements? THEN ClassBlock", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 6]], ["ClassConstructor?", yylstack[yysp - 5]], ["EXTENDS", yylstack[yysp - 4]], ["Value", yylstack[yysp - 3]], ["ClassImplements?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["ClassBlock", yylstack[yysp]])
    break;

case 132:
    /*! Production::    Class : CLASS ClassConstructor? ClassImplements? */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? ClassImplements?", ...[,,,yylstack[yysp - 2].origin === "class*", yyvstack[yysp - 1].unwrap, yyvstack[yysp].unwrap]), { rule: "CLASS ClassConstructor? ClassImplements?", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 2] && yylstack[yysp - 2].last_line, last_column: yylstack[yysp - 2] && yylstack[yysp - 2].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 2]], ["ClassConstructor?", yylstack[yysp - 1]], ["ClassImplements?", yylstack[yysp]])
    break;

case 133:
    /*! Production::    ClassBlock : "{{" "}}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("{{ }}", ...[yy.Block.wrap()]), { rule: "{{ }}", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 134:
    /*! Production::    ClassBlock : INDENT OUTDENT */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("INDENT OUTDENT", ...[yy.Block.wrap()]), { rule: "INDENT OUTDENT", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 135:
    /*! Production::    ClassBlock : "{{" INDENT OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("{{ INDENT OUTDENT }}", ...[yy.Block.wrap()]), { rule: "{{ INDENT OUTDENT }}", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 136:
    /*! Production::    ClassBlock : INDENT ClassBody OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("INDENT ClassBody OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT ClassBody OUTDENT", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["ClassBody", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 137:
    /*! Production::    ClassBlock : "{{" INDENT ClassBody OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("{{ INDENT ClassBody OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ClassBody OUTDENT }}", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ClassBody", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 138:
    /*! Production::    ClassBlock : "{" ClassBody "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassBlock"]("{ ClassBody }", ...[yyvstack[yysp - 1]]), { rule: "{ ClassBody }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ClassBody", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 139:
    /*! Production::    ClassConstructor? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 140:
    /*! Production::    ClassConstructor? : "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("<( TypeArguments )>", ...[{ args: yyvstack[yysp - 1] }]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 141:
    /*! Production::    ClassConstructor? : TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("TypeArguments? WITH Params", ...[{ args: yyvstack[yysp - 2].unwrap, ctor: yyvstack[yysp] }]), { rule: "TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":2,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 142:
    /*! Production::    ClassConstructor? : TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("TypeArguments? Params", ...[{ args: yyvstack[yysp - 1].unwrap, ctor: yyvstack[yysp] }]), { rule: "TypeArguments? Params", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp] && yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 143:
    /*! Production::    ForExpression : JointExpression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("JointExpression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["JointExpression", yylstack[yysp - 1]])
    break;

case 144:
    /*! Production::    ForExpression : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Declare", yylstack[yysp - 1]])
    break;

case 145:
    /*! Production::    JointExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["JointExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 146:
    /*! Production::    JointExpression : JointExpression "," Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["JointExpression"]("JointExpression , Expression", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "JointExpression , Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["JointExpression", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 147:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression Block", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["ForExpression", yylstack[yysp - 5]], [";", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], [";", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 148:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression THEN Block", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], [";", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], [";", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 149:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression ; Expression ; Expression THEN Expression", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], [";", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], [";", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 150:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression Block", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["ForExpression", yylstack[yysp - 5]], ["WHEN", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["WHILST", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 151:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Block", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], ["WHEN", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["WHILST", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 152:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Expression", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], ["WHEN", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["WHILST", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 153:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_OF Expression Block", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 4]], ["ForAssignable", yylstack[yysp - 3]], ["FOR_OF", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 154:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_IN Expression Block", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 4]], ["ForAssignable", yylstack[yysp - 3]], ["FOR_IN", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 155:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Block", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_OF", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 156:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Block", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_IN", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 157:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Expression", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_OF", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 158:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Expression", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_IN", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 159:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 160:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 161:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], [",", yylstack[yysp - 4]], ["Assignable", yylstack[yysp - 3]], ["ForAny", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 162:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 8] && yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8] && yylstack[yysp - 8].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 8] && yylstack[yysp - 8].src, type: yylstack[yysp - 8] && yylstack[yysp - 8].type || yylstack[yysp - 8] && yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 8]], ["DeclarationKeyword", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 163:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 8] && yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8] && yylstack[yysp - 8].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 8] && yylstack[yysp - 8].src, type: yylstack[yysp - 8] && yylstack[yysp - 8].type || yylstack[yysp - 8] && yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 8]], ["DeclarationKeyword", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 164:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 6]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["DeclarationKeyword", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], [",", yylstack[yysp - 4]], ["Assignable", yylstack[yysp - 3]], ["ForAny", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 165:
    /*! Production::    For : Expression POSTFOR DeclarationKeyword Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 7]), yyvstack[yysp - 5]]), { rule: "Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 7]], ["POSTFOR", yylstack[yysp - 6]], ["DeclarationKeyword", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], [",", yylstack[yysp - 3]], ["Assignable", yylstack[yysp - 2]], ["ForAny", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 166:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_OF Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_OF Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_OF Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["POSTFOR", yylstack[yysp - 3]], ["ForAssignable", yylstack[yysp - 2]], ["FOR_OF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 167:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_IN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_IN Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_IN Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["POSTFOR", yylstack[yysp - 3]], ["ForAssignable", yylstack[yysp - 2]], ["FOR_IN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 168:
    /*! Production::    For : Expression POSTFOR Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 6])]), { rule: "Expression POSTFOR Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 6]], ["POSTFOR", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], [",", yylstack[yysp - 3]], ["Assignable", yylstack[yysp - 2]], ["ForAny", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 169:
    /*! Production::    ForAssignable : DeclarationKeyword Assignable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("DeclarationKeyword Assignable", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "DeclarationKeyword Assignable", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 1]], ["Assignable", yylstack[yysp]])
    break;

case 170:
    /*! Production::    ForAssignable : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("Assignable", ...[yyvstack[yysp]]), { rule: "Assignable", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp]])
    break;

case 171:
    /*! Production::    Switch : SWITCH Expression INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression INDENT Cases OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "SWITCH Expression INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Cases", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 172:
    /*! Production::    Switch : SWITCH INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH INDENT Cases OUTDENT", ...[false, yyvstack[yysp - 1]]), { rule: "SWITCH INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Cases", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 173:
    /*! Production::    Switch : SWITCH Expression "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression {{ INDENT Cases OUTDENT }}", ...[yyvstack[yysp - 5], yyvstack[yysp - 2]]), { rule: "SWITCH Expression {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 6]], ["Expression", yylstack[yysp - 5]], ["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Cases", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 174:
    /*! Production::    Switch : SWITCH "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH {{ INDENT Cases OUTDENT }}", ...[false, yyvstack[yysp - 2]]), { rule: "SWITCH {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 5]], ["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Cases", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 175:
    /*! Production::    Cases : Case */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Cases"]("Case", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Case", yylstack[yysp - 1]])
    break;

case 176:
    /*! Production::    Cases : Cases NEWLINE Case */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Cases"]("Cases NEWLINE Case", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "Cases NEWLINE Case", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Cases", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Case", yylstack[yysp]])
    break;

case 177:
    /*! Production::    Case : Clauses THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Clauses THEN Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 178:
    /*! Production::    Case : Clauses THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Clauses THEN Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 179:
    /*! Production::    Case : Clauses Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Clauses Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 180:
    /*! Production::    Case : Multicondition THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Multicondition THEN Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 181:
    /*! Production::    Case : Multicondition THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Multicondition THEN Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 182:
    /*! Production::    Case : Multicondition Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Multicondition Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 183:
    /*! Production::    Case : DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Expression", ...[false, yy.Block.wrap(yyvstack[yysp])]), { rule: "DEFAULT Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 184:
    /*! Production::    Case : DEFAULT Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Block", ...[false, yyvstack[yysp].unwrap]), { rule: "DEFAULT Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 185:
    /*! Production::    Case : Expression POSTCASE MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Expression POSTCASE MulticheckClauses", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2])]), { rule: "Expression POSTCASE MulticheckClauses", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTCASE", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 186:
    /*! Production::    Case : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Case"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["BREAK", yylstack[yysp - 1]])
    break;

case 187:
    /*! Production::    Clauses : When */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("When", ...[yyvstack[yysp].contents]), { rule: "When", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["When", yylstack[yysp]])
    break;

case 188:
    /*! Production::    Clauses : Clauses NEWLINE When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses NEWLINE When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses NEWLINE When", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["When", yylstack[yysp]])
    break;

case 189:
    /*! Production::    Clauses : Clauses COMPOUND_OR When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses COMPOUND_OR When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses COMPOUND_OR When", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["COMPOUND_OR", yylstack[yysp - 1]], ["When", yylstack[yysp]])
    break;

case 190:
    /*! Production::    When : CASE Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("CASE Clause", ...[...yyvstack[yysp].contents]), { rule: "CASE Clause", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CASE", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 191:
    /*! Production::    When : IF Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("IF Clause", ...[...yyvstack[yysp].contents]), { rule: "IF Clause", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IF", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 192:
    /*! Production::    When : ON Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("ON Clause", ...[...yyvstack[yysp].contents]), { rule: "ON Clause", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ON", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 193:
    /*! Production::    When : WHEN Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("WHEN Clause", ...[...yyvstack[yysp].contents]), { rule: "WHEN Clause", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WHEN", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 194:
    /*! Production::    ForAny : FOR_FROM */
case 195:
    /*! Production::    ForAny : FOR_AT */
case 196:
    /*! Production::    ForAny : FOR_AS */
case 301:
    /*! Production::    PropObj : Function */
case 302:
    /*! Production::    PropObj : ClassFunction */
case 316:
    /*! Production::    PropObj : Assignment */
case 322:
    /*! Production::    ParamPropObj : ParamIdentifier */
case 452:
    /*! Production::    OptVoids : Voids */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 197:
    /*! Production::    If : IfBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["If"]("IfBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["IfBlock", yylstack[yysp - 1]])
    break;

case 198:
    /*! Production::    If : IfBlock Else */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("IfBlock Else", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "IfBlock Else", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfBlock", yylstack[yysp - 1]], ["Else", yylstack[yysp]])
    break;

case 199:
    /*! Production::    If : Expression "?" BlockExpression ":" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression : BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 4], yyvstack[yysp - 2].unwrap), new yy.Else('Else', yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression : BlockExpression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["?", yylstack[yysp - 3]], ["BlockExpression", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["BlockExpression", yylstack[yysp]])
    break;

case 200:
    /*! Production::    If : Expression "?" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 2], yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["?", yylstack[yysp - 1]], ["BlockExpression", yylstack[yysp]])
    break;

case 201:
    /*! Production::    If : Expression "?" INDENT BlockExpression ":" BlockExpression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? INDENT BlockExpression : BlockExpression OUTDENT", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 6], yyvstack[yysp - 3].unwrap), new yy.Else('Else', yyvstack[yysp - 1].unwrap)]), { rule: "Expression ? INDENT BlockExpression : BlockExpression OUTDENT", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 6]], ["?", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["BlockExpression", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["BlockExpression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 202:
    /*! Production::    If : Expression POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTIF Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTIF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 203:
    /*! Production::    If : Statement POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTIF Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true}, { generated: undefined }).setTokens(["Statement", yylstack[yysp - 2]], ["POSTIF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 204:
    /*! Production::    If : Expression POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"unless":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTUNLESS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 205:
    /*! Production::    If : Statement POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true,"unless":true}, { generated: undefined }).setTokens(["Statement", yylstack[yysp - 2]], ["POSTUNLESS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 206:
    /*! Production::    BlockExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["BlockExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 207:
    /*! Production::    BlockExpression : INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["BlockExpression"]("INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 208:
    /*! Production::    Try : TRY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "TRY Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TRY", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 209:
    /*! Production::    Try : TRY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Block", ...[yyvstack[yysp]]), { rule: "TRY Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TRY", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 210:
    /*! Production::    Catch : CATCH Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Block", ...[null, yyvstack[yysp]]), { rule: "CATCH Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 211:
    /*! Production::    Catch : CATCH Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Expression", ...[null, yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 212:
    /*! Production::    Catch : CATCH Identifier Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier Block", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "CATCH Identifier Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 2]], ["Identifier", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 213:
    /*! Production::    Catch : CATCH Identifier THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "CATCH Identifier THEN Block", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 214:
    /*! Production::    Catch : CATCH Identifier THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Identifier THEN Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 215:
    /*! Production::    Finally : FINALLY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Block", ...[yyvstack[yysp]]), { rule: "FINALLY Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FINALLY", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 216:
    /*! Production::    Finally : FINALLY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "FINALLY Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FINALLY", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 217:
    /*! Production::    TryBlock : Try */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try", ...[yyvstack[yysp], null, null]), { rule: "Try", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Try", yylstack[yysp]])
    break;

case 218:
    /*! Production::    TryBlock : Try Catch */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch", ...[yyvstack[yysp - 1], yyvstack[yysp], null]), { rule: "Try Catch", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Try", yylstack[yysp - 1]], ["Catch", yylstack[yysp]])
    break;

case 219:
    /*! Production::    TryBlock : Try Catch Finally */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch Finally", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Try Catch Finally", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Try", yylstack[yysp - 2]], ["Catch", yylstack[yysp - 1]], ["Finally", yylstack[yysp]])
    break;

case 220:
    /*! Production::    Loop : LOOP Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Block", ...[yyvstack[yysp].unwrap]), { rule: "LOOP Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["LOOP", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 221:
    /*! Production::    Loop : LOOP Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Expression", ...[yy.Block.wrap(yyvstack[yysp]).unwrap]), { rule: "LOOP Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["LOOP", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 222:
    /*! Production::    WhileUntil : WHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("WHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["WHILE", yylstack[yysp - 1]])
    break;

case 223:
    /*! Production::    WhileUntil : UNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("UNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["UNTIL", yylstack[yysp - 1]])
    break;

case 224:
    /*! Production::    WhileUntil : POSTWHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTWHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["POSTWHILE", yylstack[yysp - 1]])
    break;

case 225:
    /*! Production::    WhileUntil : POSTUNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTUNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["POSTUNTIL", yylstack[yysp - 1]])
    break;

case 226:
    /*! Production::    ElseOtherwise : ELSE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("ELSE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ELSE", yylstack[yysp - 1]])
    break;

case 227:
    /*! Production::    ElseOtherwise : OTHERWISE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OTHERWISE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["OTHERWISE", yylstack[yysp - 1]])
    break;

case 228:
    /*! Production::    ElseOtherwise : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["OR", yylstack[yysp - 1]])
    break;

case 229:
    /*! Production::    While : WhileUntil Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap, yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Block", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 230:
    /*! Production::    While : WhileUntil Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 231:
    /*! Production::    While : WhileUntil "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil ( Expression ) Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4]]), { rule: "WhileUntil ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 4]], ["(", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], [")", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 232:
    /*! Production::    While : WhileUntil Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap, yyvstack[yysp - 2]]), { rule: "WhileUntil Expression Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 233:
    /*! Production::    While : Loop WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1]]), { rule: "Loop WhileUntil Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Loop", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 234:
    /*! Production::    While : Loop NEWLINE WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop NEWLINE WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 3].unwrap, yyvstack[yysp - 1]]), { rule: "Loop NEWLINE WhileUntil Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Loop", yylstack[yysp - 3]], ["NEWLINE", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 235:
    /*! Production::    While : Expression WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Expression WhileUntil Expression", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2]), yyvstack[yysp - 1]]), { rule: "Expression WhileUntil Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 236:
    /*! Production::    IfUnless : IF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("IF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["IF", yylstack[yysp - 1]])
    break;

case 237:
    /*! Production::    IfUnless : UNLESS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("UNLESS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["UNLESS", yylstack[yysp - 1]])
    break;

case 238:
    /*! Production::    Else : ElseOtherwise Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 239:
    /*! Production::    Else : ElseOtherwise Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Expression", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 240:
    /*! Production::    Else : ElseOtherwise Statement */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Statement", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Statement", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 241:
    /*! Production::    Else : ElseOtherwise THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise THEN Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise THEN Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 242:
    /*! Production::    IfBlock : IfUnless "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless ( Expression ) Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 4]]), { rule: "IfUnless ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["(", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], [")", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 243:
    /*! Production::    IfBlock : IfUnless "(" Expression ")" Statement */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless ( Expression ) Statement", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 4]]), { rule: "IfUnless ( Expression ) Statement", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["(", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], [")", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 244:
    /*! Production::    IfBlock : IfUnless Expression "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression { Expression }", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp - 4]]), { rule: "IfUnless Expression { Expression }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 245:
    /*! Production::    IfBlock : IfUnless Expression "{" Statement "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression { Statement }", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp - 4]]), { rule: "IfUnless Expression { Statement }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Statement", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 246:
    /*! Production::    IfBlock : IfUnless Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 247:
    /*! Production::    IfBlock : IfUnless Expression THEN Statement */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Statement", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Statement", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 248:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Expression }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Expression }", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["THEN", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 249:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Statement "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Statement }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Statement }", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["THEN", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Statement", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 250:
    /*! Production::    IfBlock : IfUnless Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "IfUnless Expression Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 251:
    /*! Production::    IfBlock : IfUnless Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Block", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 252:
    /*! Production::    Value : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Assignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Assignable", yylstack[yysp - 1]])
    break;

case 253:
    /*! Production::    Value : Parenthetical */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Parenthetical", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Parenthetical", yylstack[yysp - 1]])
    break;

case 254:
    /*! Production::    Value : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Literal", yylstack[yysp - 1]])
    break;

case 255:
    /*! Production::    Value : Invocation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Invocation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Invocation", yylstack[yysp - 1]])
    break;

case 256:
    /*! Production::    Value : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Function", yylstack[yysp - 1]])
    break;

case 257:
    /*! Production::    Value : New */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("New", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["New", yylstack[yysp - 1]])
    break;

case 258:
    /*! Production::    Value : This */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("This", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["This", yylstack[yysp - 1]])
    break;

case 259:
    /*! Production::    Value : Super */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Super", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Super", yylstack[yysp - 1]])
    break;

case 260:
    /*! Production::    Value : SUCH */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("SUCH", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["SUCH", yylstack[yysp - 1]])
    break;

case 261:
    /*! Production::    Invocation : Value FUNC_EXISTS TypeArguments? Arguments */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS TypeArguments? Arguments", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Value FUNC_EXISTS TypeArguments? Arguments", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 3]], ["FUNC_EXISTS", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 262:
    /*! Production::    Invocation : Value "<(" TypeArguments ")>" Arguments */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value <( TypeArguments )> Arguments", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 2].setLoc(yylstack[yysp - 3], yylstack[yysp - 1])]), { rule: "Value <( TypeArguments )> Arguments", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 263:
    /*! Production::    Invocation : Value Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Arguments", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 264:
    /*! Production::    Invocation : Value FUNC_EXISTS TypeArguments? String */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS TypeArguments? String", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Value FUNC_EXISTS TypeArguments? String", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"templ":true,"soak":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 3]], ["FUNC_EXISTS", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["String", yylstack[yysp]])
    break;

case 265:
    /*! Production::    Invocation : Value "<(" TypeArguments ")>" String */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value <( TypeArguments )> String", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 2].setLoc(yylstack[yysp - 3], yylstack[yysp - 1])]), { rule: "Value <( TypeArguments )> String", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"templ":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["String", yylstack[yysp]])
    break;

case 266:
    /*! Production::    Invocation : Value String */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value String", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value String", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"templ":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["String", yylstack[yysp]])
    break;

case 267:
    /*! Production::    Invocation : SUPER FUNC_EXISTS Arguments */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "SUPER FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 2]], ["FUNC_EXISTS", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 268:
    /*! Production::    Invocation : SUPER "<(" TypeArguments ")>" Arguments */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER <( TypeArguments )> Arguments", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 2].setLoc(yylstack[yysp - 3], yylstack[yysp - 1])]), { rule: "SUPER <( TypeArguments )> Arguments", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 269:
    /*! Production::    Invocation : SUPER Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "SUPER Arguments", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 270:
    /*! Production::    Arguments : CALL_START CALL_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START CALL_END", ...[/* */]), { rule: "CALL_START CALL_END", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 271:
    /*! Production::    Arguments : CALL_START ArgList OptComma CALL_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START ArgList OptComma CALL_END", ...[yyvstack[yysp - 2]]), { rule: "CALL_START ArgList OptComma CALL_END", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 3]], ["ArgList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 272:
    /*! Production::    Arguments : CALL_START INDENT ArgList OptComma OUTDENT CALL_END */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START INDENT ArgList OptComma OUTDENT CALL_END", ...[yyvstack[yysp - 3]]), { rule: "CALL_START INDENT ArgList OptComma OUTDENT CALL_END", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ArgList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 273:
    /*! Production::    ArgList : Arg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ArgList"]("Arg", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Arg", yylstack[yysp - 1]])
    break;

case 274:
    /*! Production::    ArgList : ArgList "," Arg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList , Arg", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "ArgList , Arg", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Arg", yylstack[yysp]])
    break;

case 275:
    /*! Production::    ArgList : ArgList OptComma NEWLINE Arg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma NEWLINE Arg", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp]]), { rule: "ArgList OptComma NEWLINE Arg", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Arg", yylstack[yysp]])
    break;

case 276:
    /*! Production::    ArgList : ArgList OptComma INDENT ArgList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma INDENT ArgList OptComma OUTDENT", ...[...yyvstack[yysp - 5].contents, false, ...yyvstack[yysp - 2].contents]), { rule: "ArgList OptComma INDENT ArgList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 5]], ["OptComma", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ArgList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 277:
    /*! Production::    Arg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Arg"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 278:
    /*! Production::    Arg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("... Expression", ...[yyvstack[yysp]]), { rule: "... Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 279:
    /*! Production::    Arg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("Expression ...", ...[yyvstack[yysp - 1]]), { rule: "Expression ...", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 280:
    /*! Production::    New : NEW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["New"]("NEW Expression", ...[yyvstack[yysp]]), { rule: "NEW Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 281:
    /*! Production::    Super : SUPER "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER . PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] })]), { rule: "SUPER . PROPERTY", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 282:
    /*! Production::    Super : SUPER INDEX_START PROPERTY INDEX_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER INDEX_START PROPERTY INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "SUPER INDEX_START PROPERTY INDEX_END", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 3]], ["INDEX_START", yylstack[yysp - 2]], ["PROPERTY", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 283:
    /*! Production::    This : THIS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["This"]("THIS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["THIS", yylstack[yysp - 1]])
    break;

case 284:
    /*! Production::    Parenthetical : "(" Expression ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Expression )", ...[yyvstack[yysp - 1]]), { rule: "( Expression )", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 285:
    /*! Production::    Parenthetical : "(" Body ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Body )", ...[yyvstack[yysp - 1]]), { rule: "( Body )", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 286:
    /*! Production::    Parenthetical : "(" INDENT Body OUTDENT ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( INDENT Body OUTDENT )", ...[yyvstack[yysp - 2]]), { rule: "( INDENT Body OUTDENT )", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Body", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 287:
    /*! Production::    OptComma : %epsilon */
case 451:
    /*! Production::    OptVoids : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = undefined
    break;

case 288:
    /*! Production::    OptComma : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["OptComma"](",", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens([",", yylstack[yysp - 1]])
    break;

case 289:
    /*! Production::    Object : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 290:
    /*! Production::    Object : "{" PropList OptComma "}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ PropList OptComma }", ...[yyvstack[yysp - 2]]), { rule: "{ PropList OptComma }", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"indentOf":1}, { generated: undefined, indented: yylstack[yysp - 3].indented }).setTokens(["{", yylstack[yysp - 3]], ["PropList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 291:
    /*! Production::    Object : "{" INDENT PropList OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ INDENT PropList OUTDENT }", ...[yyvstack[yysp - 2]]), { rule: "{ INDENT PropList OUTDENT }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["PropList", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 292:
    /*! Production::    PropList : PropObj */
case 297:
    /*! Production::    ParamPropList : ParamPropObj */
case 445:
    /*! Production::    ParamArrayArg : ParamAssignable */
case 449:
    /*! Production::    ArrayArg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp]]
    break;

case 293:
    /*! Production::    PropList : PropList "," PropObj */
case 298:
    /*! Production::    ParamPropList : ParamPropList "," ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].push(yyvstack[yysp]) && yyvstack[yysp - 2]
    break;

case 294:
    /*! Production::    PropList : PropList OptComma NEWLINE PropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yylstack[yysp - 1].generated, yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 295:
    /*! Production::    PropList : PropList OptComma INDENT PropList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].concat(false, ...[yyvstack[yysp - 1]])
    break;

case 296:
    /*! Production::    ParamPropList : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = []
    break;

case 299:
    /*! Production::    ParamPropList : ParamPropList OptComma NEWLINE ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 300:
    /*! Production::    ParamPropList : ParamPropList OptComma INDENT ParamPropObj OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].push(yyvstack[yysp - 1]) && yyvstack[yysp - 4]
    break;

case 303:
    /*! Production::    PropObj : PROPERTY ":" Expression */
case 306:
    /*! Production::    PropObj : AlphaNum ":" Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp], [yylstack[yysp - 2], yylstack[yysp]]]
    break;

case 304:
    /*! Production::    PropObj : PROPERTY ":" Block */
case 307:
    /*! Production::    PropObj : AlphaNum ":" Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 2], yylstack[yysp], true]]
    break;

case 305:
    /*! Production::    PropObj : PROPERTY ":" INDENT Expression OUTDENT */
case 308:
    /*! Production::    PropObj : AlphaNum ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 4], yyvstack[yysp - 1], [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 309:
    /*! Production::    PropObj : "[" Expression "]" ":" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yyvstack[yysp], [yylstack[yysp - 4], yylstack[yysp]]]
    break;

case 310:
    /*! Production::    PropObj : "[" Expression "]" ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 5], yyvstack[yysp - 1], [yylstack[yysp - 6], yylstack[yysp - 1], true]]
    break;

case 311:
    /*! Production::    PropObj : "[" Expression "]" ":" Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 312:
    /*! Production::    PropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 1], yylstack[yysp]]]
    break;

case 313:
    /*! Production::    PropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 314:
    /*! Production::    PropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 315:
    /*! Production::    PropObj : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp][1], false, [yylstack[yysp], yylstack[yysp]]]
    break;

case 317:
    /*! Production::    PropObj : "..." Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 318:
    /*! Production::    PropObj : Value "..." */
case 323:
    /*! Production::    ParamPropObj : ParamIdentifier ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1]
    break;

case 319:
    /*! Production::    ParamPropObj : PROPERTY ":" ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],yyvstack[yysp],,,yylstack[yysp - 2]]
    break;

case 320:
    /*! Production::    ParamPropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1],,,,yylstack[yysp - 1]]
    break;

case 321:
    /*! Production::    ParamPropObj : PROPERTY ":" Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3],,yyvstack[yysp],,yylstack[yysp - 3]]
    break;

case 324:
    /*! Production::    ParamPropObj : ParamIdentifier Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,yyvstack[yysp]]
    break;

case 325:
    /*! Production::    ParamPropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1],,,true,yylstack[yysp - 1]]
    break;

case 326:
    /*! Production::    ParamPropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,,true,yylstack[yysp - 2]]
    break;

case 327:
    /*! Production::    Literal : AlphaNum */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("AlphaNum", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["AlphaNum", yylstack[yysp - 1]])
    break;

case 328:
    /*! Production::    Literal : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Regex", yylstack[yysp - 1]])
    break;

case 329:
    /*! Production::    Literal : UNDEFINED */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("UNDEFINED", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["UNDEFINED", yylstack[yysp - 1]])
    break;

case 330:
    /*! Production::    Literal : INFINITY */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("INFINITY", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["INFINITY", yylstack[yysp - 1]])
    break;

case 331:
    /*! Production::    Literal : BOOL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("BOOL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["BOOL", yylstack[yysp - 1]])
    break;

case 332:
    /*! Production::    Literal : NULL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NULL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["NULL", yylstack[yysp - 1]])
    break;

case 333:
    /*! Production::    Literal : NAN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NAN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["NAN", yylstack[yysp - 1]])
    break;

case 334:
    /*! Production::    AlphaNum : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["String", yylstack[yysp - 1]])
    break;

case 335:
    /*! Production::    AlphaNum : NUMBER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("NUMBER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["NUMBER", yylstack[yysp - 1]])
    break;

case 336:
    /*! Production::    String : STRING */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("STRING", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["STRING", yylstack[yysp - 1]])
    break;

case 337:
    /*! Production::    String : StringWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("StringWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["StringWithInterpolations", yylstack[yysp - 1]])
    break;

case 338:
    /*! Production::    JSX : JSX_START Interpolations JSX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["JSX"]("JSX_START Interpolations JSX_END", ...[yyvstack[yysp - 1], yyvstack[yysp - 2]]), { rule: "JSX_START Interpolations JSX_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["JSX_START", yylstack[yysp - 2]], ["Interpolations", yylstack[yysp - 1]], ["JSX_END", yylstack[yysp]])
    break;

case 339:
    /*! Production::    StringWithInterpolations : STRING_START Interpolations STRING_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["StringWithInterpolations"]("STRING_START Interpolations STRING_END", ...[yyvstack[yysp - 1], yyvstack[yysp - 2]]), { rule: "STRING_START Interpolations STRING_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STRING_START", yylstack[yysp - 2]], ["Interpolations", yylstack[yysp - 1]], ["STRING_END", yylstack[yysp]])
    break;

case 340:
    /*! Production::    Interpolations : Interpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolation", ...[yyvstack[yysp]]), { rule: "Interpolation", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Interpolation", yylstack[yysp]])
    break;

case 341:
    /*! Production::    Interpolations : Interpolations Interpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolations Interpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "Interpolations Interpolation", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Interpolations", yylstack[yysp - 1]], ["Interpolation", yylstack[yysp]])
    break;

case 342:
    /*! Production::    Interpolations : Interpolations INDENT Interpolations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolations INDENT Interpolations OUTDENT", ...[...yyvstack[yysp - 3].contents, 1, ...yyvstack[yysp - 1].contents, -1]), { rule: "Interpolations INDENT Interpolations OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Interpolations", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Interpolations", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 343:
    /*! Production::    Interpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERPOLATION_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INTERPOLATION_END", yylstack[yysp]])
    break;

case 344:
    /*! Production::    Interpolation : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Interpolation"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["String", yylstack[yysp - 1]])
    break;

case 345:
    /*! Production::    Regex : REGEX */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("REGEX", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["REGEX", yylstack[yysp - 1]])
    break;

case 346:
    /*! Production::    Regex : RegexWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("RegexWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["RegexWithInterpolations", yylstack[yysp - 1]])
    break;

case 347:
    /*! Production::    RegexWithInterpolations : REGEX_START RegexInterpolations REGEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexWithInterpolations"]("REGEX_START RegexInterpolations REGEX_END", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "REGEX_START RegexInterpolations REGEX_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["REGEX_START", yylstack[yysp - 2]], ["RegexInterpolations", yylstack[yysp - 1]], ["REGEX_END", yylstack[yysp]])
    break;

case 348:
    /*! Production::    RegexInterpolations : RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolation", ...[yyvstack[yysp]]), { rule: "RegexInterpolation", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["RegexInterpolation", yylstack[yysp]])
    break;

case 349:
    /*! Production::    RegexInterpolations : RegexInterpolations RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolations RegexInterpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "RegexInterpolations RegexInterpolation", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RegexInterpolations", yylstack[yysp - 1]], ["RegexInterpolation", yylstack[yysp]])
    break;

case 350:
    /*! Production::    RegexInterpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERPOLATION_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INTERPOLATION_END", yylstack[yysp]])
    break;

case 351:
    /*! Production::    RegexInterpolation : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["RegexInterpolation"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Regex", yylstack[yysp - 1]])
    break;

case 352:
    /*! Production::    ClassFunctionPrelude : ClassFunctionTag */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ClassFunctionPrelude"]("ClassFunctionTag", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ClassFunctionTag", yylstack[yysp - 1]])
    break;

case 353:
    /*! Production::    ClassFunctionPrelude : ClassFunctionPrelude ClassFunctionTag */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionPrelude"]("ClassFunctionPrelude ClassFunctionTag", ...[...yyvstack[yysp - 1].addTag(yyvstack[yysp])]), { rule: "ClassFunctionPrelude ClassFunctionTag", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ClassFunctionPrelude", yylstack[yysp - 1]], ["ClassFunctionTag", yylstack[yysp]])
    break;

case 354:
    /*! Production::    ClassFunctionTag : FUNCTION */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionTag"]("FUNCTION", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "FUNCTION", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["FUNCTION", yylstack[yysp]])
    break;

case 355:
    /*! Production::    ClassFunctionTag : STATIC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionTag"]("STATIC", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "STATIC", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["STATIC", yylstack[yysp]])
    break;

case 356:
    /*! Production::    ClassFunctionTag : GET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionTag"]("GET", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "GET", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["GET", yylstack[yysp]])
    break;

case 357:
    /*! Production::    ClassFunctionTag : SET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionTag"]("SET", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "SET", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["SET", yylstack[yysp]])
    break;

case 358:
    /*! Production::    ClassFunctionTag : ASYNC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunctionTag"]("ASYNC", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "ASYNC", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp]])
    break;

case 359:
    /*! Production::    FunctionPrelude : FunctionTag */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["FunctionPrelude"]("FunctionTag", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["FunctionTag", yylstack[yysp - 1]])
    break;

case 360:
    /*! Production::    FunctionPrelude : FunctionPrelude FunctionTag */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPrelude"]("FunctionPrelude FunctionTag", ...[...yyvstack[yysp - 1].addTag(yyvstack[yysp])]), { rule: "FunctionPrelude FunctionTag", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FunctionPrelude", yylstack[yysp - 1]], ["FunctionTag", yylstack[yysp]])
    break;

case 361:
    /*! Production::    FunctionTag : FUNCTION */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionTag"]("FUNCTION", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "FUNCTION", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["FUNCTION", yylstack[yysp]])
    break;

case 362:
    /*! Production::    FunctionTag : ASYNC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionTag"]("ASYNC", ...[yyvstack[yysp], yylstack[yysp]]), { rule: "ASYNC", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp]])
    break;

case 363:
    /*! Production::    FunctionInterlude : "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("<( TypeArguments )>", ...[{ generics: yyvstack[yysp - 1].setLoc(yylstack[yysp - 2], yylstack[yysp - 1]) }]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 364:
    /*! Production::    FunctionInterlude : IDENTIFIER TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("IDENTIFIER TypeArguments?", ...[{ id: yyvstack[yysp - 1], generics: yyvstack[yysp].unwrap }]), { rule: "IDENTIFIER TypeArguments?", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 1]], ["TypeArguments?", yylstack[yysp]])
    break;

case 365:
    /*! Production::    FunctionInterlude : IDENTIFIER TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("IDENTIFIER TypeArguments? Params", ...[{ id: yyvstack[yysp - 2], params: yyvstack[yysp], generics: yyvstack[yysp - 1].unwrap }]), { rule: "IDENTIFIER TypeArguments? Params", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 366:
    /*! Production::    FunctionInterlude : IDENTIFIER TypeArguments? WITH */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("IDENTIFIER TypeArguments? WITH", ...[{ id: yyvstack[yysp - 2], generics: yyvstack[yysp - 1].unwrap }]), { rule: "IDENTIFIER TypeArguments? WITH", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["WITH", yylstack[yysp]])
    break;

case 367:
    /*! Production::    FunctionInterlude : IDENTIFIER TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("IDENTIFIER TypeArguments? WITH Params", ...[{ id: yyvstack[yysp - 3], generics: yyvstack[yysp - 2].unwrap, params: yyvstack[yysp] }]), { rule: "IDENTIFIER TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 368:
    /*! Production::    FunctionInterlude : TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("TypeArguments? Params", ...[{ generics: yyvstack[yysp - 1].unwrap, params: yyvstack[yysp] }]), { rule: "TypeArguments? Params", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp] && yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 369:
    /*! Production::    FunctionInterlude : TypeArguments? WITH */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("TypeArguments? WITH", ...[{ generics: yyvstack[yysp - 1].unwrap }]), { rule: "TypeArguments? WITH", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp] && yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 1]], ["WITH", yylstack[yysp]])
    break;

case 370:
    /*! Production::    FunctionInterlude : TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude"]("TypeArguments? WITH Params", ...[{ generics: yyvstack[yysp - 2].unwrap, params: yyvstack[yysp] }]), { rule: "TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":2,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 371:
    /*! Production::    FunctionPostlude : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("Expression", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "Expression", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Expression", yylstack[yysp]])
    break;

case 372:
    /*! Production::    FunctionPostlude : Statement */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("Statement", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "Statement", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Statement", yylstack[yysp]])
    break;

case 373:
    /*! Production::    FunctionPostlude : Block */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp])]), { rule: "Block", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["Block", yylstack[yysp]])
    break;

case 374:
    /*! Production::    FunctionPostlude : THEN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("THEN Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp - 1], yylstack[yysp])]), { rule: "THEN Block", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 375:
    /*! Production::    FunctionPostlude : THEN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("THEN Expression", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "THEN Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 376:
    /*! Production::    FunctionPostlude : THEN Statement */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude"]("THEN Statement", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "THEN Statement", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THEN", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 377:
    /*! Production::    Function : FunctionPrelude FunctionInterlude? FUNC_DIRECTIVE? FunctionPostlude? */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FunctionPrelude FunctionInterlude? FUNC_DIRECTIVE? FunctionPostlude?", ...[yyvstack[yysp - 3], yyvstack[yysp - 2].unwrap || {}, yyvstack[yysp].unwrap, yyvstack[yysp - 1].unwrap]), { rule: "FunctionPrelude FunctionInterlude? FUNC_DIRECTIVE? FunctionPostlude?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 3] && yylstack[yysp - 3].last_line, last_column: yylstack[yysp - 3] && yylstack[yysp - 3].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FunctionPrelude", yylstack[yysp - 3]], ["FunctionInterlude?", yylstack[yysp - 2]], ["FUNC_DIRECTIVE?", yylstack[yysp - 1]], ["FunctionPostlude?", yylstack[yysp]])
    break;

case 378:
    /*! Production::    FunctionInterlude? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionInterlude?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 379:
    /*! Production::    FunctionInterlude? : FunctionInterlude */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["FunctionInterlude?"]("FunctionInterlude", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["FunctionInterlude", yylstack[yysp - 1]])
    break;

case 380:
    /*! Production::    FunctionPostlude? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FunctionPostlude?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 381:
    /*! Production::    FunctionPostlude? : FunctionPostlude */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["FunctionPostlude?"]("FunctionPostlude", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["FunctionPostlude", yylstack[yysp - 1]])
    break;

case 382:
    /*! Production::    FUNC_DIRECTIVE? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FUNC_DIRECTIVE?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 383:
    /*! Production::    FUNC_DIRECTIVE? : FUNC_DIRECTIVE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["FUNC_DIRECTIVE?"]("FUNC_DIRECTIVE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["FUNC_DIRECTIVE", yylstack[yysp - 1]])
    break;

case 384:
    /*! Production::    ClassFunction : ClassFunctionPrelude FunctionInterlude */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunction"]("ClassFunctionPrelude FunctionInterlude", ...[yyvstack[yysp - 1], yyvstack[yysp], yy.Block.wrap()]), { rule: "ClassFunctionPrelude FunctionInterlude", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ClassFunctionPrelude", yylstack[yysp - 1]], ["FunctionInterlude", yylstack[yysp]])
    break;

case 385:
    /*! Production::    ClassFunction : ClassFunctionPrelude FunctionInterlude FunctionPostlude */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunction"]("ClassFunctionPrelude FunctionInterlude FunctionPostlude", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "ClassFunctionPrelude FunctionInterlude FunctionPostlude", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ClassFunctionPrelude", yylstack[yysp - 2]], ["FunctionInterlude", yylstack[yysp - 1]], ["FunctionPostlude", yylstack[yysp]])
    break;

case 386:
    /*! Production::    ClassFunction : FunctionInterlude */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunction"]("FunctionInterlude", ...[new yy.ClassFunctionPrelude(null), yyvstack[yysp], yy.Block.wrap()]), { rule: "FunctionInterlude", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["FunctionInterlude", yylstack[yysp]])
    break;

case 387:
    /*! Production::    ClassFunction : FunctionInterlude FunctionPostlude */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassFunction"]("FunctionInterlude FunctionPostlude", ...[new yy.ClassFunctionPrelude(null), yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "FunctionInterlude FunctionPostlude", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FunctionInterlude", yylstack[yysp - 1]], ["FunctionPostlude", yylstack[yysp]])
    break;

case 388:
    /*! Production::    TypeArguments? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 389:
    /*! Production::    TypeArguments? : "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( TypeArguments )>", ...[yyvstack[yysp - 1]]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 390:
    /*! Production::    TypeArguments? : "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( INDENT TypeArguments OUTDENT )>", ...[yyvstack[yysp - 2]]), { rule: "<( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 391:
    /*! Production::    Params : PARAM_START PARAM_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START PARAM_END", ...[[]]), { rule: "PARAM_START PARAM_END", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 1]], ["PARAM_END", yylstack[yysp]])
    break;

case 392:
    /*! Production::    Params : PARAM_START ParamList PARAM_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START ParamList PARAM_END", ...[yyvstack[yysp - 1].setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "PARAM_START ParamList PARAM_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 2]], ["ParamList", yylstack[yysp - 1]], ["PARAM_END", yylstack[yysp]])
    break;

case 393:
    /*! Production::    ParamList : Param */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("Param", ...[yyvstack[yysp]]), { rule: "Param", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Param", yylstack[yysp]])
    break;

case 394:
    /*! Production::    ParamList : ParamList "," Param */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList , Param", ...[...yyvstack[yysp - 2].addParam(yyvstack[yysp])]), { rule: "ParamList , Param", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Param", yylstack[yysp]])
    break;

case 395:
    /*! Production::    ParamList : ParamList OptComma NEWLINE Param */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma NEWLINE Param", ...[...yyvstack[yysp - 3].addParam(yyvstack[yysp])]), { rule: "ParamList OptComma NEWLINE Param", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Param", yylstack[yysp]])
    break;

case 396:
    /*! Production::    ParamList : ParamList OptComma INDENT ParamList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma INDENT ParamList OptComma OUTDENT", ...[...yyvstack[yysp - 5].addParams(yyvstack[yysp - 2].contents)]), { rule: "ParamList OptComma INDENT ParamList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 5]], ["OptComma", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 397:
    /*! Production::    Param : ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Param"]("ParamAssignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ParamAssignable", yylstack[yysp - 1]])
    break;

case 398:
    /*! Production::    Assign : Assignment */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assign"]("Assignment", ...[yyvstack[yysp]]), { rule: "Assignment", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Assignment", yylstack[yysp]])
    break;

case 399:
    /*! Production::    Assignment : Assignable AssignKeyword Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 400:
    /*! Production::    Assignment : Assignable AssignKeyword INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword INDENT Expression OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3]]), { rule: "Assignable AssignKeyword INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 4]], ["AssignKeyword", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 401:
    /*! Production::    Assignment : Assignable AssignKeyword NEWLINE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword NEWLINE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Assignable AssignKeyword NEWLINE Expression", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 3]], ["AssignKeyword", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 402:
    /*! Production::    Assignment : Assignable AssignKeyword Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Block", ...[yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 403:
    /*! Production::    AssignKeyword : AS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["AssignKeyword"]("AS", ...[yylstack[yysp].origin]), { rule: "AS", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["AS", yylstack[yysp]])
    break;

case 404:
    /*! Production::    AssignKeyword : AT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("AT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["AT", yylstack[yysp - 1]])
    break;

case 405:
    /*! Production::    AssignKeyword : FROM */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("FROM", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["FROM", yylstack[yysp - 1]])
    break;

case 406:
    /*! Production::    Assignable : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 407:
    /*! Production::    Assignable : Object */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Object", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Object", yylstack[yysp - 1]])
    break;

case 408:
    /*! Production::    Assignable : Array */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Array", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Array", yylstack[yysp - 1]])
    break;

case 409:
    /*! Production::    Assignable : Value Access */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignable"]("Value Access", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Access", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["Access", yylstack[yysp]])
    break;

case 410:
    /*! Production::    Assignable : Expression IN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignable"]("Expression IN Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression IN Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["IN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 411:
    /*! Production::    Defaults : AS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Defaults"]("AS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["AS", yylstack[yysp - 1]])
    break;

case 412:
    /*! Production::    Defaults : DEFAULTS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Defaults"]("DEFAULTS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["DEFAULTS", yylstack[yysp - 1]])
    break;

case 413:
    /*! Production::    ParamAssignable : ParamIdentifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamIdentifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ParamIdentifier", yylstack[yysp - 1]])
    break;

case 414:
    /*! Production::    ParamAssignable : ParamObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ParamObject", yylstack[yysp - 1]])
    break;

case 415:
    /*! Production::    ParamAssignable : ParamObject Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamObject', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 416:
    /*! Production::    ParamAssignable : ParamArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ParamArray", yylstack[yysp - 1]])
    break;

case 417:
    /*! Production::    ParamAssignable : ParamArray Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamArray', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 418:
    /*! Production::    ParamObject : "{" ParamPropList "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ ParamPropList }", ...[yyvstack[yysp - 1]]), { rule: "{ ParamPropList }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ParamPropList", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 419:
    /*! Production::    ParamObject : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 420:
    /*! Production::    Identifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Identifier"]("IDENTIFIER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["IDENTIFIER", yylstack[yysp - 1]])
    break;

case 421:
    /*! Production::    ParamIdentifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER", ...[yyvstack[yysp]]), { rule: "IDENTIFIER", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp]])
    break;

case 422:
    /*! Production::    ParamIdentifier : "..." IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... IDENTIFIER", ...[yyvstack[yysp]]), { rule: "... IDENTIFIER", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 1]], ["IDENTIFIER", yylstack[yysp]])
    break;

case 423:
    /*! Production::    ParamIdentifier : IDENTIFIER "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER ...", ...[yyvstack[yysp - 1]]), { rule: "IDENTIFIER ...", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 424:
    /*! Production::    ParamIdentifier : IDENTIFIER Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER Defaults Expression", ...[yyvstack[yysp - 2],,yyvstack[yysp]]), { rule: "IDENTIFIER Defaults Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 2]], ["Defaults", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 425:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "THIS . PROPERTY", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 426:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY Defaults Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY Defaults Expression", ...[yyvstack[yysp - 2],true,yyvstack[yysp]]), { rule: "THIS . PROPERTY Defaults Expression", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 4]], [".", yylstack[yysp - 3]], ["PROPERTY", yylstack[yysp - 2]], ["Defaults", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 427:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY "..." */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY ...", ...[yyvstack[yysp - 1], true]), { rule: "THIS . PROPERTY ...", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":3,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 3]], [".", yylstack[yysp - 2]], ["PROPERTY", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 428:
    /*! Production::    ParamIdentifier : "..." THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "... THIS . PROPERTY", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 3]], ["THIS", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 429:
    /*! Production::    ParamIdentifier : THIS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS", ...[yyvstack[yysp],,,true]), { rule: "THIS", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["THIS", yylstack[yysp]])
    break;

case 430:
    /*! Production::    Access : "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"](". PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] }), yylstack[yysp - 1].origin === '?.']), { rule: ". PROPERTY", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens([".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 431:
    /*! Production::    Access : INDEX_START Expression INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"]("INDEX_START Expression INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "INDEX_START Expression INDEX_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["INDEX_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 432:
    /*! Production::    ParamArray : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 433:
    /*! Production::    ParamArray : "[" ParamArrayList OptVoids "]" */
case 434:
    /*! Production::    ParamArray : "[" ParamArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ParamArrayList OptVoids ]", ...[yyvstack[yysp - 2]]), { rule: "[ ParamArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 3]], ["ParamArrayList", yylstack[yysp - 2]], ["OptVoids", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 435:
    /*! Production::    Array : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 1].generated }).setTokens(["[", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 436:
    /*! Production::    Array : "[" ArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ArrayList OptVoids ]", ...[...yyvstack[yysp - 2]]), { rule: "[ ArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 3].generated }).setTokens(["[", yylstack[yysp - 3]], ["ArrayList", yylstack[yysp - 2]], ["OptVoids", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 437:
    /*! Production::    Array : "[" INDENT ArrayList OptVoids OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ INDENT ArrayList OptVoids OUTDENT ]", ...[...yyvstack[yysp - 3]]), { rule: "[ INDENT ArrayList OptVoids OUTDENT ]", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":1,"indented":true}, { generated: yylstack[yysp - 5].generated }).setTokens(["[", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ArrayList", yylstack[yysp - 3]], ["OptVoids", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 438:
    /*! Production::    ParamArrayList : ParamArrayArg */
case 441:
    /*! Production::    ArrayList : ArrayArg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp]]
    break;

case 439:
    /*! Production::    ParamArrayList : ParamArrayList "," ParamArrayArg */
case 442:
    /*! Production::    ArrayList : ArrayList "," ArrayArg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp])
    break;

case 440:
    /*! Production::    ParamArrayList : ParamArrayList OptComma NEWLINE ParamArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yyvstack[yysp])
    break;

case 443:
    /*! Production::    ArrayList : ArrayList OptComma INDENT ArrayList OptVoids OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 5].concat(false, yyvstack[yysp - 2])
    break;

case 444:
    /*! Production::    ArrayList : ArrayList OptComma NEWLINE ArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yylstack[yysp - 1].generated, yyvstack[yysp])
    break;

case 446:
    /*! Production::    ParamArrayArg : Voids ParamAssignable */
case 450:
    /*! Production::    ArrayArg : Voids Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp - 1], yyvstack[yysp]]
    break;

case 447:
    /*! Production::    ArrayArg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp], { expansion: true })]
    break;

case 448:
    /*! Production::    ArrayArg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp - 1], { expansion: true })]
    break;

case 453:
    /*! Production::    Voids : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null]
    break;

case 454:
    /*! Production::    Voids : "," Voids */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 455:
    /*! Production::    Voids : "," NEWLINE Voids */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 456:
    /*! Production::    Statement : Return */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Return", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Return", yylstack[yysp - 1]])
    break;

case 457:
    /*! Production::    Statement : BREAK Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("BREAK Identifier", ...[yyvstack[yysp]]), { rule: "BREAK Identifier", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["BREAK", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 458:
    /*! Production::    Statement : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["BREAK", yylstack[yysp - 1]])
    break;

case 459:
    /*! Production::    Statement : CONTINUE Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("CONTINUE Identifier", ...[yyvstack[yysp]]), { rule: "CONTINUE Identifier", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CONTINUE", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 460:
    /*! Production::    Statement : CONTINUE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("CONTINUE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["CONTINUE", yylstack[yysp - 1]])
    break;

case 461:
    /*! Production::    Statement : Import */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Import", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Import", yylstack[yysp - 1]])
    break;

case 462:
    /*! Production::    Statement : Export */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Export", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Export", yylstack[yysp - 1]])
    break;

case 463:
    /*! Production::    Statement : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Declare", yylstack[yysp - 1]])
    break;

case 464:
    /*! Production::    Statement : THROW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW Expression", ...[yyvstack[yysp]]), { rule: "THROW Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THROW", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 465:
    /*! Production::    Statement : THROW INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "THROW INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THROW", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 466:
    /*! Production::    Statement : DELETE Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("DELETE Expression", ...[yyvstack[yysp]]), { rule: "DELETE Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DELETE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 467:
    /*! Production::    Statement : Type */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Type", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Type", yylstack[yysp - 1]])
    break;

case 468:
    /*! Production::    Statement : Interface */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Interface", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Interface", yylstack[yysp - 1]])
    break;

case 469:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? IntExtends? InterfaceBody */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? IntExtends? InterfaceBody", ...[yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "INTERFACE Identifier TypeArguments? IntExtends? InterfaceBody", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERFACE", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["IntExtends?", yylstack[yysp - 1]], ["InterfaceBody", yylstack[yysp]])
    break;

case 470:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? IntExtends? INDENT InterfaceBody OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? IntExtends? INDENT InterfaceBody OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3].unwrap]), { rule: "INTERFACE Identifier TypeArguments? IntExtends? INDENT InterfaceBody OUTDENT", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERFACE", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], ["TypeArguments?", yylstack[yysp - 4]], ["IntExtends?", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["InterfaceBody", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 471:
    /*! Production::    IntExtends? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntExtends?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 472:
    /*! Production::    IntExtends? : EXTENDS ExtendsNames */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntExtends?"]("EXTENDS ExtendsNames", ...[yyvstack[yysp]]), { rule: "EXTENDS ExtendsNames", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXTENDS", yylstack[yysp - 1]], ["ExtendsNames", yylstack[yysp]])
    break;

case 473:
    /*! Production::    ClassImplements? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassImplements?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 474:
    /*! Production::    ClassImplements? : IMPLEMENTS ExtendsNames */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassImplements?"]("IMPLEMENTS ExtendsNames", ...[yyvstack[yysp]]), { rule: "IMPLEMENTS ExtendsNames", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPLEMENTS", yylstack[yysp - 1]], ["ExtendsNames", yylstack[yysp]])
    break;

case 475:
    /*! Production::    ExtendsNames : ExtendsNames "," ExtendsName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExtendsNames"]("ExtendsNames , ExtendsName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "ExtendsNames , ExtendsName", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExtendsNames", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["ExtendsName", yylstack[yysp]])
    break;

case 476:
    /*! Production::    ExtendsNames : ExtendsNames OptComma NEWLINE ExtendsName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExtendsNames"]("ExtendsNames OptComma NEWLINE ExtendsName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "ExtendsNames OptComma NEWLINE ExtendsName", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExtendsNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["ExtendsName", yylstack[yysp]])
    break;

case 477:
    /*! Production::    ExtendsNames : ExtendsName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ExtendsNames"]("ExtendsName", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["ExtendsName", yylstack[yysp - 1]])
    break;

case 478:
    /*! Production::    ExtendsName : Identifier TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExtendsName"]("Identifier TypeArguments?", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Identifier TypeArguments?", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 1]], ["TypeArguments?", yylstack[yysp]])
    break;

case 479:
    /*! Production::    InterfaceBody : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("", ...[[]]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 480:
    /*! Production::    InterfaceBody : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 481:
    /*! Production::    InterfaceBody : InterfaceBody OptComma NEWLINE InterfaceBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("InterfaceBody OptComma NEWLINE InterfaceBody", ...[[...yyvstack[yysp - 3].unwrap, ...yyvstack[yysp].unwrap]]), { rule: "InterfaceBody OptComma NEWLINE InterfaceBody", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceBody", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InterfaceBody", yylstack[yysp]])
    break;

case 482:
    /*! Production::    InterfaceBody : "{" InterfaceProperties "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ InterfaceProperties }", ...[yyvstack[yysp - 1].contents]), { rule: "{ InterfaceProperties }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 483:
    /*! Production::    InterfaceBody : "{" INDENT InterfaceProperties OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ INDENT InterfaceProperties OUTDENT }", ...[yyvstack[yysp - 2].contents]), { rule: "{ INDENT InterfaceProperties OUTDENT }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["InterfaceProperties", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 484:
    /*! Production::    InterfaceBody : InterfaceProperties */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("InterfaceProperties", ...[yyvstack[yysp].contents]), { rule: "InterfaceProperties", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp]])
    break;

case 485:
    /*! Production::    InterfaceBody : INDENT InterfaceProperties OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("INDENT InterfaceProperties OUTDENT", ...[yyvstack[yysp - 1].contents]), { rule: "INDENT InterfaceProperties OUTDENT", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 486:
    /*! Production::    InterfaceProperties : InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["InterfaceProperties"]("InterfaceProperty", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["InterfaceProperty", yylstack[yysp - 1]])
    break;

case 487:
    /*! Production::    InterfaceProperties : InterfaceProperties "," InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties , InterfaceProperty", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "InterfaceProperties , InterfaceProperty", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["InterfaceProperty", yylstack[yysp]])
    break;

case 488:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma NEWLINE InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma NEWLINE InterfaceProperty", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "InterfaceProperties OptComma NEWLINE InterfaceProperty", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InterfaceProperty", yylstack[yysp]])
    break;

case 489:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT InterfaceProperties OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT InterfaceProperties OUTDENT", ...[...yyvstack[yysp - 4].contents, ...yyvstack[yysp - 1].contents]), { rule: "InterfaceProperties OptComma INDENT InterfaceProperties OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 490:
    /*! Production::    InterfaceProperties : InterfaceProperties "," "{" InterfaceProperties "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties , { InterfaceProperties }", ...[...yyvstack[yysp - 4].contents, ...yyvstack[yysp - 1].contents]), { rule: "InterfaceProperties , { InterfaceProperties }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 4]], [",", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 491:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma NEWLINE "{" InterfaceProperties "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma NEWLINE { InterfaceProperties }", ...[...yyvstack[yysp - 5].contents, ...yyvstack[yysp - 1].contents]), { rule: "InterfaceProperties OptComma NEWLINE { InterfaceProperties }", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 5]], ["OptComma", yylstack[yysp - 4]], ["NEWLINE", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 492:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT "{" InterfaceProperties "}" OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT { InterfaceProperties } OUTDENT", ...[...yyvstack[yysp - 6].contents, ...yyvstack[yysp - 2].contents]), { rule: "InterfaceProperties OptComma INDENT { InterfaceProperties } OUTDENT", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 6]], ["OptComma", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["{", yylstack[yysp - 3]], ["InterfaceProperties", yylstack[yysp - 2]], ["}", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 493:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT "{" INDENT InterfaceProperties OUTDENT "}" OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT { INDENT InterfaceProperties OUTDENT } OUTDENT", ...[...yyvstack[yysp - 8].contents, ...yyvstack[yysp - 3].contents]), { rule: "InterfaceProperties OptComma INDENT { INDENT InterfaceProperties OUTDENT } OUTDENT", loc: { first_line: yylstack[yysp - 8] && yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8] && yylstack[yysp - 8].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 8] && yylstack[yysp - 8].src, type: yylstack[yysp - 8] && yylstack[yysp - 8].type || yylstack[yysp - 8] && yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 8]], ["OptComma", yylstack[yysp - 7]], ["INDENT", yylstack[yysp - 6]], ["{", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["InterfaceProperties", yylstack[yysp - 3]], ["OUTDENT", yylstack[yysp - 2]], ["}", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 494:
    /*! Production::    InterfaceProperty : READONLY Identifier IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY Identifier IntTypeSentence?", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { readonly: true }]), { rule: "READONLY Identifier IntTypeSentence?", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp - 2]], ["Identifier", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 495:
    /*! Production::    InterfaceProperty : READONLY PROPERTY ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY PROPERTY : InlineType", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], { readonly: true }]), { rule: "READONLY PROPERTY : InlineType", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp - 3]], ["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 496:
    /*! Production::    InterfaceProperty : READONLY "[" Identifier "]" IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY [ Identifier ] IntTypeSentence?", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { readonly: true, indexed: true }]), { rule: "READONLY [ Identifier ] IntTypeSentence?", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp - 4]], ["[", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["]", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 497:
    /*! Production::    InterfaceProperty : READONLY "[" "{" PROPERTY ":" TypeSentence "}" "]" IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY [ { PROPERTY : TypeSentence } ] IntTypeSentence?", ...[new yy.Identifier(null, yyvstack[yysp - 5]).setLoc({ ...yylstack[yysp - 5], type: { nodes: yyvstack[yysp - 3], loc: yylstack[yysp - 3] } }), yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { readonly: true, indexed: true }]), { rule: "READONLY [ { PROPERTY : TypeSentence } ] IntTypeSentence?", loc: { first_line: yylstack[yysp - 8] && yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8] && yylstack[yysp - 8].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 8] && yylstack[yysp - 8].src, type: yylstack[yysp - 8] && yylstack[yysp - 8].type || yylstack[yysp - 8] && yylstack[yysp - 8].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp - 8]], ["[", yylstack[yysp - 7]], ["{", yylstack[yysp - 6]], ["PROPERTY", yylstack[yysp - 5]], [":", yylstack[yysp - 4]], ["TypeSentence", yylstack[yysp - 3]], ["}", yylstack[yysp - 2]], ["]", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 498:
    /*! Production::    InterfaceProperty : NEW TypeArguments? Params IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("NEW TypeArguments? Params IntTypeSentence?", ...[null, yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { news: true, params: yyvstack[yysp - 1], args: yyvstack[yysp - 2].unwrap }]), { rule: "NEW TypeArguments? Params IntTypeSentence?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["Params", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 499:
    /*! Production::    InterfaceProperty : IntTypeSpecifiers Identifier TypeArguments? Params IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("IntTypeSpecifiers Identifier TypeArguments? Params IntTypeSentence?", ...[yyvstack[yysp - 3], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { ...yyvstack[yysp - 4].unwrap, params: yyvstack[yysp - 1], args: yyvstack[yysp - 2] }]), { rule: "IntTypeSpecifiers Identifier TypeArguments? Params IntTypeSentence?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":2,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IntTypeSpecifiers", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["Params", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 500:
    /*! Production::    InterfaceProperty : Identifier TypeArguments? Params IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("Identifier TypeArguments? Params IntTypeSentence?", ...[yyvstack[yysp - 3], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { params: yyvstack[yysp - 1], args: yyvstack[yysp - 2] }]), { rule: "Identifier TypeArguments? Params IntTypeSentence?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["Params", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 501:
    /*! Production::    InterfaceProperty : Identifier IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("Identifier IntTypeSentence?", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, {}]), { rule: "Identifier IntTypeSentence?", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 502:
    /*! Production::    InterfaceProperty : PROPERTY ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("PROPERTY : InlineType", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), Object.assign(yyvstack[yysp], { optional: yylstack[yysp - 1].origin === "?:" })]), { rule: "PROPERTY : InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 503:
    /*! Production::    InterfaceProperty : "[" Identifier "]" IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("[ Identifier ] IntTypeSentence?", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { indexed: true }]), { rule: "[ Identifier ] IntTypeSentence?", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["]", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 504:
    /*! Production::    InterfaceProperty : "[" "{" PROPERTY ":" TypeSentence "}" "]" IntTypeSentence? */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("[ { PROPERTY : TypeSentence } ] IntTypeSentence?", ...[Object.assign(new yy.Identifier(null, yyvstack[yysp - 5]).setLoc({ ...yylstack[yysp - 5], type: { nodes: yyvstack[yysp - 3], loc: yylstack[yysp - 3] } }), { optional: yylstack[yysp - 4].origin === "?:" }), yyvstack[yysp].unwrap || yylstack[yysp - 1].type, { indexed: true }]), { rule: "[ { PROPERTY : TypeSentence } ] IntTypeSentence?", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 7]], ["{", yylstack[yysp - 6]], ["PROPERTY", yylstack[yysp - 5]], [":", yylstack[yysp - 4]], ["TypeSentence", yylstack[yysp - 3]], ["}", yylstack[yysp - 2]], ["]", yylstack[yysp - 1]], ["IntTypeSentence?", yylstack[yysp]])
    break;

case 505:
    /*! Production::    IntTypeSentence? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSentence?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 506:
    /*! Production::    IntTypeSentence? : ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSentence?"](": InlineType", ...[Object.assign(yyvstack[yysp], { optional: yylstack[yysp - 1].origin === "?:" })]), { rule: ": InlineType", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens([":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 507:
    /*! Production::    IntTypeSentence? : ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSentence?"](": INDENT TypeSentence OUTDENT", ...[Object.assign(yyvstack[yysp - 1], { optional: yylstack[yysp - 3].origin === "?:" })]), { rule: ": INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens([":", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 508:
    /*! Production::    IntTypeSentence? : ":" NEWLINE InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSentence?"](": NEWLINE InlineType", ...[Object.assign(yyvstack[yysp], { optional: yylstack[yysp - 2].origin === "?:" })]), { rule: ": NEWLINE InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens([":", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 509:
    /*! Production::    IntTypeSpecifiers : GET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSpecifiers"]("GET", ...[{ getter: true }]), { rule: "GET", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["GET", yylstack[yysp]])
    break;

case 510:
    /*! Production::    IntTypeSpecifiers : SET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IntTypeSpecifiers"]("SET", ...[{ setter: true }]), { rule: "SET", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["SET", yylstack[yysp]])
    break;

case 511:
    /*! Production::    Type : TYPE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE TypeDeclaration", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 1]], ["TypeDeclaration", yylstack[yysp]])
    break;

case 512:
    /*! Production::    Type : TYPE INDENT TypeDeclaration OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE INDENT TypeDeclaration OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "TYPE INDENT TypeDeclaration OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeDeclaration", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 513:
    /*! Production::    Type : TYPE NEWLINE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE NEWLINE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE NEWLINE TypeDeclaration", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeDeclaration", yylstack[yysp]])
    break;

case 514:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS InlineType */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS InlineType", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? AS InlineType", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 515:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 1], yyvstack[yysp - 4].unwrap]), { rule: "Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 5]], ["TypeArguments?", yylstack[yysp - 4]], ["AS", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 516:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS NEWLINE TypeSentence", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 3].unwrap]), { rule: "Identifier TypeArguments? AS NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 4]], ["TypeArguments?", yylstack[yysp - 3]], ["AS", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 517:
    /*! Production::    TypeSentence : TypeValue */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeSentence"]("TypeValue", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeValue", yylstack[yysp - 1]])
    break;

case 518:
    /*! Production::    TypeSentence : TYPE_JOIN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeSentence"]("TYPE_JOIN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TYPE_JOIN", yylstack[yysp - 1]])
    break;

case 519:
    /*! Production::    TypeSentence : TypeSentence TypeValue */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence TypeValue", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "TypeSentence TypeValue", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 520:
    /*! Production::    TypeSentence : TypeSentence TYPE_JOIN */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence TYPE_JOIN", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "TypeSentence TYPE_JOIN", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 1]], ["TYPE_JOIN", yylstack[yysp]])
    break;

case 521:
    /*! Production::    TypeSentence : TypeSentence INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 3].contents, 1, ...yyvstack[yysp - 1].contents, -1]), { rule: "TypeSentence INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 522:
    /*! Production::    TypeSentence : TypeSentence NEWLINE TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence NEWLINE TypeValue", ...[...yyvstack[yysp - 2].contents, 0, yyvstack[yysp]]), { rule: "TypeSentence NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 523:
    /*! Production::    TypeSentence : TypeSentence NEWLINE TYPE_JOIN */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence NEWLINE TYPE_JOIN", ...[...yyvstack[yysp - 2].contents, 0, yyvstack[yysp]]), { rule: "TypeSentence NEWLINE TYPE_JOIN", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TYPE_JOIN", yylstack[yysp]])
    break;

case 524:
    /*! Production::    TypeValue : TypeArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeArray", yylstack[yysp - 1]])
    break;

case 525:
    /*! Production::    TypeValue : TypeObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeObject", yylstack[yysp - 1]])
    break;

case 526:
    /*! Production::    TypeValue : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Literal", yylstack[yysp - 1]])
    break;

case 527:
    /*! Production::    TypeValue : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 528:
    /*! Production::    TypeValue : VOID */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("VOID", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["VOID", yylstack[yysp - 1]])
    break;

case 529:
    /*! Production::    TypeValue : TAG */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TAG", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TAG", yylstack[yysp - 1]])
    break;

case 530:
    /*! Production::    TypeValue : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeWithArguments", yylstack[yysp - 1]])
    break;

case 531:
    /*! Production::    TypeValue : TypeAccess */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeAccess", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeAccess", yylstack[yysp - 1]])
    break;

case 532:
    /*! Production::    TypeValue : TypeFunction */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeFunction", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeFunction", yylstack[yysp - 1]])
    break;

case 533:
    /*! Production::    TypeValue : TypeofKeyof */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeofKeyof", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeofKeyof", yylstack[yysp - 1]])
    break;

case 534:
    /*! Production::    TypeValue : TypeWrapped */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeWrapped", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeWrapped", yylstack[yysp - 1]])
    break;

case 535:
    /*! Production::    TypeofKeyof : KEYOF TypeValue */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeofKeyof"]("KEYOF TypeValue", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "KEYOF TypeValue", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["KEYOF", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 536:
    /*! Production::    TypeofKeyof : TYPEOF TypeValue */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeofKeyof"]("TYPEOF TypeValue", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "TYPEOF TypeValue", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPEOF", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 537:
    /*! Production::    TypeWrapped : "(" TypeSentence ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWrapped"]("( TypeSentence )", ...[yyvstack[yysp - 1]]), { rule: "( TypeSentence )", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 538:
    /*! Production::    TypeWrapped : "(" INDENT TypeSentence OUTDENT ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWrapped"]("( INDENT TypeSentence OUTDENT )", ...[yyvstack[yysp - 2]]), { rule: "( INDENT TypeSentence OUTDENT )", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeSentence", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 539:
    /*! Production::    TypeAccess : TypeValue INDEX_START TypeSentence INDEX_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeAccess"]("TypeValue INDEX_START TypeSentence INDEX_END", ...[yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeValue INDEX_START TypeSentence INDEX_END", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 3]], ["INDEX_START", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 540:
    /*! Production::    TypeAccess : TypeValue INDEX_START INDENT TypeSentence OUTDENT INDEX_END */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeAccess"]("TypeValue INDEX_START INDENT TypeSentence OUTDENT INDEX_END", ...[yyvstack[yysp - 5], yyvstack[yysp - 3]]), { rule: "TypeValue INDEX_START INDENT TypeSentence OUTDENT INDEX_END", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 5]], ["INDEX_START", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeSentence", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 541:
    /*! Production::    TypeAccess : TypeValue "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeAccess"]("TypeValue . PROPERTY", ...[yyvstack[yysp - 2], new yy.String('STRING', "'" + yyvstack[yysp] + "'").setLoc(yylstack[yysp])]), { rule: "TypeValue . PROPERTY", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 542:
    /*! Production::    TypeAccess : TypeValue IN TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeAccess"]("TypeValue IN TypeValue", ...[yyvstack[yysp], new yy.TypeSentence('TypeValue', yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2])]), { rule: "TypeValue IN TypeValue", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 2]], ["IN", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 543:
    /*! Production::    TypeFunction : Params FUNC_DIRECTIVE InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeFunction"]("Params FUNC_DIRECTIVE InlineType", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Params FUNC_DIRECTIVE InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Params", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 544:
    /*! Production::    TypeFunction : FUNC_DIRECTIVE InlineType */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeFunction"]("FUNC_DIRECTIVE InlineType", ...[new yy.Params(null, []), yyvstack[yysp]]), { rule: "FUNC_DIRECTIVE InlineType", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 545:
    /*! Production::    TypeFunction : NEW Params FUNC_DIRECTIVE InlineType */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeFunction"]("NEW Params FUNC_DIRECTIVE InlineType", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "NEW Params FUNC_DIRECTIVE InlineType", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp - 3]], ["Params", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 546:
    /*! Production::    TypeFunction : NEW FUNC_DIRECTIVE InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeFunction"]("NEW FUNC_DIRECTIVE InlineType", ...[new yy.Params(null, []), yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "NEW FUNC_DIRECTIVE InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 547:
    /*! Production::    TypeWithArguments : TypeValue INDEX_START INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("TypeValue INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 2] }]), { rule: "TypeValue INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 2]], ["INDEX_START", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 548:
    /*! Production::    TypeWithArguments : Identifier "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( TypeArguments )>", ...[{ type: yyvstack[yysp - 3], arguments: yyvstack[yysp - 1] }]), { rule: "Identifier <( TypeArguments )>", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 549:
    /*! Production::    TypeWithArguments : Identifier "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( INDENT TypeArguments OUTDENT )>", ...[{ type: yyvstack[yysp - 5], arguments: yyvstack[yysp - 2] }]), { rule: "Identifier <( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 5]], ["<(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 550:
    /*! Production::    TypeArguments : TypeArgument */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArguments"]("TypeArgument", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeArgument", yylstack[yysp - 1]])
    break;

case 551:
    /*! Production::    TypeArguments : TypeArguments "," TypeArgument */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments , TypeArgument", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArguments , TypeArgument", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["TypeArgument", yylstack[yysp]])
    break;

case 552:
    /*! Production::    TypeArguments : TypeArguments OptComma NEWLINE TypeArgument */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma NEWLINE TypeArgument", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArguments OptComma NEWLINE TypeArgument", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeArgument", yylstack[yysp]])
    break;

case 553:
    /*! Production::    TypeArguments : TypeArguments OptComma INDENT TypeArgument OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma INDENT TypeArgument OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArguments OptComma INDENT TypeArgument OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeArgument", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 554:
    /*! Production::    TypeArgument : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp]])
    break;

case 555:
    /*! Production::    TypeArgument : Identifier EXTENDS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier EXTENDS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier EXTENDS Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["EXTENDS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 556:
    /*! Production::    TypeArgument : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArgument"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeWithArguments", yylstack[yysp - 1]])
    break;

case 557:
    /*! Production::    InlineType : TypeValue */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["InlineType"]("TypeValue", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeValue", yylstack[yysp - 1]])
    break;

case 558:
    /*! Production::    InlineType : TYPE_JOIN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["InlineType"]("TYPE_JOIN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TYPE_JOIN", yylstack[yysp - 1]])
    break;

case 559:
    /*! Production::    InlineType : InlineType TypeValue */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InlineType"]("InlineType TypeValue", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "InlineType TypeValue", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InlineType", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 560:
    /*! Production::    InlineType : InlineType TYPE_JOIN */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InlineType"]("InlineType TYPE_JOIN", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "InlineType TYPE_JOIN", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InlineType", yylstack[yysp - 1]], ["TYPE_JOIN", yylstack[yysp]])
    break;

case 561:
    /*! Production::    InlineType : InlineType INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InlineType"]("InlineType INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 3].contents, 1, ...yyvstack[yysp - 1].contents, -1]), { rule: "InlineType INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InlineType", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 562:
    /*! Production::    TypeObject : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ }", ...[/* */]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 563:
    /*! Production::    TypeObject : "{" TypeObjProps "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ TypeObjProps }", ...[...yyvstack[yysp - 1].contents]), { rule: "{ TypeObjProps }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["TypeObjProps", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 564:
    /*! Production::    TypeObject : "{" INDENT TypeObjProps OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ INDENT TypeObjProps OUTDENT }", ...[...yyvstack[yysp - 2].contents]), { rule: "{ INDENT TypeObjProps OUTDENT }", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeObjProps", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 565:
    /*! Production::    TypeObjProps : TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeObjProps"]("TypeObjProp", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["TypeObjProp", yylstack[yysp - 1]])
    break;

case 566:
    /*! Production::    TypeObjProps : TypeObjProps "," TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps , TypeObjProp", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeObjProps , TypeObjProp", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["TypeObjProp", yylstack[yysp]])
    break;

case 567:
    /*! Production::    TypeObjProps : TypeObjProps OptComma NEWLINE TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma NEWLINE TypeObjProp", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated && 1 || 0, yyvstack[yysp]]), { rule: "TypeObjProps OptComma NEWLINE TypeObjProp", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeObjProp", yylstack[yysp]])
    break;

case 568:
    /*! Production::    TypeObjProps : TypeObjProps OptComma INDENT TypeObjProps OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma INDENT TypeObjProps OUTDENT", ...[...yyvstack[yysp - 4].contents, 2, ...yyvstack[yysp - 1].contents]), { rule: "TypeObjProps OptComma INDENT TypeObjProps OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeObjProps", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 569:
    /*! Production::    TypeObjProp : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp]])
    break;

case 570:
    /*! Production::    TypeObjProp : PROPERTY ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : InlineType", ...[yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1].origin === '?:']), { rule: "PROPERTY : InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 571:
    /*! Production::    TypeObjProp : PROPERTY ":" NEWLINE InlineType */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : NEWLINE InlineType", ...[yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2].origin === '?:']), { rule: "PROPERTY : NEWLINE InlineType", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 572:
    /*! Production::    TypeObjProp : PROPERTY ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yylstack[yysp - 3].origin === '?:']), { rule: "PROPERTY : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 4]], [":", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 573:
    /*! Production::    TypeObjProp : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY :", ...[yyvstack[yysp - 1], , yylstack[yysp].origin === '?:']), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 574:
    /*! Production::    TypeObjProp : "[" PROPERTY ":" TypeSentence "]" ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ PROPERTY : TypeSentence ] : InlineType", ...[yyvstack[yysp - 5], yyvstack[yysp], , { isDynamicKey: true, keyType: yyvstack[yysp - 3] }]), { rule: "[ PROPERTY : TypeSentence ] : InlineType", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 6]], ["PROPERTY", yylstack[yysp - 5]], [":", yylstack[yysp - 4]], ["TypeSentence", yylstack[yysp - 3]], ["]", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 575:
    /*! Production::    TypeObjProp : "[" PROPERTY ":" TypeSentence "]" ":" NEWLINE InlineType */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ PROPERTY : TypeSentence ] : NEWLINE InlineType", ...[yyvstack[yysp - 6], yyvstack[yysp], , { isDynamicKey: true, keyType: yyvstack[yysp - 4] }]), { rule: "[ PROPERTY : TypeSentence ] : NEWLINE InlineType", loc: { first_line: yylstack[yysp - 7] && yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7] && yylstack[yysp - 7].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 7] && yylstack[yysp - 7].src, type: yylstack[yysp - 7] && yylstack[yysp - 7].type || yylstack[yysp - 7] && yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 7]], ["PROPERTY", yylstack[yysp - 6]], [":", yylstack[yysp - 5]], ["TypeSentence", yylstack[yysp - 4]], ["]", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 576:
    /*! Production::    TypeObjProp : "[" PROPERTY ":" TypeSentence "]" ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ PROPERTY : TypeSentence ] : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 7], yyvstack[yysp - 1], , { isDynamicKey: true, keyType: yyvstack[yysp - 5] }]), { rule: "[ PROPERTY : TypeSentence ] : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 8] && yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8] && yylstack[yysp - 8].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 8] && yylstack[yysp - 8].src, type: yylstack[yysp - 8] && yylstack[yysp - 8].type || yylstack[yysp - 8] && yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 8]], ["PROPERTY", yylstack[yysp - 7]], [":", yylstack[yysp - 6]], ["TypeSentence", yylstack[yysp - 5]], ["]", yylstack[yysp - 4]], [":", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 577:
    /*! Production::    TypeObjProp : "[" Identifier "]" ":" InlineType */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ Identifier ] : InlineType", ...[yyvstack[yysp - 3], yyvstack[yysp], , { isDynamicKey: true, keyType: yylstack[yysp - 3].type }]), { rule: "[ Identifier ] : InlineType", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["]", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 578:
    /*! Production::    TypeObjProp : "[" Identifier "]" ":" NEWLINE InlineType */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ Identifier ] : NEWLINE InlineType", ...[yyvstack[yysp - 4], yyvstack[yysp], , { isDynamicKey: true, keyType: yylstack[yysp - 4].type }]), { rule: "[ Identifier ] : NEWLINE InlineType", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["]", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 579:
    /*! Production::    TypeObjProp : "[" Identifier "]" ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("[ Identifier ] : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 1], , { isDynamicKey: true, keyType: yylstack[yysp - 5].type }]), { rule: "[ Identifier ] : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 6] && yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6] && yylstack[yysp - 6].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 6] && yylstack[yysp - 6].src, type: yylstack[yysp - 6] && yylstack[yysp - 6].type || yylstack[yysp - 6] && yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], ["]", yylstack[yysp - 4]], [":", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 580:
    /*! Production::    TypeArray : "[" TypeArrayItems "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ TypeArrayItems ]", ...[...yyvstack[yysp - 1].contents]), { rule: "[ TypeArrayItems ]", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 2]], ["TypeArrayItems", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 581:
    /*! Production::    TypeArray : "[" INDENT TypeArrayItems OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ INDENT TypeArrayItems OUTDENT ]", ...[...yyvstack[yysp - 2].contents]), { rule: "[ INDENT TypeArrayItems OUTDENT ]", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["[", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArrayItems", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 582:
    /*! Production::    TypeArrayItems : InlineType */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArrayItems"]("InlineType", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["InlineType", yylstack[yysp - 1]])
    break;

case 583:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma NEWLINE InlineType */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma NEWLINE InlineType", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated && 1 || 0, yyvstack[yysp]]), { rule: "TypeArrayItems OptComma NEWLINE InlineType", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 584:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 4].contents, 2, yyvstack[yysp - 1]]), { rule: "TypeArrayItems OptComma INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 585:
    /*! Production::    TypeArrayItems : TypeArrayItems "," InlineType */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems , InlineType", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArrayItems , InlineType", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["InlineType", yylstack[yysp]])
    break;

case 586:
    /*! Production::    Declare : DeclarationKeyword Declarations */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword Declarations", ...[{ keyword: yyvstack[yysp - 1], statements: yyvstack[yysp] }, [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "DeclarationKeyword Declarations", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 1]], ["Declarations", yylstack[yysp]])
    break;

case 587:
    /*! Production::    Declare : DeclarationKeyword INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword INDENT Declarations OUTDENT", ...[{ keyword: yyvstack[yysp - 3], statements: yyvstack[yysp - 1], indented: true }, [yylstack[yysp - 3], yylstack[yysp - 1]]]), { rule: "DeclarationKeyword INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declarations", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 588:
    /*! Production::    DeclarationKeyword : VAR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("VAR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["VAR", yylstack[yysp - 1]])
    break;

case 589:
    /*! Production::    DeclarationKeyword : LET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("LET", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["LET", yylstack[yysp - 1]])
    break;

case 590:
    /*! Production::    DeclarationKeyword : CONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("CONST", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["CONST", yylstack[yysp - 1]])
    break;

case 591:
    /*! Production::    Declarations : Declaration */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declaration", ...[yyvstack[yysp].unwrap]), { rule: "Declaration", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["Declaration", yylstack[yysp]])
    break;

case 592:
    /*! Production::    Declarations : Declarations "," Declaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations , Declaration", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].unwrap]), { rule: "Declarations , Declaration", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Declaration", yylstack[yysp]])
    break;

case 593:
    /*! Production::    Declarations : Declarations OptComma NEWLINE Declaration */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma NEWLINE Declaration", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp].unwrap]), { rule: "Declarations OptComma NEWLINE Declaration", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Declaration", yylstack[yysp]])
    break;

case 594:
    /*! Production::    Declarations : Declarations OptComma INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma INDENT Declarations OUTDENT", ...[...yyvstack[yysp - 4].contents, false, ...yyvstack[yysp - 1].contents]), { rule: "Declarations OptComma INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declarations", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 595:
    /*! Production::    Declaration : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Declaration"]("Assignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Assignable", yylstack[yysp - 1]])
    break;

case 596:
    /*! Production::    Declaration : Assignable AssignKeyword Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declaration"]("Assignable AssignKeyword Expression", ...[new yy.Assignment('Assignable AssignKeyword Expression', yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]).setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "Assignable AssignKeyword Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 597:
    /*! Production::    Declaration : Assignable AssignKeyword INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declaration"]("Assignable AssignKeyword INDENT Expression OUTDENT", ...[new yy.Assignment('Assignable AssignKeyword INDENT Expression OUTDENT', yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3]).setLoc(yylstack[yysp - 4], yylstack[yysp])]), { rule: "Assignable AssignKeyword INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 4]], ["AssignKeyword", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 598:
    /*! Production::    Declaration : Assignable AssignKeyword Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declaration"]("Assignable AssignKeyword Block", ...[new yy.Assignment('Assignable AssignKeyword Block', yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), yyvstack[yysp - 1]).setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "Assignable AssignKeyword Block", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 599:
    /*! Production::    Return : RETURN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN", ...[undefined]), { rule: "RETURN", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp]])
    break;

case 600:
    /*! Production::    Return : RETURN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN Expression", ...[yyvstack[yysp]]), { rule: "RETURN Expression", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 601:
    /*! Production::    Return : RETURN INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 602:
    /*! Production::    Return : RETURN INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 603:
    /*! Production::    Import : IMPORT ImportList FROM STRING */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT ImportList FROM STRING", ...[{ _imports: yyvstack[yysp - 2], _from: yyvstack[yysp] }]), { rule: "IMPORT ImportList FROM STRING", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 3]], ["ImportList", yylstack[yysp - 2]], ["FROM", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 604:
    /*! Production::    Import : IMPORT Identifier FROM STRING */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT Identifier FROM STRING", ...[{ _default: yyvstack[yysp - 2], _from: yyvstack[yysp] }]), { rule: "IMPORT Identifier FROM STRING", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["FROM", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 605:
    /*! Production::    Import : IMPORT Identifier OptSeparator ImportList FROM STRING */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT Identifier OptSeparator ImportList FROM STRING", ...[{ _default: yyvstack[yysp - 4], _imports: yyvstack[yysp - 2], _from: yyvstack[yysp] }]), { rule: "IMPORT Identifier OptSeparator ImportList FROM STRING", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["OptSeparator", yylstack[yysp - 3]], ["ImportList", yylstack[yysp - 2]], ["FROM", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 606:
    /*! Production::    OptSeparator : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["OptSeparator"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1] && yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1] && yylstack[yysp - 1].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src } }, {"first":0,"last":0,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens()
    break;

case 607:
    /*! Production::    OptSeparator : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["OptSeparator"](",", ...[undefined]), { rule: ",", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens([",", yylstack[yysp]])
    break;

case 608:
    /*! Production::    OptSeparator : OptComma NEWLINE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["OptSeparator"]("OptComma NEWLINE", ...[1]), { rule: "OptComma NEWLINE", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["OptComma", yylstack[yysp - 1]], ["NEWLINE", yylstack[yysp]])
    break;

case 609:
    /*! Production::    Export : EXPORT ExportList */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT ExportList", ...[{ list: yyvstack[yysp] }]), { rule: "EXPORT ExportList", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["ExportList", yylstack[yysp]])
    break;

case 610:
    /*! Production::    Export : EXPORT INDENT ExportList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT ExportList OUTDENT", ...[{ list: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT ExportList OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["ExportList", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 611:
    /*! Production::    Export : EXPORT DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT DEFAULT Expression", ...[{ defaults: yyvstack[yysp] }]), { rule: "EXPORT DEFAULT Expression", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 2]], ["DEFAULT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 612:
    /*! Production::    Export : EXPORT INDENT DEFAULT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT DEFAULT Expression OUTDENT", ...[{ defaults: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT DEFAULT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["DEFAULT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 613:
    /*! Production::    Export : EXPORT Declare */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Declare", ...[{ declarations: yyvstack[yysp] }]), { rule: "EXPORT Declare", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["Declare", yylstack[yysp]])
    break;

case 614:
    /*! Production::    Export : EXPORT INDENT Declare OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Declare OUTDENT", ...[{ declarations: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT Declare OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declare", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 615:
    /*! Production::    Export : EXPORT Exportable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Exportable", ...[{ exportable: yyvstack[yysp].unwrap }]), { rule: "EXPORT Exportable", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["Exportable", yylstack[yysp]])
    break;

case 616:
    /*! Production::    Export : EXPORT INDENT Exportable OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Exportable OUTDENT", ...[{ exportable: yyvstack[yysp - 1].unwrap }]), { rule: "EXPORT INDENT Exportable OUTDENT", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Exportable", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 617:
    /*! Production::    ImportList : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportList"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 618:
    /*! Production::    ImportList : "*" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("* AS Identifier", ...[yyvstack[yysp]]), { rule: "* AS Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"_isAll":true}, { generated: undefined }).setTokens(["*", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 619:
    /*! Production::    ImportList : "{" ImportNames OptComma "}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{ ImportNames OptComma }", ...[yyvstack[yysp - 2]]), { rule: "{ ImportNames OptComma }", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 3]], ["ImportNames", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 620:
    /*! Production::    ImportList : "{{" INDENT ImportNames OptComma OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{{ INDENT ImportNames OptComma OUTDENT }}", ...[yyvstack[yysp - 3]]), { rule: "{{ INDENT ImportNames OptComma OUTDENT }}", loc: { first_line: yylstack[yysp - 5] && yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5] && yylstack[yysp - 5].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 5] && yylstack[yysp - 5].src, type: yylstack[yysp - 5] && yylstack[yysp - 5].type || yylstack[yysp - 5] && yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ImportNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 621:
    /*! Production::    ExportList : "{" ExportNames "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{ ExportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ExportNames }", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ExportNames", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 622:
    /*! Production::    ExportList : "{{" INDENT ExportNames OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{{ INDENT ExportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ExportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4] && yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4] && yylstack[yysp - 4].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 4] && yylstack[yysp - 4].src, type: yylstack[yysp - 4] && yylstack[yysp - 4].type || yylstack[yysp - 4] && yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ExportNames", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 623:
    /*! Production::    ExportNames : ExportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportName", ...[yyvstack[yysp].contents]), { rule: "ExportName", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["ExportName", yylstack[yysp]])
    break;

case 624:
    /*! Production::    ExportNames : ExportNames "," ExportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames , ExportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ExportNames , ExportName", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExportNames", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["ExportName", yylstack[yysp]])
    break;

case 625:
    /*! Production::    ExportNames : ExportNames OptComma NEWLINE ExportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames OptComma NEWLINE ExportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ExportNames OptComma NEWLINE ExportName", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExportNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["ExportName", yylstack[yysp]])
    break;

case 626:
    /*! Production::    ExportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1])]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 627:
    /*! Production::    ExportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 628:
    /*! Production::    ExportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 629:
    /*! Production::    ExportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ExportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 630:
    /*! Production::    ExportName : Identifier AS DEFAULT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS DEFAULT", ...[yyvstack[yysp - 2],,true]), { rule: "Identifier AS DEFAULT", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["DEFAULT", yylstack[yysp]])
    break;

case 631:
    /*! Production::    ExportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2],yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 632:
    /*! Production::    Exportable : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Class", yylstack[yysp - 1]])
    break;

case 633:
    /*! Production::    Exportable : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Function", yylstack[yysp - 1]])
    break;

case 634:
    /*! Production::    ImportNames : ImportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportName", ...[yyvstack[yysp].contents]), { rule: "ImportName", loc: { first_line: yylstack[yysp] && yylstack[yysp].first_line, first_column: yylstack[yysp] && yylstack[yysp].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp] && yylstack[yysp].src, type: yylstack[yysp] && yylstack[yysp].type || yylstack[yysp] && yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false,"origin":1}, { generated: undefined }).setTokens(["ImportName", yylstack[yysp]])
    break;

case 635:
    /*! Production::    ImportNames : ImportNames "," ImportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames , ImportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ImportNames , ImportName", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ImportNames", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["ImportName", yylstack[yysp]])
    break;

case 636:
    /*! Production::    ImportNames : ImportNames OptComma NEWLINE ImportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames OptComma NEWLINE ImportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ImportNames OptComma NEWLINE ImportName", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ImportNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["ImportName", yylstack[yysp]])
    break;

case 637:
    /*! Production::    ImportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1]), , [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1] && yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1] && yylstack[yysp - 1].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 1] && yylstack[yysp - 1].src, type: yylstack[yysp - 1] && yylstack[yysp - 1].type || yylstack[yysp - 1] && yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 638:
    /*! Production::    ImportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 639:
    /*! Production::    ImportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3] && yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3] && yylstack[yysp - 3].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 3] && yylstack[yysp - 3].src, type: yylstack[yysp - 3] && yylstack[yysp - 3].type || yylstack[yysp - 3] && yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 640:
    /*! Production::    ImportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 641:
    /*! Production::    ImportName : DEFAULT AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("DEFAULT AS Identifier", ...[(new yy.Identifier(null, 'default')).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "DEFAULT AS Identifier", loc: { first_line: yylstack[yysp - 2] && yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2] && yylstack[yysp - 2].first_column, last_line: yylstack[yysp] && yylstack[yysp].last_line, last_column: yylstack[yysp] && yylstack[yysp].last_column, src: yylstack[yysp - 2] && yylstack[yysp - 2].src, type: yylstack[yysp - 2] && yylstack[yysp - 2].type || yylstack[yysp - 2] && yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 642:
    /*! Production::    ImportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type, origin: yylstack[yysp] && yylstack[yysp].origin }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

}
},
table: bt({
  len: u([
  115,
  1,
  2,
  0,
  7,
  57,
  0,
  92,
  92,
  s,
  [0, 3],
  112,
  111,
  s,
  [0, 9],
  94,
  s,
  [0, 4],
  190,
  6,
  18,
  114,
  5,
  2,
  111,
  6,
  114,
  113,
  91,
  97,
  111,
  5,
  12,
  145,
  2,
  91,
  s,
  [0, 8],
  7,
  92,
  s,
  [111, 5],
  s,
  [112, 3],
  s,
  [0, 9],
  114,
  114,
  c,
  [5, 4],
  s,
  [0, 7],
  6,
  148,
  111,
  0,
  c,
  [77, 9],
  125,
  0,
  127,
  118,
  s,
  [0, 9],
  7,
  0,
  7,
  117,
  c,
  [58, 4],
  113,
  111,
  c,
  [34, 5],
  s,
  [111, 4],
  0,
  114,
  c,
  [120, 10],
  s,
  [0, 4],
  64,
  0,
  64,
  s,
  [0, 15],
  125,
  0,
  0,
  97,
  111,
  2,
  97,
  0,
  5,
  39,
  0,
  0,
  1,
  111,
  116,
  97,
  113,
  1,
  9,
  1,
  6,
  1,
  0,
  17,
  c,
  [56, 3],
  5,
  1,
  s,
  [0, 3],
  91,
  113,
  0,
  91,
  52,
  0,
  s,
  [3, 3],
  99,
  57,
  114,
  111,
  5,
  2,
  2,
  60,
  114,
  3,
  4,
  61,
  55,
  54,
  119,
  1,
  91,
  114,
  95,
  92,
  40,
  3,
  97,
  12,
  0,
  2,
  114,
  113,
  c,
  [42, 5],
  10,
  10,
  12,
  2,
  11,
  11,
  14,
  0,
  5,
  5,
  115,
  s,
  [0, 3],
  8,
  c,
  [131, 4],
  c,
  [9, 4],
  97,
  94,
  s,
  [97, 4],
  111,
  97,
  111,
  97,
  111,
  0,
  53,
  129,
  97,
  0,
  54,
  2,
  113,
  2,
  39,
  0,
  1,
  1,
  144,
  0,
  0,
  40,
  145,
  3,
  97,
  114,
  57,
  90,
  90,
  c,
  [26, 3],
  c,
  [110, 3],
  125,
  0,
  58,
  0,
  1,
  56,
  118,
  112,
  61,
  50,
  59,
  12,
  120,
  119,
  0,
  118,
  119,
  c,
  [212, 5],
  116,
  0,
  111,
  58,
  111,
  70,
  7,
  c,
  [78, 3],
  8,
  0,
  s,
  [97, 3],
  114,
  2,
  58,
  90,
  113,
  s,
  [97, 9],
  0,
  97,
  0,
  0,
  90,
  53,
  6,
  40,
  5,
  0,
  10,
  8,
  3,
  s,
  [0, 9],
  41,
  8,
  1,
  39,
  3,
  37,
  37,
  40,
  12,
  0,
  53,
  0,
  5,
  114,
  0,
  58,
  111,
  54,
  2,
  1,
  1,
  6,
  5,
  1,
  2,
  4,
  0,
  1,
  5,
  c,
  [221, 3],
  111,
  1,
  1,
  97,
  c,
  [11, 4],
  5,
  114,
  2,
  5,
  115,
  1,
  0,
  1,
  99,
  114,
  0,
  54,
  97,
  s,
  [111, 6],
  62,
  63,
  111,
  119,
  c,
  [438, 4],
  51,
  114,
  53,
  6,
  0,
  s,
  [124, 4],
  119,
  c,
  [376, 3],
  97,
  91,
  92,
  91,
  111,
  4,
  5,
  39,
  2,
  0,
  c,
  [218, 3],
  114,
  0,
  2,
  2,
  1,
  13,
  2,
  c,
  [344, 4],
  c,
  [358, 4],
  1,
  1,
  5,
  c,
  [312, 3],
  9,
  3,
  0,
  6,
  0,
  0,
  9,
  111,
  0,
  97,
  c,
  [368, 5],
  7,
  53,
  0,
  97,
  90,
  4,
  s,
  [53, 3],
  0,
  0,
  c,
  [52, 3],
  0,
  1,
  193,
  0,
  5,
  145,
  0,
  144,
  54,
  113,
  114,
  0,
  124,
  12,
  97,
  3,
  127,
  5,
  119,
  114,
  57,
  1,
  61,
  0,
  120,
  s,
  [0, 4],
  97,
  90,
  0,
  114,
  1,
  119,
  c,
  [552, 5],
  57,
  c,
  [45, 3],
  c,
  [178, 3],
  60,
  s,
  [111, 3],
  113,
  1,
  54,
  c,
  [275, 5],
  6,
  40,
  2,
  2,
  40,
  41,
  1,
  37,
  5,
  40,
  43,
  109,
  0,
  109,
  c,
  [17, 4],
  c,
  [109, 3],
  3,
  39,
  125,
  1,
  39,
  109,
  109,
  41,
  39,
  c,
  [17, 4],
  0,
  3,
  117,
  5,
  c,
  [58, 3],
  s,
  [0, 3],
  c,
  [387, 4],
  2,
  8,
  7,
  2,
  c,
  [230, 3],
  c,
  [120, 3],
  c,
  [445, 3],
  7,
  3,
  4,
  0,
  112,
  113,
  c,
  [147, 3],
  c,
  [274, 3],
  102,
  4,
  0,
  97,
  156,
  97,
  53,
  53,
  57,
  57,
  60,
  111,
  55,
  2,
  c,
  [349, 3],
  114,
  c,
  [423, 3],
  c,
  [247, 3],
  0,
  125,
  s,
  [7, 4],
  2,
  c,
  [328, 3],
  114,
  91,
  111,
  0,
  4,
  2,
  124,
  123,
  95,
  91,
  0,
  98,
  93,
  5,
  c,
  [442, 3],
  114,
  97,
  c,
  [265, 3],
  c,
  [239, 3],
  10,
  11,
  0,
  97,
  59,
  59,
  62,
  1,
  12,
  0,
  8,
  2,
  17,
  0,
  c,
  [316, 3],
  14,
  1,
  c,
  [182, 3],
  54,
  97,
  8,
  s,
  [0, 5],
  c,
  [36, 4],
  0,
  144,
  0,
  144,
  0,
  156,
  54,
  4,
  97,
  90,
  129,
  0,
  90,
  111,
  0,
  124,
  125,
  c,
  [22, 3],
  57,
  c,
  [58, 3],
  c,
  [4, 3],
  c,
  [149, 4],
  c,
  [227, 3],
  0,
  113,
  116,
  c,
  [361, 3],
  0,
  111,
  97,
  97,
  60,
  0,
  113,
  c,
  [159, 5],
  0,
  38,
  38,
  c,
  [627, 4],
  41,
  39,
  c,
  [215, 3],
  2,
  41,
  5,
  109,
  0,
  39,
  0,
  7,
  2,
  5,
  44,
  1,
  1,
  125,
  39,
  125,
  c,
  [19, 3],
  39,
  38,
  41,
  c,
  [53, 3],
  114,
  0,
  3,
  1,
  c,
  [227, 3],
  c,
  [280, 4],
  c,
  [3, 3],
  4,
  c,
  [5, 4],
  c,
  [16, 3],
  54,
  125,
  39,
  39,
  91,
  17,
  13,
  91,
  0,
  4,
  3,
  2,
  93,
  1,
  c,
  [503, 3],
  98,
  c,
  [445, 3],
  c,
  [111, 3],
  c,
  [379, 5],
  60,
  c,
  [37, 3],
  54,
  0,
  0,
  124,
  c,
  [5, 3],
  c,
  [60, 3],
  97,
  0,
  4,
  95,
  c,
  [13, 4],
  c,
  [390, 3],
  55,
  0,
  2,
  91,
  4,
  c,
  [493, 3],
  c,
  [216, 3],
  c,
  [23, 3],
  c,
  [27, 4],
  5,
  c,
  [674, 4],
  6,
  6,
  0,
  111,
  c,
  [380, 3],
  c,
  [702, 3],
  12,
  s,
  [0, 5],
  c,
  [173, 4],
  c,
  [202, 3],
  c,
  [29, 3],
  54,
  54,
  114,
  7,
  0,
  1,
  60,
  111,
  c,
  [52, 4],
  5,
  c,
  [169, 3],
  39,
  43,
  1,
  41,
  c,
  [385, 3],
  1,
  43,
  s,
  [39, 3],
  1,
  125,
  41,
  109,
  c,
  [23, 4],
  c,
  [223, 4],
  c,
  [4, 4],
  c,
  [354, 3],
  125,
  1,
  0,
  4,
  5,
  11,
  0,
  5,
  11,
  13,
  2,
  91,
  1,
  3,
  2,
  3,
  2,
  c,
  [51, 3],
  1,
  1,
  57,
  57,
  c,
  [105, 3],
  97,
  57,
  c,
  [69, 3],
  0,
  91,
  c,
  [299, 3],
  c,
  [877, 3],
  4,
  0,
  c,
  [178, 3],
  97,
  0,
  3,
  62,
  0,
  1,
  c,
  [439, 5],
  0,
  0,
  57,
  114,
  c,
  [68, 3],
  111,
  c,
  [714, 3],
  1,
  1,
  43,
  c,
  [246, 3],
  c,
  [109, 3],
  43,
  s,
  [41, 3],
  0,
  c,
  [40, 4],
  0,
  102,
  c,
  [15, 4],
  5,
  0,
  11,
  11,
  12,
  0,
  c,
  [78, 3],
  91,
  2,
  91,
  c,
  [252, 3],
  125,
  91,
  c,
  [197, 3],
  c,
  [1044, 4],
  c,
  [64, 3],
  c,
  [711, 3],
  s,
  [0, 5],
  54,
  c,
  [778, 4],
  c,
  [141, 4],
  c,
  [158, 3],
  c,
  [106, 3],
  c,
  [50, 3],
  5,
  12,
  c,
  [40, 4],
  91,
  c,
  [153, 3],
  c,
  [347, 3],
  c,
  [132, 3],
  c,
  [482, 3],
  c,
  [168, 5],
  c,
  [99, 4],
  c,
  [83, 3],
  11,
  c,
  [22, 3],
  0,
  41,
  97,
  0,
  c,
  [48, 4],
  c,
  [779, 3],
  41,
  c,
  [123, 4],
  c,
  [97, 3],
  0,
  c,
  [3, 3],
  0,
  0
]),
  symbol: u([
  1,
  s,
  [3, 5, 1],
  15,
  21,
  24,
  s,
  [27, 4, 1],
  33,
  34,
  s,
  [41, 4, 1],
  65,
  69,
  70,
  71,
  74,
  75,
  76,
  81,
  87,
  90,
  93,
  100,
  s,
  [103, 5, 1],
  110,
  111,
  113,
  117,
  s,
  [121, 9, 1],
  131,
  135,
  136,
  138,
  142,
  s,
  [148, 4, 1],
  154,
  s,
  [158, 8, 1],
  167,
  169,
  170,
  172,
  178,
  182,
  183,
  184,
  189,
  191,
  197,
  199,
  202,
  203,
  204,
  206,
  207,
  209,
  210,
  211,
  s,
  [215, 4, 1],
  220,
  s,
  [225, 5, 1],
  232,
  233,
  238,
  239,
  242,
  251,
  252,
  254,
  258,
  262,
  269,
  270,
  280,
  297,
  298,
  301,
  302,
  304,
  1,
  1,
  26,
  1,
  16,
  22,
  26,
  32,
  98,
  99,
  1,
  4,
  5,
  s,
  [8, 7, 1],
  16,
  19,
  c,
  [17, 3],
  s,
  [35, 5, 1],
  41,
  42,
  s,
  [45, 20, 1],
  86,
  98,
  99,
  c,
  [138, 4],
  146,
  s,
  [173, 5, 1],
  179,
  204,
  c,
  [57, 10],
  s,
  [15, 6, 1],
  22,
  23,
  25,
  26,
  31,
  c,
  [64, 6],
  40,
  c,
  [65, 22],
  66,
  67,
  72,
  73,
  78,
  s,
  [82, 5, 1],
  89,
  91,
  s,
  [95, 5, 1],
  101,
  102,
  s,
  [104, 6, 1],
  112,
  114,
  115,
  116,
  119,
  120,
  128,
  131,
  134,
  s,
  [142, 6, 1],
  152,
  258,
  c,
  [92, 92],
  c,
  [365, 12],
  31,
  c,
  [366, 52],
  c,
  [363, 47],
  c,
  [477, 64],
  c,
  [474, 48],
  c,
  [315, 83],
  c,
  [314, 6],
  212,
  227,
  229,
  260,
  c,
  [683, 6],
  s,
  [8, 60, 1],
  s,
  [69, 8, 1],
  78,
  s,
  [81, 7, 1],
  89,
  90,
  91,
  93,
  s,
  [95, 23, 1],
  s,
  [119, 11, 1],
  131,
  134,
  c,
  [278, 4],
  s,
  [143, 10, 1],
  c,
  [284, 54],
  8,
  15,
  67,
  142,
  258,
  305,
  15,
  31,
  67,
  74,
  76,
  88,
  138,
  c,
  [66, 3],
  184,
  c,
  [33, 3],
  297,
  298,
  306,
  309,
  c,
  [531, 109],
  s,
  [299, 4, 1],
  304,
  26,
  31,
  142,
  258,
  281,
  142,
  c,
  [652, 13],
  c,
  [540, 99],
  26,
  c,
  [81, 4],
  204,
  c,
  [117, 71],
  s,
  [187, 5, 1],
  c,
  [771, 50],
  c,
  [352, 8],
  c,
  [521, 4],
  c,
  [773, 179],
  200,
  c,
  [91, 52],
  c,
  [754, 3],
  77,
  78,
  80,
  c,
  [1182, 36],
  186,
  247,
  c,
  [532, 112],
  c,
  [782, 3],
  71,
  181,
  15,
  24,
  72,
  116,
  121,
  142,
  249,
  250,
  256,
  257,
  259,
  261,
  c,
  [995, 75],
  s,
  [80, 8, 1],
  c,
  [996, 61],
  182,
  142,
  c,
  [1551, 85],
  c,
  [368, 6],
  253,
  128,
  131,
  133,
  227,
  229,
  230,
  231,
  c,
  [98, 90],
  205,
  208,
  c,
  [465, 111],
  c,
  [111, 456],
  c,
  [2204, 112],
  c,
  [112, 232],
  c,
  [1657, 50],
  s,
  [181, 4, 1],
  c,
  [114, 174],
  c,
  [113, 45],
  c,
  [3133, 49],
  23,
  78,
  112,
  114,
  119,
  212,
  c,
  [1576, 144],
  239,
  240,
  243,
  247,
  c,
  [1054, 227],
  11,
  12,
  c,
  [113, 13],
  c,
  [341, 9],
  c,
  [122, 48],
  171,
  172,
  175,
  178,
  180,
  c,
  [236, 49],
  16,
  c,
  [616, 20],
  c,
  [448, 3],
  c,
  [118, 12],
  116,
  117,
  118,
  c,
  [120, 13],
  s,
  [139, 4, 1],
  c,
  [245, 35],
  221,
  223,
  c,
  [122, 7],
  s,
  [236, 5, 1],
  242,
  246,
  247,
  c,
  [127, 19],
  17,
  21,
  24,
  25,
  c,
  [744, 31],
  116,
  c,
  [367, 65],
  264,
  266,
  268,
  c,
  [118, 8],
  133,
  135,
  136,
  s,
  [232, 4, 1],
  c,
  [2085, 8],
  c,
  [260, 8],
  22,
  24,
  c,
  [741, 5],
  c,
  [740, 3],
  c,
  [500, 50],
  c,
  [877, 48],
  c,
  [1999, 405],
  c,
  [3321, 60],
  c,
  [224, 55],
  198,
  c,
  [2557, 493],
  c,
  [2890, 341],
  c,
  [2440, 106],
  c,
  [336, 163],
  c,
  [64, 69],
  c,
  [2189, 120],
  c,
  [4015, 90],
  c,
  [5853, 7],
  c,
  [461, 111],
  c,
  [6023, 12],
  c,
  [210, 87],
  78,
  114,
  128,
  131,
  247,
  c,
  [210, 3],
  29,
  33,
  69,
  71,
  117,
  c,
  [183, 7],
  c,
  [182, 3],
  142,
  156,
  157,
  c,
  [148, 3],
  c,
  [147, 3],
  248,
  258,
  s,
  [283, 8, 1],
  292,
  295,
  118,
  c,
  [3831, 150],
  c,
  [3079, 3],
  c,
  [114, 44],
  s,
  [213, 6, 1],
  c,
  [579, 185],
  c,
  [3479, 49],
  145,
  8,
  15,
  17,
  26,
  67,
  142,
  145,
  219,
  303,
  143,
  88,
  118,
  142,
  258,
  310,
  311,
  31,
  15,
  c,
  [5865, 28],
  c,
  [472, 99],
  c,
  [134, 3],
  307,
  308,
  31,
  c,
  [362, 90],
  219,
  c,
  [208, 108],
  c,
  [6072, 5],
  c,
  [5258, 91],
  c,
  [90, 9],
  19,
  c,
  [7044, 42],
  c,
  [6213, 5],
  281,
  78,
  143,
  247,
  c,
  [152, 18],
  c,
  [3977, 3],
  c,
  [153, 34],
  77,
  c,
  [154, 25],
  s,
  [117, 4, 1],
  c,
  [156, 3],
  s,
  [140, 8, 1],
  152,
  153,
  247,
  c,
  [98, 10],
  19,
  31,
  c,
  [162, 27],
  67,
  73,
  c,
  [164, 14],
  181,
  c,
  [777, 13],
  c,
  [4257, 102],
  c,
  [743, 111],
  c,
  [6486, 5],
  18,
  82,
  84,
  85,
  c,
  [291, 9],
  c,
  [387, 3],
  23,
  c,
  [292, 27],
  78,
  c,
  [44, 3],
  c,
  [294, 7],
  c,
  [4426, 3],
  128,
  131,
  c,
  [355, 4],
  c,
  [6788, 114],
  17,
  18,
  82,
  18,
  82,
  98,
  99,
  c,
  [181, 60],
  c,
  [693, 10],
  c,
  [61, 3],
  c,
  [60, 27],
  82,
  c,
  [696, 15],
  c,
  [748, 10],
  c,
  [587, 29],
  c,
  [54, 15],
  c,
  [471, 26],
  82,
  87,
  88,
  90,
  92,
  93,
  94,
  c,
  [294, 44],
  s,
  [192, 4, 1],
  c,
  [479, 38],
  c,
  [1217, 91],
  201,
  c,
  [2727, 114],
  c,
  [6848, 87],
  c,
  [6847, 8],
  c,
  [300, 54],
  c,
  [1160, 26],
  c,
  [93, 11],
  272,
  c,
  [2238, 4],
  31,
  c,
  [2239, 35],
  71,
  80,
  248,
  c,
  [2014, 97],
  c,
  [6962, 12],
  31,
  68,
  c,
  [455, 12],
  c,
  [4630, 53],
  c,
  [1251, 113],
  c,
  [113, 49],
  17,
  26,
  31,
  72,
  219,
  69,
  16,
  17,
  c,
  [328, 4],
  72,
  143,
  147,
  255,
  c,
  [10, 12],
  20,
  c,
  [11, 5],
  116,
  c,
  [12, 3],
  121,
  142,
  c,
  [14, 3],
  c,
  [364, 5],
  c,
  [26, 3],
  16,
  c,
  [52, 3],
  116,
  118,
  121,
  142,
  222,
  224,
  259,
  15,
  17,
  24,
  25,
  c,
  [304, 3],
  c,
  [302, 4],
  263,
  265,
  268,
  c,
  [170, 4],
  182,
  c,
  [7289, 3],
  73,
  181,
  c,
  [199, 8],
  c,
  [5685, 6],
  c,
  [769, 101],
  31,
  128,
  130,
  c,
  [5071, 4],
  231,
  c,
  [3729, 135],
  c,
  [5889, 4],
  c,
  [1003, 139],
  c,
  [773, 45],
  c,
  [8812, 95],
  c,
  [191, 186],
  c,
  [97, 201],
  c,
  [9405, 201],
  c,
  [208, 326],
  c,
  [2488, 10],
  26,
  c,
  [3237, 42],
  c,
  [6714, 73],
  c,
  [1716, 26],
  c,
  [6716, 30],
  c,
  [390, 97],
  c,
  [279, 10],
  22,
  c,
  [280, 43],
  22,
  26,
  c,
  [1989, 113],
  114,
  212,
  c,
  [4610, 40],
  118,
  c,
  [10218, 143],
  245,
  c,
  [2557, 40],
  c,
  [7831, 144],
  247,
  c,
  [2702, 100],
  c,
  [3939, 114],
  c,
  [4110, 57],
  c,
  [268, 90],
  c,
  [90, 180],
  c,
  [1479, 118],
  c,
  [2969, 4],
  c,
  [4924, 26],
  c,
  [8143, 100],
  c,
  [11893, 10],
  17,
  19,
  23,
  c,
  [332, 8],
  c,
  [4216, 23],
  c,
  [4213, 9],
  116,
  c,
  [4214, 3],
  146,
  20,
  c,
  [11952, 11],
  20,
  23,
  c,
  [1391, 28],
  c,
  [57, 15],
  c,
  [8258, 118],
  c,
  [474, 39],
  c,
  [355, 14],
  c,
  [1954, 68],
  c,
  [345, 48],
  c,
  [656, 4],
  c,
  [61, 12],
  c,
  [60, 30],
  c,
  [982, 8],
  c,
  [397, 11],
  c,
  [396, 44],
  c,
  [3039, 4],
  71,
  74,
  78,
  80,
  c,
  [589, 5],
  237,
  240,
  c,
  [9144, 7],
  16,
  c,
  [413, 3],
  c,
  [1447, 9],
  c,
  [3361, 86],
  241,
  c,
  [3477, 19],
  c,
  [987, 10],
  19,
  21,
  23,
  c,
  [129, 10],
  c,
  [206, 7],
  c,
  [1575, 23],
  c,
  [154, 8],
  c,
  [813, 3],
  86,
  c,
  [157, 3],
  c,
  [1564, 3],
  c,
  [159, 7],
  c,
  [1560, 3],
  c,
  [1559, 3],
  c,
  [163, 14],
  c,
  [348, 4],
  c,
  [167, 11],
  c,
  [239, 6],
  c,
  [119, 97],
  c,
  [348, 4],
  c,
  [119, 12],
  c,
  [118, 118],
  182,
  c,
  [4136, 4],
  219,
  267,
  268,
  c,
  [895, 9],
  c,
  [778, 30],
  c,
  [893, 116],
  c,
  [892, 81],
  17,
  19,
  c,
  [1568, 9],
  c,
  [831, 29],
  116,
  c,
  [5338, 34],
  c,
  [4236, 91],
  c,
  [1291, 4],
  c,
  [9416, 32],
  c,
  [399, 27],
  268,
  c,
  [9501, 3],
  137,
  232,
  233,
  235,
  c,
  [188, 111],
  31,
  128,
  131,
  132,
  c,
  [4543, 4],
  c,
  [4029, 303],
  c,
  [6227, 102],
  c,
  [6403, 12],
  c,
  [6221, 30],
  c,
  [6220, 18],
  c,
  [271, 90],
  c,
  [9606, 113],
  c,
  [4794, 388],
  c,
  [97, 672],
  c,
  [4660, 10],
  c,
  [15220, 43],
  c,
  [9156, 3],
  c,
  [2875, 3],
  c,
  [4363, 40],
  c,
  [3558, 3],
  79,
  219,
  17,
  c,
  [3078, 4],
  77,
  78,
  79,
  119,
  146,
  c,
  [10, 5],
  c,
  [8, 3],
  23,
  119,
  146,
  c,
  [66, 20],
  155,
  c,
  [67, 16],
  291,
  292,
  295,
  296,
  16,
  24,
  31,
  c,
  [8645, 3],
  293,
  294,
  69,
  c,
  [4664, 19],
  c,
  [49, 20],
  69,
  71,
  248,
  c,
  [4706, 35],
  292,
  295,
  c,
  [37, 41],
  c,
  [166, 27],
  s,
  [282, 7, 1],
  c,
  [40, 3],
  c,
  [7052, 11],
  c,
  [8518, 44],
  120,
  c,
  [343, 8],
  c,
  [297, 3],
  115,
  c,
  [8780, 39],
  c,
  [9347, 76],
  c,
  [1836, 11],
  c,
  [2607, 37],
  115,
  c,
  [2608, 120],
  c,
  [5623, 11],
  c,
  [685, 43],
  26,
  32,
  128,
  128,
  c,
  [15218, 6],
  8,
  15,
  c,
  [9368, 3],
  26,
  142,
  258,
  c,
  [4216, 3],
  219,
  20,
  c,
  [5, 3],
  32,
  143,
  c,
  [9378, 7],
  32,
  c,
  [201, 111],
  32,
  32,
  c,
  [1074, 97],
  c,
  [228, 10],
  c,
  [9470, 5],
  c,
  [7393, 21],
  c,
  [227, 89],
  c,
  [15451, 6],
  c,
  [719, 3],
  32,
  c,
  [719, 9],
  c,
  [7514, 107],
  32,
  143,
  c,
  [9351, 98],
  271,
  c,
  [8498, 114],
  c,
  [6110, 54],
  c,
  [5172, 208],
  c,
  [111, 555],
  c,
  [9810, 13],
  26,
  c,
  [6175, 28],
  c,
  [9812, 20],
  c,
  [62, 62],
  253,
  c,
  [347, 137],
  c,
  [9876, 94],
  26,
  32,
  15,
  26,
  c,
  [9025, 3],
  91,
  181,
  c,
  [6537, 42],
  89,
  c,
  [1185, 7],
  c,
  [9077, 9],
  c,
  [1347, 116],
  c,
  [1345, 28],
  c,
  [161, 8],
  c,
  [2112, 9],
  98,
  99,
  c,
  [17187, 7],
  c,
  [12392, 76],
  c,
  [14705, 124],
  c,
  [124, 296],
  c,
  [849, 114],
  c,
  [10633, 166],
  c,
  [3772, 135],
  181,
  c,
  [10726, 92],
  c,
  [183, 90],
  185,
  c,
  [1564, 111],
  142,
  258,
  273,
  274,
  c,
  [3972, 5],
  c,
  [8565, 39],
  71,
  248,
  c,
  [10597, 5],
  c,
  [10282, 115],
  c,
  [10944, 114],
  26,
  32,
  16,
  26,
  69,
  15,
  24,
  c,
  [474, 3],
  c,
  [4027, 3],
  c,
  [4026, 5],
  26,
  31,
  c,
  [14260, 289],
  c,
  [111, 158],
  23,
  118,
  c,
  [8280, 5],
  c,
  [3837, 3],
  20,
  c,
  [471, 3],
  c,
  [11277, 3],
  c,
  [11259, 3],
  c,
  [7165, 3],
  c,
  [7164, 3],
  15,
  24,
  c,
  [11260, 7],
  c,
  [10111, 220],
  c,
  [11768, 166],
  c,
  [111, 47],
  c,
  [16634, 7],
  c,
  [4950, 44],
  134,
  c,
  [3842, 105],
  c,
  [97, 90],
  c,
  [11932, 3],
  c,
  [2905, 10],
  c,
  [5537, 44],
  c,
  [53, 106],
  26,
  32,
  c,
  [1627, 5],
  120,
  c,
  [20370, 147],
  c,
  [8579, 32],
  244,
  c,
  [12377, 16],
  79,
  219,
  c,
  [10166, 144],
  248,
  c,
  [343, 143],
  248,
  c,
  [4741, 54],
  c,
  [10849, 113],
  c,
  [1987, 119],
  c,
  [3244, 119],
  11,
  12,
  c,
  [106, 9],
  175,
  c,
  [5721, 98],
  c,
  [2337, 8],
  c,
  [11594, 3],
  c,
  [5710, 19],
  c,
  [10166, 70],
  c,
  [10165, 29],
  c,
  [5720, 11],
  c,
  [9643, 22],
  c,
  [6445, 47],
  c,
  [19288, 158],
  c,
  [9166, 14],
  c,
  [9165, 43],
  c,
  [10402, 11],
  c,
  [10116, 43],
  c,
  [10007, 8],
  c,
  [9995, 120],
  c,
  [1966, 187],
  c,
  [540, 114],
  25,
  c,
  [9538, 15],
  c,
  [422, 9],
  c,
  [9938, 85],
  c,
  [9937, 10],
  c,
  [6620, 7],
  267,
  268,
  c,
  [9835, 49],
  c,
  [2156, 17],
  c,
  [57, 48],
  17,
  c,
  [116, 10],
  c,
  [2565, 44],
  c,
  [9232, 12],
  c,
  [5581, 30],
  c,
  [15635, 30],
  c,
  [21083, 396],
  c,
  [9477, 38],
  c,
  [1287, 10],
  19,
  20,
  c,
  [616, 43],
  c,
  [279, 111],
  c,
  [2686, 5],
  c,
  [8535, 9],
  26,
  c,
  [8536, 33],
  c,
  [4519, 3],
  c,
  [22972, 4],
  c,
  [8579, 40],
  c,
  [40, 9],
  120,
  c,
  [8388, 31],
  118,
  c,
  [8466, 37],
  c,
  [11084, 5],
  c,
  [8587, 39],
  296,
  c,
  [1183, 6],
  29,
  c,
  [1180, 3],
  c,
  [45, 31],
  c,
  [13109, 3],
  c,
  [1436, 15],
  c,
  [2795, 6],
  c,
  [59, 4],
  c,
  [1440, 30],
  69,
  c,
  [2787, 3],
  c,
  [7612, 26],
  119,
  c,
  [245, 9],
  c,
  [2773, 3],
  c,
  [7617, 7],
  c,
  [125, 3],
  c,
  [109, 109],
  c,
  [4243, 5],
  24,
  c,
  [8900, 5],
  20,
  c,
  [6, 3],
  c,
  [316, 39],
  c,
  [163, 109],
  c,
  [397, 16],
  c,
  [9068, 40],
  c,
  [437, 218],
  15,
  c,
  [20834, 4],
  c,
  [9377, 34],
  c,
  [9287, 21],
  c,
  [861, 20],
  c,
  [189, 109],
  c,
  [5572, 5],
  c,
  [9297, 3],
  c,
  [8577, 14],
  c,
  [2081, 27],
  c,
  [18647, 47],
  c,
  [9299, 29],
  c,
  [2079, 5],
  c,
  [9304, 49],
  c,
  [1404, 8],
  145,
  16,
  26,
  16,
  26,
  32,
  c,
  [9115, 4],
  311,
  c,
  [8898, 4],
  142,
  143,
  258,
  142,
  258,
  142,
  258,
  c,
  [10, 3],
  c,
  [83, 10],
  c,
  [4259, 45],
  c,
  [73, 3],
  308,
  26,
  c,
  [74, 7],
  88,
  c,
  [73, 6],
  c,
  [1503, 108],
  c,
  [8974, 4],
  c,
  [18466, 203],
  c,
  [5236, 121],
  c,
  [1817, 21],
  c,
  [1170, 36],
  c,
  [9215, 39],
  c,
  [9214, 42],
  258,
  275,
  276,
  277,
  279,
  c,
  [6487, 4],
  c,
  [358, 102],
  c,
  [8026, 9],
  c,
  [13099, 3],
  c,
  [2360, 7],
  c,
  [13097, 39],
  c,
  [13096, 18],
  c,
  [13332, 16],
  c,
  [13092, 12],
  c,
  [5847, 144],
  c,
  [96, 9],
  c,
  [18389, 29],
  c,
  [5318, 25],
  c,
  [52, 27],
  83,
  c,
  [53, 24],
  c,
  [14919, 48],
  c,
  [57, 66],
  c,
  [12448, 30],
  86,
  c,
  [295, 5],
  c,
  [3215, 13],
  196,
  c,
  [8796, 112],
  c,
  [18781, 55],
  26,
  c,
  [10582, 27],
  c,
  [8004, 105],
  c,
  [119, 65],
  c,
  [8122, 155],
  82,
  c,
  [203, 3],
  195,
  c,
  [5, 5],
  c,
  [9034, 124],
  c,
  [11147, 44],
  c,
  [21421, 125],
  c,
  [9385, 3],
  40,
  c,
  [9386, 3],
  c,
  [7, 21],
  26,
  c,
  [11153, 98],
  c,
  [8666, 204],
  c,
  [8386, 112],
  c,
  [6920, 3],
  185,
  c,
  [19166, 28],
  c,
  [5749, 15],
  c,
  [120, 14],
  c,
  [5747, 15],
  166,
  168,
  c,
  [125, 31],
  c,
  [24056, 27],
  c,
  [16038, 34],
  c,
  [123, 83],
  c,
  [18654, 94],
  c,
  [8936, 91],
  219,
  c,
  [2440, 97],
  c,
  [19943, 53],
  c,
  [20038, 41],
  c,
  [11968, 13],
  c,
  [8966, 119],
  c,
  [9732, 199],
  68,
  c,
  [2061, 14],
  c,
  [214, 102],
  c,
  [8687, 5],
  c,
  [9172, 5],
  c,
  [10, 5],
  c,
  [27223, 7],
  c,
  [2741, 105],
  c,
  [6518, 3],
  c,
  [5851, 31],
  72,
  c,
  [2694, 24],
  c,
  [59, 62],
  c,
  [20231, 5],
  c,
  [60, 35],
  143,
  146,
  147,
  c,
  [62, 7],
  c,
  [9010, 3],
  c,
  [20284, 10],
  c,
  [20269, 6],
  224,
  259,
  26,
  31,
  c,
  [290, 3],
  c,
  [9498, 7],
  c,
  [23, 3],
  c,
  [9016, 115],
  20,
  25,
  c,
  [20400, 4],
  26,
  c,
  [9141, 7],
  265,
  268,
  26,
  c,
  [14184, 197],
  c,
  [29405, 128],
  c,
  [241, 13],
  31,
  32,
  c,
  [9051, 5],
  231,
  22,
  114,
  c,
  [26441, 145],
  c,
  [8443, 144],
  c,
  [3979, 156],
  c,
  [17664, 11],
  c,
  [8599, 43],
  16,
  26,
  c,
  [24049, 99],
  c,
  [7536, 96],
  c,
  [19921, 213],
  c,
  [7172, 136],
  c,
  [8654, 99],
  c,
  [18944, 125],
  c,
  [8909, 3],
  c,
  [18541, 50],
  c,
  [5377, 121],
  c,
  [171, 171],
  20,
  c,
  [8648, 195],
  c,
  [19361, 5],
  c,
  [303, 53],
  c,
  [18184, 56],
  c,
  [18580, 113],
  c,
  [116, 99],
  c,
  [115, 10],
  c,
  [15718, 112],
  c,
  [16887, 194],
  c,
  [5669, 72],
  c,
  [8553, 101],
  c,
  [7068, 53],
  c,
  [8303, 35],
  c,
  [8383, 7],
  c,
  [38, 34],
  c,
  [13028, 44],
  c,
  [6732, 10],
  c,
  [8466, 23],
  c,
  [7643, 156],
  c,
  [3482, 3],
  c,
  [6923, 40],
  c,
  [4292, 5],
  c,
  [7989, 111],
  c,
  [305, 37],
  c,
  [3673, 3],
  c,
  [7575, 3],
  294,
  c,
  [9802, 7],
  c,
  [10345, 6],
  c,
  [8740, 35],
  c,
  [211, 3],
  20,
  25,
  c,
  [8471, 125],
  c,
  [8635, 164],
  c,
  [497, 148],
  c,
  [312, 36],
  c,
  [920, 8],
  c,
  [9259, 35],
  c,
  [17703, 84],
  c,
  [8403, 29],
  c,
  [17816, 114],
  c,
  [793, 3],
  128,
  c,
  [8453, 5],
  142,
  258,
  26,
  32,
  c,
  [8388, 4],
  142,
  258,
  68,
  c,
  [8537, 14],
  c,
  [4172, 61],
  c,
  [822, 139],
  c,
  [549, 39],
  c,
  [1390, 25],
  c,
  [5812, 75],
  c,
  [4722, 3],
  c,
  [75, 3],
  117,
  118,
  c,
  [3166, 3],
  c,
  [8167, 6],
  c,
  [18555, 3],
  c,
  [14, 7],
  c,
  [13, 3],
  c,
  [121, 91],
  c,
  [9757, 4],
  71,
  78,
  247,
  c,
  [32358, 54],
  c,
  [419, 28],
  c,
  [101, 11],
  247,
  278,
  20,
  15,
  c,
  [97, 20],
  c,
  [6039, 79],
  c,
  [6137, 19],
  c,
  [17525, 313],
  c,
  [31791, 228],
  c,
  [19003, 109],
  c,
  [2890, 50],
  26,
  32,
  c,
  [7918, 135],
  c,
  [19243, 99],
  66,
  68,
  c,
  [26803, 98],
  c,
  [7629, 3],
  c,
  [7380, 95],
  c,
  [7722, 124],
  c,
  [15954, 4],
  c,
  [17458, 3],
  c,
  [5522, 12],
  c,
  [386, 43],
  16,
  c,
  [6372, 91],
  185,
  c,
  [19707, 3],
  274,
  26,
  79,
  c,
  [16995, 301],
  c,
  [7360, 8],
  c,
  [98, 97],
  c,
  [7789, 17],
  c,
  [1301, 99],
  c,
  [7144, 6],
  c,
  [6, 6],
  c,
  [24571, 115],
  32,
  121,
  142,
  c,
  [5330, 57],
  15,
  c,
  [27592, 9],
  c,
  [2481, 3],
  c,
  [7201, 9],
  c,
  [7200, 196],
  c,
  [6594, 146],
  c,
  [3188, 59],
  c,
  [1849, 59],
  c,
  [1186, 109],
  c,
  [14031, 7],
  25,
  c,
  [10646, 171],
  32,
  c,
  [16249, 4],
  c,
  [4410, 3],
  c,
  [3889, 40],
  c,
  [4280, 39],
  c,
  [3497, 40],
  c,
  [13269, 42],
  25,
  c,
  [163, 41],
  c,
  [3331, 4],
  294,
  c,
  [13093, 6],
  16,
  c,
  [4626, 41],
  c,
  [218, 81],
  c,
  [39, 38],
  c,
  [6369, 17],
  c,
  [3919, 112],
  c,
  [13650, 147],
  22,
  c,
  [658, 5],
  115,
  68,
  c,
  [158, 150],
  c,
  [125, 16],
  26,
  c,
  [12808, 4],
  c,
  [178, 5],
  24,
  c,
  [4065, 10],
  c,
  [13736, 6],
  c,
  [16, 10],
  c,
  [18459, 4],
  c,
  [14, 7],
  277,
  279,
  26,
  c,
  [30083, 91],
  c,
  [3994, 5],
  71,
  248,
  c,
  [4098, 3],
  c,
  [22715, 5],
  c,
  [5598, 38],
  c,
  [762, 39],
  25,
  118,
  c,
  [12000, 114],
  c,
  [6525, 203],
  c,
  [31337, 60],
  c,
  [1545, 99],
  c,
  [2716, 91],
  185,
  c,
  [10168, 9],
  c,
  [16877, 8],
  c,
  [3406, 58],
  c,
  [3405, 53],
  c,
  [3628, 4],
  c,
  [3253, 3],
  c,
  [492, 97],
  c,
  [78, 3],
  c,
  [10050, 62],
  c,
  [63, 13],
  c,
  [16138, 54],
  c,
  [8149, 162],
  c,
  [7617, 209],
  79,
  120,
  c,
  [2248, 43],
  c,
  [1750, 41],
  c,
  [6866, 46],
  c,
  [89, 43],
  c,
  [8340, 4],
  c,
  [14992, 40],
  c,
  [1601, 38],
  c,
  [170, 3],
  c,
  [14125, 102],
  c,
  [276, 5],
  c,
  [1901, 16],
  15,
  c,
  [12, 8],
  c,
  [11, 11],
  c,
  [23, 4],
  c,
  [1750, 40],
  c,
  [1934, 91],
  71,
  c,
  [28973, 91],
  278,
  c,
  [6538, 194],
  c,
  [7399, 150],
  c,
  [2446, 76],
  c,
  [37811, 248],
  c,
  [13879, 103],
  c,
  [2388, 48],
  c,
  [2057, 4],
  68,
  c,
  [11588, 151],
  20,
  c,
  [3756, 121],
  c,
  [7311, 91],
  16,
  c,
  [3338, 16],
  c,
  [1469, 6],
  c,
  [7436, 27],
  c,
  [1019, 201],
  c,
  [92, 91],
  c,
  [3866, 166],
  c,
  [638, 129],
  c,
  [28411, 221],
  c,
  [13557, 95],
  c,
  [4156, 41],
  c,
  [2721, 83],
  c,
  [1076, 5],
  c,
  [4419, 17],
  c,
  [2161, 39],
  c,
  [3683, 4],
  c,
  [2781, 36],
  c,
  [7329, 98],
  c,
  [1487, 120],
  c,
  [5586, 7],
  c,
  [265, 40],
  25,
  c,
  [451, 85],
  c,
  [10078, 17],
  c,
  [1279, 75],
  c,
  [15718, 91],
  278
]),
  type: u([
  s,
  [2, 65],
  s,
  [0, 50],
  1,
  c,
  [110, 66],
  s,
  [2, 91],
  c,
  [92, 158],
  s,
  [0, 47],
  c,
  [111, 175],
  c,
  [137, 30],
  s,
  [2, 143],
  c,
  [284, 51],
  c,
  [196, 12],
  c,
  [308, 73],
  s,
  [0, 49],
  c,
  [137, 6],
  c,
  [540, 117],
  c,
  [117, 112],
  c,
  [566, 69],
  c,
  [773, 138],
  c,
  [721, 97],
  c,
  [788, 116],
  c,
  [58, 12],
  s,
  [2, 144],
  c,
  [807, 67],
  c,
  [463, 30],
  c,
  [1334, 96],
  c,
  [1648, 286],
  c,
  [111, 333],
  c,
  [112, 337],
  c,
  [1773, 49],
  c,
  [114, 179],
  c,
  [1999, 54],
  c,
  [1576, 146],
  c,
  [1054, 290],
  c,
  [2500, 126],
  c,
  [123, 57],
  c,
  [127, 72],
  c,
  [118, 53],
  c,
  [7, 14],
  c,
  [991, 178],
  c,
  [111, 380],
  c,
  [1436, 114],
  c,
  [2668, 619],
  c,
  [1836, 224],
  c,
  [891, 223],
  c,
  [5062, 186],
  c,
  [5349, 97],
  c,
  [461, 206],
  c,
  [4584, 18],
  c,
  [172, 33],
  c,
  [5039, 179],
  c,
  [579, 257],
  c,
  [113, 10],
  c,
  [5864, 8],
  c,
  [5865, 83],
  c,
  [146, 49],
  c,
  [6696, 159],
  c,
  [566, 140],
  c,
  [612, 53],
  c,
  [3, 6],
  c,
  [3981, 100],
  c,
  [99, 50],
  c,
  [4257, 127],
  c,
  [5955, 117],
  c,
  [1862, 172],
  c,
  [533, 116],
  c,
  [123, 54],
  c,
  [4100, 125],
  c,
  [7913, 159],
  c,
  [206, 139],
  c,
  [6381, 68],
  c,
  [301, 50],
  c,
  [1655, 21],
  c,
  [2014, 103],
  c,
  [2239, 186],
  c,
  [113, 53],
  c,
  [2130, 12],
  c,
  [407, 21],
  c,
  [2657, 25],
  c,
  [2700, 23],
  c,
  [315, 116],
  c,
  [7528, 123],
  c,
  [1003, 201],
  c,
  [8812, 191],
  c,
  [288, 198],
  c,
  [3848, 301],
  c,
  [208, 372],
  c,
  [6714, 134],
  c,
  [390, 146],
  c,
  [5283, 121],
  c,
  [9035, 24],
  c,
  [5214, 163],
  c,
  [2557, 43],
  c,
  [185, 145],
  c,
  [1544, 163],
  c,
  [852, 98],
  c,
  [5816, 211],
  c,
  [1479, 189],
  c,
  [393, 72],
  c,
  [1427, 144],
  c,
  [6314, 208],
  c,
  [345, 213],
  c,
  [170, 13],
  c,
  [182, 74],
  c,
  [647, 167],
  c,
  [1284, 237],
  c,
  [6285, 18],
  c,
  [893, 170],
  c,
  [111, 98],
  c,
  [3223, 187],
  c,
  [473, 72],
  c,
  [4543, 119],
  c,
  [4126, 292],
  c,
  [2007, 232],
  c,
  [4985, 271],
  c,
  [97, 869],
  c,
  [143, 56],
  c,
  [149, 25],
  c,
  [3559, 67],
  c,
  [1902, 49],
  c,
  [7035, 41],
  c,
  [1314, 37],
  c,
  [1351, 39],
  c,
  [1391, 23],
  c,
  [5282, 63],
  c,
  [1838, 166],
  c,
  [2608, 165],
  c,
  [9360, 21],
  c,
  [14189, 8],
  c,
  [14572, 77],
  c,
  [10088, 150],
  c,
  [250, 11],
  c,
  [8161, 121],
  c,
  [7280, 206],
  c,
  [8498, 172],
  c,
  [6859, 279],
  c,
  [12156, 557],
  c,
  [10771, 170],
  c,
  [9876, 128],
  c,
  [129, 51],
  c,
  [1347, 161],
  c,
  [14951, 88],
  c,
  [4303, 124],
  c,
  [124, 365],
  c,
  [6801, 117],
  c,
  [4645, 236],
  c,
  [6429, 182],
  c,
  [1564, 113],
  c,
  [13175, 48],
  c,
  [10516, 126],
  c,
  [999, 122],
  c,
  [1017, 121],
  c,
  [2551, 339],
  c,
  [2203, 17],
  c,
  [4678, 11],
  c,
  [10111, 273],
  c,
  [13019, 164],
  c,
  [10232, 130],
  c,
  [5533, 117],
  c,
  [244, 100],
  c,
  [53, 66],
  c,
  [17798, 149],
  c,
  [13630, 180],
  c,
  [8611, 159],
  c,
  [4741, 119],
  c,
  [2887, 238],
  c,
  [238, 60],
  c,
  [1262, 175],
  c,
  [10165, 57],
  c,
  [9643, 120],
  c,
  [114, 164],
  c,
  [171, 65],
  c,
  [487, 75],
  c,
  [16144, 210],
  c,
  [8673, 211],
  c,
  [421, 55],
  c,
  [669, 110],
  c,
  [12347, 30],
  c,
  [502, 156],
  c,
  [21083, 381],
  c,
  [15899, 103],
  c,
  [12043, 72],
  c,
  [8303, 46],
  c,
  [12942, 65],
  c,
  [41, 39],
  c,
  [1922, 43],
  c,
  [385, 45],
  c,
  [10168, 231],
  c,
  [22501, 14],
  c,
  [316, 43],
  c,
  [1191, 125],
  c,
  [563, 62],
  c,
  [13103, 228],
  c,
  [822, 47],
  c,
  [298, 114],
  c,
  [114, 73],
  c,
  [2979, 103],
  c,
  [7254, 17],
  c,
  [4191, 9],
  c,
  [2040, 6],
  c,
  [2044, 57],
  c,
  [9212, 12],
  c,
  [73, 51],
  c,
  [5602, 177],
  c,
  [5236, 237],
  c,
  [872, 114],
  c,
  [6487, 13],
  c,
  [3246, 202],
  c,
  [611, 190],
  c,
  [15900, 109],
  c,
  [14976, 123],
  c,
  [2995, 161],
  c,
  [543, 77],
  c,
  [22948, 172],
  c,
  [1893, 120],
  c,
  [10381, 244],
  c,
  [15340, 170],
  c,
  [8666, 212],
  c,
  [7167, 115],
  c,
  [24056, 194],
  c,
  [16036, 145],
  c,
  [26788, 190],
  c,
  [98, 169],
  c,
  [9732, 328],
  c,
  [19810, 56],
  c,
  [10, 12],
  c,
  [235, 150],
  c,
  [59, 118],
  c,
  [62, 22],
  c,
  [6109, 9],
  c,
  [1068, 83],
  c,
  [663, 57],
  c,
  [21250, 98],
  c,
  [4812, 143],
  c,
  [921, 109],
  c,
  [21164, 96],
  c,
  [16961, 202],
  c,
  [3979, 199],
  c,
  [750, 101],
  c,
  [5663, 170],
  c,
  [19921, 146],
  c,
  [4554, 182],
  c,
  [325, 124],
  c,
  [450, 107],
  c,
  [10613, 171],
  c,
  [17282, 212],
  c,
  [8648, 210],
  c,
  [4783, 230],
  c,
  [15718, 203],
  c,
  [97, 162],
  c,
  [8553, 161],
  c,
  [16769, 44],
  c,
  [38, 43],
  c,
  [21593, 65],
  c,
  [7643, 168],
  c,
  [152, 43],
  c,
  [157, 132],
  c,
  [3997, 24],
  c,
  [2908, 34],
  c,
  [363, 128],
  c,
  [529, 164],
  c,
  [654, 147],
  c,
  [9306, 59],
  c,
  [227, 102],
  c,
  [13980, 169],
  c,
  [14225, 9],
  c,
  [10492, 8],
  c,
  [3566, 149],
  c,
  [822, 92],
  c,
  [6362, 120],
  c,
  [8845, 16],
  c,
  [121, 96],
  c,
  [4486, 5],
  c,
  [2875, 94],
  c,
  [6039, 192],
  c,
  [29237, 407],
  c,
  [15091, 219],
  c,
  [8676, 58],
  c,
  [16575, 171],
  c,
  [5137, 111],
  c,
  [7380, 166],
  c,
  [5141, 109],
  c,
  [19482, 100],
  c,
  [27417, 72],
  c,
  [21640, 332],
  c,
  [20476, 77],
  c,
  [35464, 57],
  c,
  [1424, 170],
  c,
  [20844, 17],
  c,
  [7201, 102],
  c,
  [7200, 241],
  c,
  [667, 63],
  c,
  [26258, 175],
  c,
  [20774, 66],
  c,
  [17127, 129],
  c,
  [3458, 137],
  c,
  [43, 42],
  c,
  [36494, 22],
  c,
  [394, 33],
  c,
  [218, 116],
  c,
  [4742, 127],
  c,
  [4391, 122],
  c,
  [3581, 77],
  c,
  [4901, 145],
  c,
  [1244, 13],
  c,
  [1260, 16],
  c,
  [8835, 17],
  c,
  [13853, 97],
  c,
  [4098, 31],
  c,
  [684, 107],
  c,
  [26976, 155],
  c,
  [97, 153],
  c,
  [21223, 210],
  c,
  [11697, 126],
  c,
  [3628, 8],
  c,
  [7017, 159],
  c,
  [23364, 113],
  c,
  [8149, 186],
  c,
  [3640, 173],
  c,
  [1908, 61],
  c,
  [1798, 69],
  c,
  [41, 81],
  c,
  [23339, 118],
  c,
  [1901, 29],
  c,
  [1883, 15],
  c,
  [2434, 135],
  c,
  [38381, 97],
  c,
  [6538, 290],
  c,
  [2623, 125],
  c,
  [12279, 296],
  c,
  [29615, 108],
  c,
  [14472, 126],
  c,
  [97, 55],
  c,
  [7432, 190],
  c,
  [3354, 24],
  c,
  [40836, 114],
  c,
  [40282, 198],
  c,
  [4024, 151],
  c,
  [638, 146],
  c,
  [97, 266],
  c,
  [16677, 116],
  c,
  [2810, 66],
  c,
  [4419, 22],
  c,
  [144, 54],
  c,
  [631, 140],
  c,
  [1487, 99],
  c,
  [265, 70],
  c,
  [5169, 149],
  c,
  [1371, 93]
]),
  state: u([
  1,
  2,
  3,
  5,
  26,
  56,
  64,
  21,
  22,
  20,
  17,
  18,
  25,
  38,
  19,
  35,
  34,
  16,
  90,
  55,
  23,
  48,
  50,
  52,
  51,
  46,
  76,
  47,
  79,
  103,
  24,
  111,
  80,
  106,
  87,
  107,
  49,
  27,
  65,
  45,
  75,
  77,
  4,
  15,
  14,
  11,
  31,
  6,
  9,
  10,
  123,
  124,
  127,
  128,
  131,
  165,
  118,
  166,
  167,
  168,
  c,
  [56, 38],
  170,
  c,
  [56, 7],
  171,
  c,
  [47, 46],
  175,
  176,
  111,
  172,
  180,
  c,
  [51, 46],
  183,
  182,
  194,
  87,
  107,
  195,
  190,
  31,
  187,
  191,
  201,
  c,
  [57, 35],
  200,
  c,
  [57, 7],
  197,
  199,
  c,
  [59, 3],
  205,
  202,
  206,
  207,
  c,
  [109, 46],
  209,
  218,
  c,
  [48, 6],
  211,
  215,
  17,
  212,
  c,
  [51, 28],
  217,
  213,
  c,
  [51, 4],
  216,
  214,
  c,
  [51, 3],
  219,
  c,
  [98, 46],
  222,
  225,
  227,
  224,
  228,
  c,
  [51, 46],
  230,
  234,
  236,
  237,
  239,
  238,
  240,
  246,
  248,
  249,
  256,
  111,
  253,
  254,
  258,
  257,
  262,
  c,
  [63, 46],
  c,
  [311, 17],
  263,
  c,
  [47, 29],
  264,
  c,
  [94, 46],
  265,
  c,
  [47, 46],
  266,
  c,
  [47, 46],
  267,
  c,
  [47, 46],
  269,
  c,
  [47, 46],
  271,
  c,
  [47, 46],
  274,
  c,
  [47, 3],
  273,
  c,
  [48, 43],
  276,
  c,
  [48, 3],
  277,
  c,
  [48, 43],
  279,
  3,
  278,
  c,
  [949, 46],
  283,
  287,
  288,
  286,
  291,
  292,
  c,
  [197, 46],
  294,
  c,
  [47, 46],
  297,
  26,
  296,
  56,
  298,
  64,
  295,
  c,
  [623, 60],
  313,
  c,
  [47, 6],
  302,
  304,
  47,
  308,
  c,
  [49, 5],
  314,
  317,
  87,
  107,
  315,
  305,
  306,
  291,
  27,
  312,
  45,
  311,
  c,
  [54, 9],
  328,
  c,
  [151, 38],
  324,
  326,
  329,
  c,
  [50, 8],
  334,
  106,
  331,
  332,
  256,
  111,
  335,
  254,
  336,
  c,
  [1258, 47],
  337,
  c,
  [257, 46],
  338,
  c,
  [47, 46],
  339,
  c,
  [924, 54],
  341,
  c,
  [1133, 29],
  342,
  c,
  [48, 5],
  340,
  c,
  [48, 3],
  345,
  c,
  [95, 9],
  343,
  c,
  [96, 37],
  346,
  c,
  [143, 46],
  347,
  c,
  [47, 46],
  348,
  c,
  [47, 46],
  349,
  c,
  [47, 46],
  350,
  c,
  [47, 46],
  351,
  c,
  [47, 46],
  352,
  c,
  [47, 46],
  353,
  c,
  [47, 3],
  354,
  c,
  [48, 43],
  355,
  c,
  [871, 52],
  358,
  c,
  [50, 43],
  c,
  [1969, 7],
  359,
  c,
  [104, 46],
  c,
  [54, 7],
  360,
  369,
  79,
  103,
  c,
  [30, 3],
  378,
  364,
  366,
  374,
  375,
  372,
  373,
  365,
  362,
  363,
  368,
  367,
  386,
  c,
  [73, 46],
  391,
  c,
  [47, 18],
  388,
  390,
  c,
  [122, 35],
  394,
  3,
  393,
  c,
  [943, 46],
  399,
  397,
  404,
  401,
  402,
  c,
  [2050, 4],
  409,
  31,
  407,
  410,
  411,
  c,
  [165, 46],
  415,
  412,
  413,
  418,
  c,
  [2101, 44],
  419,
  c,
  [2101, 4],
  420,
  c,
  [170, 7],
  205,
  421,
  205,
  422,
  423,
  424,
  c,
  [13, 6],
  426,
  118,
  279,
  3,
  427,
  c,
  [184, 46],
  428,
  c,
  [171, 46],
  429,
  c,
  [168, 36],
  436,
  435,
  c,
  [2269, 11],
  249,
  c,
  [168, 7],
  c,
  [7, 7],
  445,
  26,
  56,
  443,
  c,
  [64, 5],
  440,
  441,
  442,
  447,
  c,
  [116, 38],
  453,
  456,
  c,
  [116, 3],
  455,
  c,
  [165, 33],
  457,
  c,
  [49, 9],
  458,
  227,
  459,
  c,
  [569, 14],
  462,
  c,
  [569, 3],
  465,
  c,
  [129, 7],
  466,
  c,
  [2213, 5],
  471,
  c,
  [2681, 48],
  472,
  c,
  [49, 48],
  475,
  477,
  480,
  482,
  486,
  488,
  490,
  495,
  c,
  [109, 3],
  493,
  494,
  496,
  246,
  498,
  499,
  c,
  [63, 3],
  502,
  c,
  [362, 43],
  256,
  111,
  504,
  506,
  c,
  [412, 46],
  508,
  c,
  [47, 3],
  507,
  c,
  [48, 35],
  509,
  c,
  [747, 14],
  c,
  [2796, 4],
  c,
  [420, 14],
  c,
  [7, 14],
  511,
  c,
  [955, 53],
  512,
  c,
  [54, 53],
  513,
  c,
  [54, 53],
  c,
  [412, 19],
  c,
  [1997, 29],
  c,
  [3149, 15],
  c,
  [7, 7],
  516,
  c,
  [482, 48],
  517,
  c,
  [613, 14],
  518,
  c,
  [613, 3],
  521,
  c,
  [19, 14],
  523,
  c,
  [19, 3],
  524,
  525,
  c,
  [96, 7],
  279,
  3,
  527,
  c,
  [3308, 52],
  530,
  c,
  [160, 8],
  533,
  c,
  [284, 46],
  534,
  c,
  [2273, 24],
  536,
  c,
  [2273, 29],
  539,
  c,
  [2273, 49],
  c,
  [104, 17],
  541,
  c,
  [3419, 33],
  544,
  543,
  291,
  548,
  c,
  [54, 3],
  550,
  c,
  [105, 29],
  547,
  c,
  [56, 6],
  549,
  c,
  [56, 7],
  524,
  246,
  554,
  552,
  555,
  c,
  [2431, 39],
  556,
  c,
  [158, 10],
  557,
  c,
  [594, 53],
  559,
  c,
  [54, 46],
  560,
  334,
  106,
  563,
  564,
  c,
  [51, 46],
  c,
  [991, 3],
  c,
  [878, 21],
  c,
  [1376, 37],
  566,
  c,
  [1376, 11],
  572,
  c,
  [49, 9],
  571,
  c,
  [226, 44],
  c,
  [7, 70],
  575,
  576,
  111,
  c,
  [754, 14],
  577,
  c,
  [754, 3],
  580,
  c,
  [19, 7],
  591,
  589,
  c,
  [19, 4],
  592,
  588,
  368,
  367,
  586,
  597,
  594,
  596,
  c,
  [21, 14],
  601,
  368,
  367,
  602,
  c,
  [18, 8],
  604,
  c,
  [18, 5],
  368,
  367,
  c,
  [16, 8],
  605,
  c,
  [16, 15],
  606,
  608,
  c,
  [17, 7],
  611,
  c,
  [1467, 5],
  c,
  [123, 7],
  613,
  c,
  [2011, 19],
  615,
  c,
  [2011, 36],
  617,
  c,
  [530, 53],
  623,
  622,
  625,
  626,
  404,
  631,
  402,
  633,
  c,
  [61, 53],
  638,
  415,
  641,
  413,
  c,
  [2017, 44],
  642,
  c,
  [59, 3],
  418,
  646,
  c,
  [49, 3],
  648,
  c,
  [108, 43],
  651,
  654,
  c,
  [49, 3],
  653,
  c,
  [157, 50],
  c,
  [7, 7],
  656,
  c,
  [218, 46],
  657,
  c,
  [47, 46],
  658,
  c,
  [47, 46],
  659,
  c,
  [47, 46],
  660,
  c,
  [4202, 63],
  c,
  [47, 19],
  661,
  c,
  [47, 10],
  420,
  663,
  c,
  [95, 46],
  c,
  [2275, 9],
  664,
  c,
  [2275, 41],
  669,
  673,
  674,
  c,
  [100, 3],
  675,
  c,
  [445, 50],
  166,
  297,
  26,
  677,
  c,
  [2962, 3],
  c,
  [3011, 45],
  678,
  c,
  [49, 48],
  679,
  c,
  [49, 48],
  680,
  c,
  [49, 46],
  c,
  [305, 9],
  681,
  c,
  [305, 41],
  683,
  c,
  [303, 3],
  682,
  c,
  [303, 50],
  684,
  686,
  688,
  c,
  [509, 17],
  693,
  c,
  [57, 29],
  696,
  694,
  695,
  c,
  [1232, 8],
  c,
  [1251, 7],
  698,
  c,
  [1251, 3],
  699,
  475,
  703,
  c,
  [71, 3],
  701,
  c,
  [129, 43],
  705,
  c,
  [2142, 48],
  709,
  c,
  [1260, 4],
  713,
  c,
  [52, 3],
  712,
  c,
  [102, 43],
  714,
  c,
  [682, 46],
  715,
  c,
  [47, 46],
  716,
  c,
  [47, 46],
  721,
  724,
  728,
  726,
  555,
  729,
  c,
  [198, 3],
  730,
  c,
  [56, 38],
  731,
  c,
  [428, 14],
  471,
  3,
  732,
  c,
  [306, 46],
  733,
  c,
  [1922, 48],
  734,
  254,
  c,
  [1283, 14],
  736,
  c,
  [1764, 21],
  580,
  c,
  [2219, 34],
  744,
  49,
  743,
  c,
  [2220, 13],
  580,
  746,
  748,
  c,
  [2715, 9],
  750,
  c,
  [150, 38],
  751,
  c,
  [59, 7],
  752,
  c,
  [47, 3],
  755,
  c,
  [48, 35],
  753,
  c,
  [877, 9],
  756,
  c,
  [877, 46],
  757,
  c,
  [2153, 24],
  c,
  [2591, 7],
  761,
  c,
  [2590, 28],
  763,
  764,
  c,
  [54, 3],
  765,
  c,
  [110, 43],
  768,
  c,
  [48, 3],
  769,
  c,
  [936, 50],
  c,
  [2597, 4],
  c,
  [375, 34],
  773,
  c,
  [2594, 14],
  c,
  [60, 7],
  775,
  c,
  [56, 3],
  774,
  c,
  [115, 35],
  776,
  c,
  [5075, 46],
  778,
  779,
  c,
  [164, 8],
  554,
  782,
  555,
  c,
  [546, 14],
  783,
  c,
  [8, 7],
  786,
  c,
  [641, 46],
  787,
  c,
  [1718, 82],
  788,
  c,
  [47, 10],
  c,
  [4995, 10],
  789,
  c,
  [378, 44],
  792,
  c,
  [149, 46],
  580,
  794,
  795,
  c,
  [2562, 15],
  796,
  368,
  367,
  799,
  c,
  [18, 14],
  800,
  c,
  [1329, 3],
  c,
  [2508, 8],
  803,
  c,
  [2508, 8],
  c,
  [17, 8],
  806,
  c,
  [16, 7],
  808,
  c,
  [2613, 17],
  810,
  c,
  [18, 8],
  811,
  c,
  [35, 7],
  816,
  597,
  817,
  596,
  820,
  c,
  [39, 14],
  821,
  c,
  [73, 10],
  c,
  [38, 8],
  c,
  [33, 14],
  823,
  c,
  [17, 10],
  825,
  c,
  [33, 15],
  829,
  c,
  [139, 8],
  475,
  c,
  [2634, 19],
  834,
  c,
  [245, 28],
  835,
  c,
  [300, 7],
  404,
  839,
  840,
  842,
  843,
  844,
  c,
  [13, 7],
  415,
  846,
  848,
  851,
  638,
  c,
  [2533, 44],
  853,
  c,
  [468, 39],
  c,
  [48, 8],
  854,
  c,
  [3054, 4],
  c,
  [1308, 9],
  855,
  c,
  [1308, 46],
  c,
  [278, 14],
  856,
  368,
  367,
  867,
  859,
  862,
  863,
  866,
  696,
  872,
  695,
  c,
  [81, 7],
  873,
  c,
  [2776, 53],
  c,
  [7, 20],
  876,
  c,
  [8, 7],
  878,
  118,
  880,
  249,
  c,
  [223, 36],
  884,
  c,
  [86, 17],
  c,
  [2063, 9],
  886,
  c,
  [2063, 41],
  c,
  [51, 9],
  887,
  c,
  [50, 40],
  888,
  c,
  [155, 3],
  889,
  c,
  [242, 43],
  890,
  892,
  893,
  c,
  [50, 3],
  894,
  c,
  [292, 50],
  c,
  [5427, 6],
  895,
  c,
  [57, 50],
  898,
  c,
  [112, 3],
  897,
  c,
  [55, 43],
  899,
  c,
  [366, 17],
  901,
  c,
  [48, 29],
  902,
  906,
  907,
  909,
  c,
  [416, 30],
  c,
  [1539, 5],
  49,
  910,
  291,
  c,
  [55, 5],
  908,
  c,
  [55, 7],
  911,
  c,
  [54, 53],
  c,
  [1489, 4],
  912,
  914,
  915,
  580,
  919,
  c,
  [60, 3],
  917,
  c,
  [213, 43],
  921,
  c,
  [48, 3],
  920,
  c,
  [316, 50],
  925,
  c,
  [55, 3],
  924,
  c,
  [55, 43],
  926,
  c,
  [2413, 4],
  927,
  c,
  [3679, 12],
  c,
  [7, 21],
  929,
  931,
  490,
  935,
  934,
  c,
  [36, 3],
  937,
  c,
  [814, 46],
  c,
  [5124, 4],
  940,
  941,
  c,
  [82, 21],
  c,
  [4103, 3],
  946,
  947,
  948,
  c,
  [79, 38],
  949,
  c,
  [893, 21],
  472,
  3,
  952,
  c,
  [4861, 45],
  953,
  c,
  [70, 7],
  954,
  c,
  [1662, 63],
  c,
  [101, 7],
  955,
  c,
  [2095, 28],
  c,
  [53, 24],
  956,
  c,
  [4739, 29],
  c,
  [1252, 9],
  958,
  c,
  [8220, 53],
  471,
  3,
  959,
  c,
  [56, 53],
  c,
  [4596, 47],
  c,
  [2103, 39],
  961,
  c,
  [4747, 10],
  c,
  [50, 39],
  962,
  c,
  [4954, 26],
  c,
  [49, 19],
  964,
  c,
  [1429, 24],
  965,
  249,
  c,
  [2050, 10],
  966,
  c,
  [828, 44],
  c,
  [1981, 14],
  967,
  c,
  [1841, 9],
  c,
  [17, 7],
  968,
  c,
  [4577, 10],
  c,
  [18, 7],
  970,
  c,
  [2016, 11],
  c,
  [1893, 16],
  972,
  c,
  [2032, 16],
  c,
  [1665, 6],
  975,
  c,
  [2033, 11],
  977,
  c,
  [35, 8],
  597,
  978,
  816,
  c,
  [38, 14],
  982,
  c,
  [2014, 32],
  987,
  c,
  [33, 26],
  988,
  c,
  [121, 16],
  989,
  c,
  [16, 15],
  c,
  [170, 8],
  c,
  [2045, 19],
  992,
  c,
  [6738, 47],
  993,
  c,
  [4727, 29],
  404,
  996,
  997,
  415,
  999,
  1000,
  418,
  c,
  [350, 14],
  c,
  [176, 17],
  1004,
  c,
  [176, 16],
  1005,
  c,
  [17, 8],
  1006,
  867,
  1008,
  1009,
  863,
  866,
  867,
  1012,
  863,
  866,
  1015,
  1016,
  s,
  [1019, 4, 1],
  1025,
  914,
  c,
  [75, 7],
  1027,
  c,
  [689, 46],
  1028,
  c,
  [47, 46],
  1030,
  c,
  [47, 3],
  1029,
  c,
  [48, 43],
  1032,
  c,
  [48, 3],
  1031,
  c,
  [48, 43],
  1033,
  c,
  [143, 46],
  1034,
  c,
  [6728, 8],
  c,
  [4288, 49],
  c,
  [791, 14],
  1037,
  c,
  [1674, 4],
  1038,
  1040,
  c,
  [1733, 53],
  c,
  [67, 7],
  1044,
  696,
  1046,
  1050,
  c,
  [62, 3],
  1049,
  c,
  [2352, 64],
  1052,
  1053,
  c,
  [259, 46],
  1054,
  490,
  1055,
  490,
  1056,
  c,
  [2472, 53],
  c,
  [3973, 4],
  c,
  [1669, 4],
  1057,
  496,
  c,
  [137, 21],
  763,
  c,
  [15, 14],
  1063,
  c,
  [100, 3],
  1065,
  c,
  [101, 43],
  554,
  1066,
  555,
  1068,
  249,
  1069,
  c,
  [3128, 47],
  c,
  [1073, 24],
  c,
  [985, 6],
  1074,
  c,
  [17, 10],
  1075,
  c,
  [793, 16],
  c,
  [826, 16],
  c,
  [66, 8],
  597,
  1078,
  597,
  1079,
  c,
  [5734, 9],
  c,
  [1072, 22],
  1081,
  c,
  [17, 10],
  1082,
  c,
  [87, 16],
  1083,
  c,
  [104, 40],
  1087,
  c,
  [187, 24],
  c,
  [16, 8],
  1006,
  1015,
  867,
  1094,
  c,
  [941, 3],
  867,
  1096,
  c,
  [950, 3],
  1097,
  866,
  1101,
  1103,
  1105,
  1106,
  1107,
  c,
  [135, 14],
  1108,
  c,
  [152, 16],
  1111,
  368,
  367,
  c,
  [380, 6],
  1114,
  c,
  [388, 7],
  1116,
  c,
  [2176, 21],
  1119,
  118,
  1120,
  c,
  [358, 46],
  1122,
  1126,
  c,
  [743, 52],
  1127,
  696,
  1128,
  c,
  [2309, 28],
  471,
  3,
  1131,
  c,
  [1888, 46],
  1133,
  c,
  [692, 53],
  c,
  [391, 32],
  c,
  [1580, 9],
  c,
  [33, 24],
  c,
  [610, 30],
  1140,
  c,
  [3331, 3],
  1144,
  c,
  [3331, 3],
  1015,
  1015,
  867,
  1146,
  c,
  [424, 3],
  1147,
  866,
  867,
  1149,
  863,
  866,
  c,
  [35, 14],
  1151,
  368,
  367,
  1154,
  1155,
  1156,
  c,
  [103, 24],
  1157,
  c,
  [1754, 22],
  1158,
  c,
  [577, 18],
  1159,
  1162,
  c,
  [257, 3],
  1161,
  c,
  [258, 43],
  1164,
  c,
  [48, 3],
  1163,
  c,
  [48, 43],
  1165,
  c,
  [48, 3],
  1166,
  c,
  [354, 49],
  1168,
  118,
  1169,
  c,
  [473, 14],
  c,
  [828, 30],
  1173,
  c,
  [17, 10],
  1174,
  c,
  [1691, 9],
  1015,
  867,
  1177,
  c,
  [746, 4],
  1179,
  c,
  [315, 10],
  c,
  [61, 8],
  1181,
  1183,
  c,
  [384, 24],
  c,
  [95, 16],
  1185,
  c,
  [78, 8],
  c,
  [622, 21],
  1186,
  c,
  [220, 3],
  1187,
  c,
  [220, 43],
  c,
  [181, 14],
  1188,
  c,
  [975, 34],
  c,
  [513, 3],
  1194,
  c,
  [191, 10],
  1195,
  c,
  [470, 16],
  c,
  [39, 8],
  c,
  [292, 37],
  1197,
  c,
  [17, 10],
  1198,
  c,
  [73, 8],
  1015,
  c,
  [264, 40],
  c,
  [32, 8],
  1206,
  1208
]),
  mode: u([
  2,
  s,
  [1, 64],
  2,
  1,
  s,
  [2, 5],
  c,
  [9, 4],
  c,
  [19, 13],
  c,
  [59, 36],
  s,
  [2, 83],
  c,
  [85, 85],
  c,
  [91, 13],
  s,
  [1, 129],
  c,
  [244, 54],
  c,
  [37, 21],
  c,
  [77, 4],
  c,
  [441, 4],
  c,
  [16, 10],
  c,
  [96, 10],
  c,
  [472, 7],
  c,
  [3, 6],
  c,
  [471, 6],
  c,
  [258, 11],
  c,
  [99, 23],
  c,
  [26, 5],
  c,
  [534, 11],
  c,
  [94, 4],
  c,
  [72, 11],
  c,
  [554, 8],
  c,
  [45, 9],
  c,
  [562, 9],
  c,
  [83, 8],
  c,
  [14, 9],
  s,
  [1, 285],
  c,
  [809, 146],
  c,
  [79, 31],
  c,
  [828, 81],
  c,
  [178, 67],
  c,
  [765, 6],
  c,
  [1144, 156],
  c,
  [232, 6],
  c,
  [238, 49],
  c,
  [47, 27],
  c,
  [75, 17],
  s,
  [1, 717],
  c,
  [972, 74],
  c,
  [75, 51],
  c,
  [1945, 20],
  c,
  [375, 231],
  c,
  [119, 125],
  c,
  [2149, 6],
  c,
  [2103, 293],
  c,
  [1462, 680],
  c,
  [1481, 64],
  c,
  [64, 46],
  c,
  [1290, 85],
  c,
  [135, 12],
  c,
  [3314, 6],
  c,
  [3870, 11],
  c,
  [35, 8],
  c,
  [1715, 40],
  c,
  [3372, 13],
  c,
  [156, 80],
  c,
  [1338, 26],
  c,
  [336, 15],
  c,
  [178, 7],
  c,
  [179, 15],
  c,
  [1837, 7],
  c,
  [1693, 163],
  c,
  [403, 145],
  c,
  [314, 88],
  c,
  [3224, 90],
  c,
  [2465, 135],
  c,
  [3365, 22],
  c,
  [138, 102],
  c,
  [58, 42],
  c,
  [1426, 195],
  c,
  [2823, 53],
  c,
  [549, 126],
  c,
  [1011, 15],
  c,
  [2744, 147],
  c,
  [779, 74],
  c,
  [69, 22],
  c,
  [156, 122],
  c,
  [5501, 98],
  c,
  [635, 54],
  c,
  [1943, 156],
  c,
  [592, 74],
  c,
  [5562, 10],
  c,
  [9, 17],
  c,
  [5593, 9],
  c,
  [5597, 12],
  c,
  [3733, 232],
  c,
  [2287, 80],
  c,
  [6016, 91],
  c,
  [4166, 13],
  c,
  [445, 10],
  c,
  [5978, 8],
  c,
  [143, 12],
  c,
  [215, 13],
  c,
  [123, 34],
  c,
  [270, 90],
  c,
  [90, 179],
  c,
  [2891, 155],
  c,
  [3201, 219],
  c,
  [1911, 41],
  c,
  [109, 31],
  c,
  [139, 45],
  c,
  [273, 69],
  c,
  [21, 18],
  c,
  [164, 14],
  c,
  [1355, 126],
  c,
  [6333, 143],
  c,
  [3066, 96],
  c,
  [75, 70],
  c,
  [3125, 7],
  c,
  [1389, 85],
  c,
  [515, 164],
  c,
  [566, 131],
  c,
  [1349, 155],
  c,
  [68, 28],
  c,
  [1151, 46],
  c,
  [350, 69],
  c,
  [71, 45],
  c,
  [6538, 204],
  c,
  [662, 80],
  c,
  [614, 13],
  c,
  [2867, 6],
  c,
  [2883, 16],
  c,
  [1489, 60],
  c,
  [8895, 157],
  s,
  [2, 138],
  c,
  [8736, 10],
  c,
  [288, 53],
  c,
  [3173, 141],
  c,
  [882, 104],
  c,
  [255, 11],
  c,
  [5055, 122],
  c,
  [2390, 99],
  c,
  [90, 114],
  c,
  [1648, 130],
  c,
  [4978, 63],
  c,
  [1089, 88],
  c,
  [3971, 156],
  c,
  [640, 269],
  c,
  [90, 204],
  c,
  [360, 35],
  c,
  [270, 147],
  c,
  [3318, 33],
  c,
  [180, 122],
  c,
  [1090, 89],
  c,
  [5305, 75],
  c,
  [821, 18],
  c,
  [6448, 177],
  c,
  [2132, 79],
  c,
  [9077, 111],
  c,
  [3284, 50],
  c,
  [9080, 7],
  c,
  [520, 76],
  c,
  [4522, 91],
  c,
  [170, 17],
  c,
  [9265, 61],
  c,
  [244, 72],
  c,
  [2019, 98],
  c,
  [9703, 113],
  c,
  [2405, 157],
  c,
  [9126, 326],
  c,
  [3747, 111],
  c,
  [10201, 145],
  c,
  [265, 11],
  c,
  [267, 28],
  c,
  [41, 12],
  c,
  [162, 115],
  c,
  [10749, 120],
  c,
  [937, 315],
  c,
  [3195, 91],
  c,
  [13, 19],
  c,
  [12721, 33],
  c,
  [8141, 128],
  c,
  [181, 90],
  c,
  [8045, 70],
  c,
  [2076, 94],
  c,
  [2713, 147],
  c,
  [1731, 195],
  c,
  [10099, 13],
  c,
  [284, 71],
  c,
  [2291, 268],
  c,
  [3784, 140],
  c,
  [12703, 34],
  c,
  [3691, 150],
  c,
  [6278, 11],
  c,
  [14729, 58],
  c,
  [3300, 11],
  c,
  [14729, 19],
  c,
  [103, 10],
  c,
  [14729, 39],
  c,
  [2550, 71],
  c,
  [5830, 11],
  c,
  [6281, 134],
  c,
  [5421, 85],
  c,
  [1395, 252],
  c,
  [1293, 99],
  c,
  [799, 8],
  c,
  [2681, 16],
  c,
  [1985, 54],
  c,
  [7156, 65],
  c,
  [317, 78],
  c,
  [1167, 39],
  c,
  [15226, 50],
  c,
  [228, 13],
  c,
  [7401, 66],
  c,
  [1512, 255],
  c,
  [1347, 10],
  c,
  [2456, 66],
  c,
  [4934, 50],
  c,
  [7286, 88],
  c,
  [11767, 126],
  c,
  [14608, 304],
  c,
  [1219, 10],
  c,
  [113, 92],
  c,
  [474, 25],
  c,
  [963, 7],
  c,
  [31, 19],
  c,
  [1896, 86],
  c,
  [3800, 30],
  c,
  [2047, 102],
  c,
  [12369, 33],
  c,
  [1254, 16],
  c,
  [5759, 13],
  c,
  [1204, 51],
  c,
  [1788, 15],
  c,
  [4084, 10],
  c,
  [14158, 108],
  c,
  [382, 45],
  c,
  [109, 91],
  c,
  [14423, 129],
  c,
  [156, 28],
  c,
  [159, 14],
  c,
  [7189, 29],
  c,
  [1059, 33],
  c,
  [1566, 17],
  c,
  [1139, 39],
  c,
  [16940, 10],
  c,
  [1695, 53],
  c,
  [61, 14],
  c,
  [2635, 228],
  c,
  [9974, 90],
  c,
  [3516, 11],
  c,
  [9136, 61],
  c,
  [14050, 11],
  c,
  [18789, 16],
  c,
  [277, 84],
  c,
  [4936, 11],
  c,
  [3690, 13],
  c,
  [3689, 29],
  c,
  [9680, 7],
  c,
  [626, 13],
  c,
  [67, 10],
  c,
  [755, 21],
  c,
  [6695, 280],
  c,
  [14580, 46],
  c,
  [6435, 85],
  c,
  [14131, 155],
  c,
  [5228, 175],
  c,
  [5610, 113],
  c,
  [4453, 20],
  c,
  [12007, 7],
  c,
  [12550, 100],
  c,
  [1333, 73],
  c,
  [6120, 138],
  c,
  [3048, 99],
  c,
  [69, 43],
  c,
  [13945, 89],
  c,
  [15922, 91],
  c,
  [11528, 190],
  c,
  [1617, 137],
  c,
  [1841, 169],
  c,
  [13953, 99],
  c,
  [13199, 8],
  c,
  [852, 44],
  c,
  [52, 59],
  c,
  [53, 36],
  c,
  [1170, 12],
  c,
  [5214, 15],
  c,
  [9756, 79],
  c,
  [4990, 194],
  c,
  [271, 37],
  c,
  [752, 97],
  c,
  [12632, 213],
  c,
  [6351, 79],
  c,
  [3086, 104],
  c,
  [1806, 48],
  c,
  [3336, 93],
  c,
  [5761, 118],
  c,
  [13909, 72],
  c,
  [17213, 66],
  c,
  [5396, 158],
  c,
  [6002, 59],
  c,
  [8461, 113],
  c,
  [115, 107],
  c,
  [783, 188],
  c,
  [20412, 255],
  c,
  [13003, 181],
  c,
  [4263, 130],
  c,
  [4017, 152],
  c,
  [5906, 114],
  c,
  [6655, 22],
  c,
  [120, 21],
  c,
  [6045, 114],
  c,
  [8813, 12],
  c,
  [1168, 27],
  c,
  [6457, 131],
  c,
  [131, 109],
  c,
  [6456, 156],
  c,
  [4961, 180],
  c,
  [2615, 38],
  c,
  [7070, 131],
  c,
  [20400, 112],
  c,
  [2938, 19],
  c,
  [20511, 94],
  c,
  [23650, 19],
  c,
  [19426, 78],
  c,
  [4646, 98],
  c,
  [12995, 413],
  c,
  [2171, 70],
  c,
  [396, 122],
  c,
  [25881, 39],
  c,
  [6067, 95],
  c,
  [5706, 90],
  c,
  [3812, 75],
  c,
  [17810, 41],
  c,
  [6221, 101],
  c,
  [11821, 160],
  c,
  [22495, 92],
  c,
  [5588, 90],
  c,
  [2207, 139],
  c,
  [11207, 17],
  c,
  [158, 42],
  c,
  [10909, 13],
  c,
  [4760, 188],
  c,
  [4991, 45],
  c,
  [6719, 18],
  c,
  [530, 24],
  c,
  [19260, 44],
  c,
  [11595, 60],
  c,
  [588, 104],
  c,
  [402, 44],
  c,
  [3844, 85],
  c,
  [822, 73],
  c,
  [10182, 26],
  c,
  [1702, 41],
  c,
  [373, 86],
  c,
  [2989, 134],
  c,
  [3496, 111],
  c,
  [6765, 31],
  c,
  [275, 20],
  c,
  [18764, 35],
  c,
  [275, 55],
  c,
  [10478, 15],
  c,
  [7041, 14],
  c,
  [288, 22],
  c,
  [6273, 79],
  c,
  [2865, 149],
  c,
  [5040, 180],
  c,
  [2983, 124],
  c,
  [8661, 89],
  c,
  [12808, 69],
  c,
  [8025, 103],
  c,
  [7755, 47],
  c,
  [6211, 59],
  c,
  [23003, 171],
  c,
  [3298, 94],
  c,
  [1753, 51],
  c,
  [461, 8],
  c,
  [1749, 89],
  c,
  [10794, 109],
  c,
  [13390, 42],
  c,
  [1777, 26],
  c,
  [21943, 91],
  c,
  [29694, 91],
  c,
  [5081, 147],
  c,
  [5716, 114],
  c,
  [19977, 140],
  c,
  [13270, 234],
  c,
  [18629, 93],
  c,
  [1179, 69],
  c,
  [5630, 94],
  c,
  [15410, 12],
  c,
  [774, 208],
  c,
  [865, 115],
  c,
  [6936, 132],
  c,
  [20843, 203],
  c,
  [2890, 157],
  c,
  [991, 53],
  c,
  [2022, 54],
  c,
  [1196, 97],
  c,
  [2374, 72],
  c,
  [3998, 32],
  c,
  [306, 53],
  c,
  [1057, 179]
]),
  goto: u([
  1,
  57,
  93,
  94,
  95,
  98,
  101,
  78,
  102,
  s,
  [58, 6, 1],
  91,
  92,
  96,
  97,
  99,
  s,
  [40, 5, 1],
  39,
  36,
  37,
  7,
  108,
  74,
  73,
  s,
  [69, 4, 1],
  109,
  53,
  86,
  88,
  89,
  s,
  [81, 5, 1],
  104,
  110,
  54,
  114,
  105,
  112,
  113,
  100,
  8,
  12,
  13,
  33,
  32,
  66,
  67,
  68,
  28,
  29,
  30,
  2,
  115,
  s,
  [9, 5],
  116,
  117,
  10,
  138,
  140,
  136,
  142,
  146,
  155,
  156,
  162,
  163,
  10,
  120,
  s,
  [10, 3],
  125,
  126,
  129,
  130,
  132,
  134,
  s,
  [135, 5, 2],
  144,
  145,
  s,
  [147, 8, 1],
  s,
  [157, 5, 1],
  164,
  119,
  121,
  122,
  c,
  [87, 4],
  133,
  s,
  [458, 84],
  100,
  s,
  [458, 6],
  s,
  [460, 84],
  100,
  s,
  [460, 6],
  c,
  [305, 12],
  169,
  c,
  [306, 52],
  c,
  [370, 64],
  s,
  [21, 17],
  177,
  s,
  [21, 36],
  174,
  s,
  [21, 20],
  173,
  179,
  21,
  21,
  178,
  21,
  110,
  114,
  s,
  [21, 7],
  599,
  c,
  [155, 5],
  s,
  [599, 7],
  101,
  s,
  [599, 5],
  78,
  599,
  599,
  102,
  599,
  599,
  c,
  [171, 4],
  181,
  599,
  62,
  63,
  s,
  [599, 6],
  c,
  [179, 4],
  s,
  [599, 20],
  99,
  599,
  599,
  c,
  [201, 3],
  599,
  599,
  c,
  [203, 3],
  599,
  36,
  s,
  [599, 5],
  37,
  599,
  7,
  599,
  108,
  s,
  [599, 5],
  74,
  599,
  599,
  73,
  s,
  [599, 6],
  109,
  53,
  599,
  86,
  s,
  [599, 3],
  88,
  599,
  599,
  c,
  [226, 10],
  599,
  c,
  [227, 4],
  s,
  [599, 5],
  c,
  [232, 4],
  599,
  c,
  [233, 7],
  184,
  185,
  186,
  100,
  192,
  188,
  193,
  196,
  39,
  189,
  113,
  c,
  [17, 3],
  c,
  [311, 12],
  198,
  c,
  [312, 52],
  204,
  203,
  100,
  100,
  c,
  [69, 6],
  208,
  c,
  [380, 57],
  210,
  c,
  [34, 4],
  c,
  [449, 64],
  c,
  [64, 12],
  220,
  c,
  [65, 7],
  221,
  c,
  [66, 45],
  s,
  [217, 67],
  223,
  s,
  [217, 22],
  s,
  [139, 52],
  388,
  s,
  [139, 3],
  226,
  c,
  [5, 4],
  s,
  [139, 26],
  100,
  s,
  [139, 6],
  c,
  [314, 64],
  233,
  232,
  231,
  229,
  244,
  245,
  235,
  242,
  243,
  241,
  s,
  [362, 66],
  c,
  [121, 3],
  362,
  362,
  247,
  s,
  [362, 72],
  100,
  s,
  [252, 84],
  250,
  251,
  s,
  [252, 4],
  110,
  114,
  255,
  s,
  [197, 46],
  261,
  s,
  [197, 26],
  259,
  260,
  s,
  [197, 15],
  c,
  [716, 76],
  c,
  [64, 256],
  268,
  c,
  [65, 64],
  270,
  c,
  [65, 64],
  272,
  c,
  [65, 57],
  275,
  c,
  [65, 6],
  232,
  c,
  [65, 7],
  231,
  c,
  [66, 116],
  c,
  [197, 7],
  280,
  c,
  [197, 52],
  284,
  282,
  281,
  179,
  285,
  s,
  [378, 71],
  196,
  378,
  378,
  289,
  388,
  s,
  [378, 49],
  113,
  290,
  s,
  [378, 17],
  c,
  [605, 70],
  293,
  c,
  [64, 62],
  155,
  156,
  c,
  [130, 13],
  299,
  148,
  300,
  c,
  [2443, 6],
  c,
  [139, 52],
  301,
  78,
  309,
  c,
  [74, 4],
  303,
  c,
  [141, 10],
  319,
  44,
  39,
  289,
  388,
  c,
  [68, 13],
  310,
  88,
  307,
  c,
  [70, 12],
  318,
  320,
  321,
  322,
  316,
  c,
  [73, 17],
  330,
  78,
  102,
  323,
  c,
  [74, 4],
  325,
  c,
  [215, 26],
  327,
  c,
  [141, 26],
  333,
  105,
  112,
  c,
  [1301, 3],
  4,
  c,
  [75, 6],
  4,
  78,
  4,
  102,
  4,
  c,
  [76, 4],
  4,
  c,
  [1216, 320],
  344,
  c,
  [321, 320],
  c,
  [64, 185],
  c,
  [1468, 73],
  c,
  [130, 52],
  s,
  [73, 18],
  356,
  s,
  [73, 45],
  s,
  [75, 18],
  357,
  s,
  [75, 45],
  c,
  [1318, 75],
  464,
  c,
  [3844, 9],
  s,
  [464, 4],
  120,
  s,
  [464, 7],
  125,
  126,
  464,
  130,
  464,
  464,
  c,
  [3852, 8],
  464,
  148,
  464,
  c,
  [91, 6],
  464,
  464,
  c,
  [3852, 3],
  s,
  [464, 37],
  133,
  464,
  464,
  c,
  [357, 64],
  116,
  117,
  466,
  c,
  [156, 9],
  s,
  [466, 4],
  120,
  s,
  [466, 7],
  c,
  [4007, 5],
  466,
  c,
  [4008, 22],
  s,
  [466, 9],
  119,
  s,
  [466, 5],
  121,
  122,
  466,
  466,
  c,
  [104, 4],
  s,
  [466, 14],
  133,
  466,
  466,
  361,
  s,
  [388, 3],
  377,
  383,
  376,
  382,
  370,
  379,
  384,
  380,
  c,
  [128, 7],
  c,
  [127, 3],
  100,
  371,
  381,
  385,
  c,
  [733, 76],
  389,
  c,
  [65, 26],
  387,
  392,
  c,
  [67, 26],
  600,
  c,
  [247, 9],
  s,
  [600, 4],
  120,
  s,
  [600, 7],
  125,
  126,
  600,
  130,
  600,
  600,
  c,
  [247, 8],
  600,
  148,
  600,
  c,
  [247, 6],
  600,
  600,
  c,
  [247, 3],
  s,
  [600, 37],
  133,
  600,
  600,
  c,
  [221, 64],
  395,
  606,
  606,
  398,
  287,
  606,
  606,
  396,
  400,
  405,
  403,
  100,
  406,
  192,
  c,
  [3815, 3],
  408,
  c,
  [3815, 16],
  c,
  [86, 52],
  414,
  100,
  416,
  s,
  [586, 12],
  417,
  s,
  [586, 77],
  c,
  [157, 64],
  s,
  [595, 84],
  c,
  [3365, 3],
  s,
  [595, 3],
  c,
  [486, 9],
  120,
  c,
  [4729, 35],
  100,
  100,
  c,
  [691, 4],
  s,
  [388, 54],
  c,
  [58, 42],
  c,
  [147, 9],
  233,
  120,
  232,
  c,
  [149, 27],
  231,
  425,
  c,
  [151, 8],
  c,
  [2821, 65],
  c,
  [415, 64],
  c,
  [33, 4],
  s,
  [430, 4, 1],
  s,
  [406, 9],
  434,
  s,
  [406, 50],
  c,
  [4519, 65],
  437,
  143,
  143,
  144,
  144,
  463,
  463,
  s,
  [252, 42],
  170,
  170,
  c,
  [3892, 16],
  c,
  [378, 9],
  145,
  145,
  c,
  [527, 28],
  145,
  c,
  [377, 8],
  c,
  [573, 10],
  438,
  c,
  [47, 27],
  439,
  c,
  [424, 20],
  c,
  [226, 14],
  451,
  37,
  444,
  446,
  448,
  449,
  450,
  c,
  [230, 35],
  452,
  s,
  [218, 68],
  454,
  s,
  [218, 21],
  c,
  [2002, 66],
  c,
  [4613, 87],
  s,
  [139, 6],
  s,
  [473, 54],
  460,
  s,
  [473, 35],
  461,
  c,
  [1669, 4],
  463,
  c,
  [1670, 17],
  384,
  464,
  103,
  c,
  [481, 9],
  s,
  [103, 4],
  120,
  s,
  [103, 7],
  125,
  126,
  103,
  130,
  103,
  103,
  c,
  [492, 8],
  103,
  148,
  103,
  c,
  [492, 6],
  103,
  103,
  c,
  [492, 3],
  s,
  [103, 37],
  133,
  103,
  103,
  244,
  245,
  467,
  c,
  [4749, 3],
  469,
  468,
  c,
  [531, 12],
  470,
  c,
  [955, 116],
  474,
  287,
  287,
  473,
  476,
  s,
  [414, 7],
  478,
  479,
  s,
  [416, 7],
  478,
  479,
  s,
  [421, 8],
  481,
  478,
  479,
  484,
  483,
  s,
  [429, 3],
  485,
  s,
  [429, 7],
  487,
  s,
  [296, 3],
  491,
  489,
  243,
  241,
  244,
  330,
  245,
  492,
  c,
  [193, 3],
  c,
  [107, 3],
  247,
  c,
  [4956, 3],
  497,
  c,
  [571, 8],
  501,
  c,
  [135, 4],
  500,
  c,
  [572, 53],
  505,
  110,
  503,
  114,
  255,
  c,
  [2709, 88],
  510,
  c,
  [67, 42],
  26,
  c,
  [500, 9],
  s,
  [26, 4],
  120,
  s,
  [26, 7],
  c,
  [991, 5],
  26,
  c,
  [992, 22],
  s,
  [26, 9],
  119,
  s,
  [26, 5],
  121,
  122,
  26,
  26,
  c,
  [102, 4],
  s,
  [26, 14],
  133,
  26,
  26,
  s,
  [29, 17],
  177,
  s,
  [29, 36],
  174,
  s,
  [29, 20],
  173,
  179,
  29,
  29,
  178,
  29,
  110,
  114,
  s,
  [29, 7],
  s,
  [30, 3],
  136,
  142,
  s,
  [30, 9],
  120,
  s,
  [30, 8],
  126,
  30,
  130,
  30,
  30,
  c,
  [180, 3],
  30,
  c,
  [180, 4],
  s,
  [30, 8],
  157,
  s,
  [30, 4],
  164,
  s,
  [30, 37],
  133,
  30,
  30,
  31,
  c,
  [270, 9],
  s,
  [31, 4],
  120,
  s,
  [31, 7],
  c,
  [270, 5],
  31,
  c,
  [270, 22],
  s,
  [31, 9],
  119,
  s,
  [31, 5],
  121,
  122,
  31,
  31,
  c,
  [270, 4],
  s,
  [31, 14],
  133,
  31,
  31,
  32,
  c,
  [90, 9],
  s,
  [32, 4],
  120,
  s,
  [32, 7],
  c,
  [90, 5],
  32,
  c,
  [90, 22],
  s,
  [32, 9],
  119,
  s,
  [32, 5],
  121,
  122,
  32,
  32,
  c,
  [90, 4],
  s,
  [32, 14],
  133,
  32,
  32,
  33,
  c,
  [90, 9],
  s,
  [33, 4],
  120,
  s,
  [33, 7],
  c,
  [90, 5],
  33,
  c,
  [90, 22],
  s,
  [33, 9],
  119,
  s,
  [33, 5],
  121,
  122,
  33,
  33,
  c,
  [90, 4],
  s,
  [33, 14],
  133,
  33,
  33,
  c,
  [671, 64],
  35,
  c,
  [154, 9],
  s,
  [35, 4],
  120,
  s,
  [35, 7],
  c,
  [154, 5],
  35,
  c,
  [154, 22],
  s,
  [35, 9],
  119,
  s,
  [35, 5],
  121,
  122,
  35,
  35,
  c,
  [102, 4],
  s,
  [35, 14],
  133,
  35,
  35,
  c,
  [154, 64],
  37,
  c,
  [154, 9],
  s,
  [37, 4],
  120,
  s,
  [37, 7],
  125,
  126,
  37,
  130,
  37,
  37,
  c,
  [154, 8],
  37,
  148,
  37,
  c,
  [154, 6],
  37,
  37,
  c,
  [154, 3],
  s,
  [37, 37],
  133,
  37,
  37,
  c,
  [154, 64],
  c,
  [1892, 10],
  221,
  c,
  [2466, 32],
  221,
  221,
  c,
  [1891, 7],
  c,
  [4719, 67],
  208,
  c,
  [120, 9],
  s,
  [208, 4],
  120,
  s,
  [208, 7],
  125,
  126,
  208,
  130,
  208,
  208,
  c,
  [131, 8],
  208,
  148,
  208,
  c,
  [131, 6],
  208,
  208,
  c,
  [131, 3],
  s,
  [208, 19],
  69,
  70,
  s,
  [208, 16],
  133,
  208,
  c,
  [89, 10],
  120,
  514,
  c,
  [7405, 36],
  515,
  115,
  c,
  [322, 64],
  179,
  c,
  [3428, 21],
  519,
  520,
  s,
  [382, 66],
  522,
  s,
  [382, 76],
  c,
  [1925, 22],
  s,
  [388, 74],
  c,
  [3003, 58],
  s,
  [388, 12],
  384,
  526,
  s,
  [280, 3],
  136,
  142,
  s,
  [280, 9],
  120,
  s,
  [280, 8],
  126,
  280,
  130,
  280,
  280,
  c,
  [459, 3],
  280,
  c,
  [459, 4],
  s,
  [280, 8],
  157,
  s,
  [280, 4],
  164,
  s,
  [280, 37],
  133,
  280,
  280,
  c,
  [3016, 65],
  c,
  [603, 9],
  528,
  c,
  [3130, 30],
  529,
  c,
  [605, 8],
  s,
  [92, 50],
  531,
  s,
  [92, 39],
  s,
  [96, 27],
  532,
  s,
  [96, 62],
  50,
  c,
  [230, 9],
  s,
  [50, 4],
  120,
  s,
  [50, 7],
  c,
  [239, 5],
  50,
  c,
  [240, 22],
  s,
  [50, 9],
  119,
  s,
  [50, 5],
  121,
  122,
  50,
  50,
  c,
  [254, 4],
  s,
  [50, 14],
  133,
  50,
  50,
  c,
  [873, 64],
  287,
  535,
  287,
  287,
  c,
  [68, 7],
  c,
  [1152, 5],
  c,
  [1151, 59],
  s,
  [256, 9],
  301,
  301,
  c,
  [4, 4],
  c,
  [5, 3],
  s,
  [256, 40],
  537,
  s,
  [327, 11],
  538,
  s,
  [327, 44],
  c,
  [5985, 68],
  c,
  [322, 39],
  540,
  c,
  [65, 25],
  s,
  [406, 9],
  315,
  315,
  c,
  [4, 4],
  c,
  [5, 3],
  s,
  [406, 43],
  s,
  [398, 9],
  316,
  316,
  c,
  [3, 3],
  316,
  s,
  [398, 35],
  c,
  [8461, 40],
  c,
  [8453, 8],
  173,
  179,
  542,
  178,
  c,
  [8438, 3],
  388,
  546,
  289,
  388,
  545,
  c,
  [434, 3],
  290,
  c,
  [2672, 6],
  386,
  386,
  78,
  102,
  386,
  c,
  [2675, 5],
  386,
  c,
  [2676, 11],
  551,
  c,
  [569, 42],
  388,
  420,
  420,
  388,
  c,
  [4, 3],
  s,
  [420, 5],
  c,
  [8, 4],
  388,
  c,
  [6, 3],
  s,
  [388, 4],
  c,
  [23, 12],
  c,
  [9, 8],
  s,
  [420, 13],
  c,
  [1245, 12],
  c,
  [13, 4],
  c,
  [40, 8],
  c,
  [14, 4],
  c,
  [71, 5],
  s,
  [388, 6],
  c,
  [79, 9],
  c,
  [50, 11],
  c,
  [52, 3],
  s,
  [361, 101],
  s,
  [354, 3],
  s,
  [361, 13],
  c,
  [8058, 63],
  c,
  [8057, 39],
  s,
  [358, 3],
  s,
  [362, 13],
  553,
  451,
  c,
  [923, 8],
  c,
  [737, 3],
  c,
  [670, 30],
  c,
  [735, 66],
  c,
  [1440, 34],
  449,
  120,
  s,
  [449, 4],
  c,
  [2046, 34],
  558,
  c,
  [4148, 27],
  c,
  [115, 38],
  s,
  [453, 6],
  330,
  s,
  [453, 3],
  561,
  s,
  [453, 58],
  c,
  [6968, 3],
  562,
  c,
  [137, 64],
  505,
  110,
  114,
  565,
  255,
  203,
  c,
  [258, 9],
  s,
  [203, 4],
  120,
  s,
  [203, 7],
  125,
  126,
  203,
  130,
  203,
  203,
  c,
  [265, 8],
  203,
  148,
  203,
  c,
  [265, 6],
  203,
  203,
  c,
  [265, 3],
  s,
  [203, 19],
  69,
  70,
  s,
  [203, 16],
  133,
  203,
  203,
  205,
  c,
  [90, 9],
  s,
  [205, 4],
  120,
  s,
  [205, 7],
  125,
  126,
  205,
  130,
  205,
  205,
  c,
  [90, 8],
  205,
  148,
  205,
  c,
  [90, 6],
  205,
  205,
  c,
  [90, 3],
  s,
  [205, 19],
  69,
  70,
  s,
  [205, 16],
  133,
  205,
  205,
  235,
  c,
  [90, 9],
  s,
  [235, 4],
  120,
  s,
  [235, 7],
  c,
  [444, 5],
  235,
  c,
  [445, 22],
  s,
  [235, 9],
  119,
  s,
  [235, 5],
  121,
  122,
  235,
  235,
  c,
  [287, 4],
  s,
  [235, 14],
  133,
  235,
  235,
  c,
  [4851, 65],
  567,
  568,
  s,
  [406, 9],
  569,
  s,
  [406, 48],
  s,
  [200, 15],
  570,
  s,
  [200, 74],
  c,
  [215, 12],
  573,
  c,
  [215, 52],
  206,
  c,
  [370, 9],
  s,
  [206, 4],
  120,
  s,
  [206, 7],
  c,
  [370, 5],
  206,
  c,
  [370, 22],
  s,
  [206, 9],
  119,
  s,
  [206, 5],
  121,
  122,
  206,
  206,
  c,
  [102, 4],
  s,
  [206, 14],
  133,
  206,
  206,
  202,
  c,
  [90, 9],
  s,
  [202, 4],
  120,
  s,
  [202, 7],
  125,
  126,
  202,
  130,
  202,
  202,
  c,
  [90, 8],
  202,
  148,
  202,
  c,
  [90, 6],
  202,
  202,
  c,
  [90, 3],
  s,
  [202, 19],
  69,
  70,
  s,
  [202, 16],
  133,
  202,
  202,
  204,
  c,
  [90, 9],
  s,
  [204, 4],
  120,
  s,
  [204, 7],
  125,
  126,
  204,
  130,
  204,
  204,
  c,
  [90, 8],
  204,
  148,
  204,
  c,
  [90, 6],
  204,
  204,
  c,
  [90, 3],
  s,
  [204, 19],
  69,
  70,
  s,
  [204, 16],
  133,
  204,
  204,
  28,
  c,
  [90, 9],
  s,
  [28, 4],
  120,
  s,
  [28, 7],
  c,
  [270, 5],
  28,
  c,
  [270, 22],
  s,
  [28, 9],
  119,
  s,
  [28, 5],
  121,
  122,
  28,
  28,
  c,
  [270, 4],
  s,
  [28, 14],
  133,
  28,
  28,
  41,
  c,
  [90, 9],
  s,
  [41, 4],
  120,
  s,
  [41, 7],
  c,
  [90, 5],
  41,
  c,
  [90, 22],
  s,
  [41, 9],
  119,
  s,
  [41, 5],
  121,
  122,
  41,
  41,
  c,
  [90, 4],
  s,
  [41, 14],
  133,
  41,
  41,
  42,
  c,
  [90, 9],
  s,
  [42, 4],
  120,
  s,
  [42, 7],
  c,
  [90, 5],
  42,
  c,
  [90, 22],
  s,
  [42, 9],
  119,
  s,
  [42, 5],
  121,
  122,
  42,
  42,
  c,
  [90, 4],
  s,
  [42, 14],
  133,
  42,
  42,
  43,
  c,
  [90, 9],
  s,
  [43, 4],
  120,
  s,
  [43, 7],
  125,
  126,
  43,
  130,
  43,
  43,
  c,
  [90, 8],
  43,
  148,
  43,
  c,
  [90, 6],
  43,
  43,
  c,
  [90, 3],
  s,
  [43, 9],
  119,
  s,
  [43, 5],
  121,
  122,
  43,
  43,
  c,
  [90, 4],
  s,
  [43, 14],
  133,
  43,
  43,
  44,
  c,
  [90, 9],
  s,
  [44, 4],
  120,
  s,
  [44, 7],
  c,
  [180, 5],
  44,
  c,
  [180, 22],
  s,
  [44, 9],
  119,
  s,
  [44, 5],
  121,
  122,
  44,
  44,
  c,
  [90, 4],
  s,
  [44, 14],
  133,
  44,
  44,
  47,
  c,
  [90, 9],
  s,
  [47, 4],
  120,
  s,
  [47, 7],
  c,
  [90, 4],
  47,
  47,
  c,
  [90, 22],
  s,
  [47, 9],
  119,
  s,
  [47, 5],
  121,
  122,
  47,
  47,
  c,
  [90, 4],
  s,
  [47, 14],
  133,
  47,
  47,
  410,
  c,
  [90, 9],
  s,
  [410, 4],
  120,
  s,
  [410, 7],
  c,
  [180, 5],
  410,
  c,
  [90, 22],
  s,
  [410, 9],
  119,
  s,
  [410, 5],
  121,
  122,
  410,
  410,
  c,
  [90, 4],
  s,
  [410, 14],
  133,
  410,
  410,
  s,
  [91, 50],
  531,
  s,
  [91, 39],
  c,
  [3840, 10],
  574,
  c,
  [3839, 35],
  179,
  110,
  114,
  c,
  [3609, 22],
  579,
  287,
  287,
  578,
  554,
  527,
  s,
  [554, 3],
  581,
  582,
  554,
  527,
  527,
  556,
  530,
  s,
  [556, 4],
  530,
  530,
  584,
  583,
  585,
  c,
  [47, 4],
  587,
  c,
  [47, 15],
  590,
  371,
  381,
  593,
  599,
  595,
  598,
  100,
  600,
  c,
  [3851, 19],
  c,
  [28, 3],
  603,
  384,
  c,
  [3875, 21],
  c,
  [21, 25],
  607,
  c,
  [22, 15],
  609,
  371,
  381,
  244,
  245,
  610,
  c,
  [5392, 3],
  c,
  [6734, 44],
  612,
  133,
  614,
  s,
  [287, 3],
  c,
  [1879, 38],
  c,
  [7336, 27],
  c,
  [115, 9],
  277,
  120,
  s,
  [277, 3],
  c,
  [119, 34],
  277,
  616,
  c,
  [2132, 65],
  c,
  [230, 10],
  10,
  618,
  c,
  [451, 35],
  115,
  619,
  620,
  621,
  c,
  [11155, 4],
  607,
  607,
  288,
  607,
  607,
  624,
  100,
  287,
  627,
  287,
  628,
  s,
  [642, 4],
  629,
  630,
  c,
  [7360, 3],
  632,
  c,
  [140, 64],
  634,
  635,
  611,
  c,
  [143, 9],
  s,
  [611, 4],
  120,
  s,
  [611, 7],
  125,
  126,
  611,
  130,
  611,
  611,
  c,
  [153, 8],
  611,
  148,
  611,
  c,
  [153, 6],
  611,
  611,
  c,
  [153, 3],
  s,
  [611, 19],
  69,
  70,
  s,
  [611, 16],
  133,
  611,
  611,
  636,
  637,
  287,
  639,
  s,
  [629, 4],
  640,
  414,
  c,
  [11264, 7],
  78,
  102,
  288,
  c,
  [168, 4],
  288,
  c,
  [169, 52],
  643,
  644,
  417,
  287,
  287,
  645,
  c,
  [5929, 13],
  647,
  c,
  [5929, 53],
  649,
  650,
  s,
  [471, 55],
  652,
  s,
  [471, 42],
  c,
  [6667, 66],
  c,
  [548, 10],
  655,
  c,
  [4838, 36],
  233,
  c,
  [7413, 10],
  s,
  [233, 3],
  120,
  s,
  [233, 7],
  c,
  [57, 5],
  233,
  c,
  [58, 22],
  s,
  [233, 9],
  119,
  s,
  [233, 5],
  121,
  122,
  233,
  233,
  c,
  [74, 4],
  s,
  [233, 14],
  133,
  233,
  233,
  c,
  [9256, 384],
  s,
  [406, 9],
  662,
  s,
  [406, 52],
  s,
  [252, 9],
  595,
  595,
  c,
  [4, 6],
  s,
  [252, 26],
  595,
  169,
  169,
  c,
  [7632, 16],
  c,
  [252, 90],
  c,
  [7601, 42],
  665,
  667,
  666,
  233,
  670,
  232,
  231,
  668,
  671,
  s,
  [46, 9],
  233,
  46,
  232,
  s,
  [46, 27],
  231,
  672,
  s,
  [46, 9],
  c,
  [902, 76],
  c,
  [900, 28],
  676,
  c,
  [901, 7],
  186,
  186,
  c,
  [13064, 3],
  c,
  [10748, 80],
  c,
  [75, 24],
  236,
  c,
  [75, 14],
  236,
  236,
  c,
  [10898, 109],
  c,
  [10973, 76],
  c,
  [544, 62],
  c,
  [485, 66],
  211,
  c,
  [486, 9],
  s,
  [211, 4],
  120,
  s,
  [211, 7],
  125,
  126,
  211,
  130,
  211,
  211,
  c,
  [498, 8],
  211,
  148,
  211,
  c,
  [225, 6],
  211,
  211,
  c,
  [498, 3],
  s,
  [211, 19],
  69,
  70,
  s,
  [211, 16],
  133,
  211,
  211,
  s,
  [406, 10],
  233,
  s,
  [406, 9],
  232,
  s,
  [406, 30],
  231,
  406,
  685,
  s,
  [406, 36],
  s,
  [473, 54],
  687,
  c,
  [8141, 36],
  s,
  [132, 10],
  692,
  s,
  [132, 9],
  691,
  s,
  [132, 30],
  690,
  132,
  689,
  s,
  [132, 36],
  c,
  [1103, 64],
  100,
  c,
  [2740, 3],
  697,
  c,
  [2645, 21],
  384,
  c,
  [8071, 3],
  700,
  c,
  [522, 24],
  702,
  c,
  [657, 54],
  704,
  c,
  [163, 52],
  115,
  706,
  707,
  115,
  708,
  244,
  245,
  s,
  [288, 3],
  c,
  [2766, 3],
  710,
  711,
  c,
  [10725, 130],
  c,
  [64, 128],
  s,
  [717, 4, 1],
  287,
  287,
  722,
  322,
  322,
  723,
  s,
  [322, 3],
  478,
  479,
  725,
  484,
  483,
  727,
  451,
  287,
  244,
  245,
  c,
  [286, 3],
  c,
  [90, 64],
  399,
  c,
  [951, 9],
  s,
  [399, 4],
  120,
  s,
  [399, 7],
  c,
  [1448, 5],
  399,
  c,
  [1449, 22],
  s,
  [399, 9],
  119,
  s,
  [399, 5],
  121,
  122,
  399,
  399,
  c,
  [102, 4],
  s,
  [399, 14],
  133,
  399,
  399,
  c,
  [8789, 129],
  c,
  [12133, 3],
  c,
  [3338, 44],
  735,
  133,
  239,
  c,
  [47, 9],
  s,
  [239, 4],
  120,
  s,
  [239, 7],
  c,
  [58, 5],
  239,
  c,
  [59, 22],
  s,
  [239, 9],
  119,
  s,
  [239, 5],
  121,
  122,
  239,
  239,
  c,
  [75, 4],
  s,
  [239, 14],
  133,
  239,
  239,
  s,
  [240, 65],
  116,
  117,
  s,
  [240, 23],
  c,
  [8952, 3],
  c,
  [229, 10],
  737,
  c,
  [2788, 35],
  c,
  [46, 10],
  738,
  c,
  [46, 45],
  739,
  c,
  [3428, 36],
  740,
  c,
  [1116, 3],
  741,
  742,
  380,
  c,
  [442, 5],
  s,
  [380, 7],
  275,
  s,
  [380, 5],
  78,
  380,
  380,
  102,
  380,
  380,
  c,
  [961, 5],
  380,
  62,
  63,
  s,
  [380, 6],
  c,
  [466, 4],
  s,
  [380, 20],
  99,
  380,
  c,
  [989, 4],
  380,
  c,
  [6330, 4],
  380,
  36,
  s,
  [380, 5],
  37,
  380,
  7,
  380,
  108,
  s,
  [380, 5],
  74,
  380,
  380,
  c,
  [505, 5],
  380,
  380,
  109,
  53,
  380,
  86,
  s,
  [380, 3],
  88,
  380,
  380,
  c,
  [513, 10],
  380,
  c,
  [514, 4],
  s,
  [380, 5],
  c,
  [519, 4],
  380,
  c,
  [520, 7],
  c,
  [148, 3],
  745,
  s,
  [364, 68],
  384,
  s,
  [364, 6],
  747,
  s,
  [364, 68],
  s,
  [369, 68],
  384,
  s,
  [369, 74],
  c,
  [487, 10],
  749,
  c,
  [3368, 36],
  c,
  [1295, 69],
  754,
  c,
  [1489, 65],
  c,
  [2367, 70],
  155,
  156,
  c,
  [57, 9],
  51,
  c,
  [264, 9],
  s,
  [51, 4],
  120,
  s,
  [51, 7],
  c,
  [273, 5],
  51,
  c,
  [274, 22],
  s,
  [51, 9],
  119,
  s,
  [51, 5],
  121,
  122,
  51,
  51,
  c,
  [113, 4],
  s,
  [51, 14],
  133,
  51,
  51,
  758,
  759,
  760,
  c,
  [309, 6],
  288,
  78,
  309,
  c,
  [4030, 16],
  c,
  [7575, 49],
  c,
  [7649, 3],
  762,
  c,
  [1812, 6],
  312,
  312,
  78,
  102,
  312,
  c,
  [79, 4],
  766,
  312,
  c,
  [327, 27],
  767,
  c,
  [2552, 38],
  770,
  c,
  [3037, 62],
  449,
  120,
  771,
  c,
  [6733, 38],
  772,
  s,
  [21, 9],
  317,
  317,
  21,
  177,
  s,
  [317, 3],
  c,
  [7411, 37],
  c,
  [7410, 4],
  c,
  [174, 6],
  384,
  384,
  78,
  102,
  384,
  c,
  [571, 5],
  384,
  c,
  [7401, 54],
  371,
  c,
  [180, 9],
  s,
  [371, 4],
  120,
  s,
  [371, 7],
  c,
  [187, 5],
  371,
  c,
  [188, 22],
  s,
  [371, 9],
  119,
  s,
  [371, 5],
  121,
  122,
  371,
  371,
  c,
  [102, 4],
  s,
  [371, 14],
  133,
  371,
  371,
  s,
  [372, 65],
  116,
  117,
  s,
  [372, 23],
  c,
  [2308, 66],
  777,
  c,
  [7290, 9],
  453,
  561,
  c,
  [642, 5],
  453,
  c,
  [7294, 53],
  781,
  780,
  553,
  287,
  287,
  451,
  c,
  [322, 9],
  447,
  120,
  s,
  [447, 4],
  c,
  [1610, 44],
  450,
  120,
  s,
  [450, 4],
  c,
  [50, 35],
  330,
  c,
  [1982, 44],
  784,
  133,
  s,
  [406, 9],
  785,
  c,
  [11767, 62],
  c,
  [4383, 192],
  c,
  [6893, 53],
  790,
  c,
  [364, 10],
  206,
  791,
  c,
  [1538, 99],
  c,
  [1940, 3],
  793,
  c,
  [5973, 6],
  288,
  382,
  288,
  c,
  [3209, 17],
  797,
  798,
  100,
  c,
  [3233, 4],
  801,
  c,
  [5879, 21],
  804,
  c,
  [22, 4],
  802,
  c,
  [5880, 14],
  805,
  c,
  [3280, 21],
  809,
  807,
  287,
  287,
  c,
  [5995, 22],
  377,
  582,
  383,
  376,
  582,
  582,
  382,
  813,
  582,
  c,
  [27, 15],
  812,
  371,
  381,
  s,
  [557, 18],
  584,
  s,
  [557, 67],
  583,
  s,
  [557, 16],
  585,
  s,
  [557, 5],
  s,
  [527, 60],
  582,
  s,
  [527, 48],
  814,
  815,
  287,
  287,
  599,
  598,
  100,
  818,
  819,
  c,
  [349, 5],
  c,
  [277, 18],
  s,
  [544, 10],
  377,
  s,
  [544, 5],
  383,
  544,
  544,
  376,
  544,
  544,
  382,
  813,
  544,
  370,
  s,
  [544, 30],
  379,
  384,
  s,
  [544, 27],
  380,
  544,
  544,
  c,
  [102, 8],
  544,
  c,
  [103, 3],
  s,
  [544, 6],
  c,
  [359, 3],
  822,
  c,
  [132, 22],
  s,
  [535, 18],
  584,
  s,
  [535, 67],
  583,
  s,
  [535, 16],
  585,
  s,
  [535, 5],
  s,
  [536, 18],
  584,
  s,
  [536, 67],
  583,
  s,
  [536, 16],
  585,
  s,
  [536, 5],
  377,
  383,
  824,
  376,
  828,
  382,
  827,
  c,
  [243, 15],
  826,
  c,
  [6624, 21],
  c,
  [722, 3],
  s,
  [517, 18],
  584,
  s,
  [517, 67],
  583,
  s,
  [517, 16],
  585,
  s,
  [517, 5],
  c,
  [4088, 3],
  830,
  832,
  833,
  831,
  c,
  [6239, 14],
  c,
  [6240, 27],
  288,
  c,
  [6666, 27],
  c,
  [6735, 4],
  c,
  [1101, 9],
  278,
  120,
  s,
  [278, 3],
  c,
  [1103, 34],
  278,
  133,
  836,
  837,
  838,
  s,
  [288, 3],
  c,
  [6539, 3],
  s,
  [637, 4],
  100,
  841,
  100,
  100,
  627,
  c,
  [70, 11],
  120,
  845,
  c,
  [1170, 35],
  288,
  414,
  100,
  847,
  s,
  [626, 4],
  100,
  849,
  850,
  100,
  637,
  287,
  852,
  c,
  [1426, 128],
  596,
  c,
  [190, 9],
  s,
  [596, 4],
  120,
  s,
  [596, 7],
  c,
  [200, 5],
  596,
  c,
  [201, 22],
  s,
  [596, 9],
  119,
  s,
  [596, 5],
  121,
  122,
  596,
  596,
  c,
  [102, 4],
  s,
  [596, 14],
  133,
  596,
  596,
  c,
  [3928, 65],
  c,
  [625, 3],
  858,
  382,
  857,
  c,
  [892, 18],
  s,
  [479, 10],
  861,
  s,
  [479, 7],
  869,
  479,
  479,
  860,
  s,
  [479, 58],
  865,
  868,
  s,
  [479, 5],
  870,
  871,
  100,
  s,
  [479, 6],
  864,
  100,
  230,
  c,
  [277, 9],
  s,
  [230, 4],
  120,
  s,
  [230, 7],
  c,
  [277, 5],
  230,
  c,
  [277, 22],
  s,
  [230, 9],
  119,
  s,
  [230, 5],
  121,
  122,
  230,
  230,
  c,
  [224, 4],
  s,
  [230, 14],
  133,
  230,
  230,
  c,
  [277, 5],
  s,
  [284, 7],
  101,
  284,
  78,
  284,
  c,
  [286, 5],
  284,
  62,
  63,
  s,
  [284, 5],
  c,
  [291, 4],
  s,
  [284, 20],
  99,
  284,
  c,
  [312, 3],
  284,
  c,
  [313, 3],
  284,
  36,
  284,
  c,
  [315, 3],
  284,
  284,
  c,
  [317, 8],
  284,
  86,
  284,
  88,
  284,
  c,
  [320, 14],
  284,
  c,
  [321, 11],
  234,
  c,
  [199, 9],
  s,
  [234, 4],
  120,
  s,
  [234, 7],
  c,
  [199, 5],
  234,
  c,
  [199, 22],
  s,
  [234, 9],
  119,
  s,
  [234, 5],
  121,
  122,
  234,
  234,
  c,
  [106, 4],
  s,
  [234, 14],
  133,
  234,
  c,
  [89, 10],
  874,
  c,
  [14345, 36],
  c,
  [2336, 37],
  875,
  c,
  [46, 17],
  c,
  [14289, 31],
  877,
  c,
  [49, 48],
  879,
  c,
  [49, 8],
  s,
  [252, 40],
  881,
  882,
  883,
  c,
  [6435, 79],
  c,
  [171, 9],
  146,
  146,
  c,
  [268, 28],
  146,
  c,
  [170, 8],
  667,
  885,
  c,
  [5941, 73],
  c,
  [6009, 129],
  451,
  448,
  891,
  450,
  c,
  [4, 4],
  c,
  [6568, 76],
  183,
  183,
  c,
  [2564, 40],
  c,
  [3972, 70],
  s,
  [190, 3],
  532,
  s,
  [190, 3],
  s,
  [191, 3],
  532,
  s,
  [191, 3],
  s,
  [192, 3],
  532,
  s,
  [192, 3],
  s,
  [193, 3],
  532,
  s,
  [193, 3],
  667,
  896,
  216,
  c,
  [153, 9],
  s,
  [216, 4],
  120,
  s,
  [216, 7],
  125,
  126,
  216,
  130,
  216,
  216,
  c,
  [163, 8],
  216,
  148,
  216,
  c,
  [121, 6],
  216,
  216,
  c,
  [163, 3],
  s,
  [216, 19],
  69,
  70,
  s,
  [216, 16],
  133,
  216,
  216,
  c,
  [308, 66],
  s,
  [121, 10],
  692,
  s,
  [121, 9],
  691,
  s,
  [121, 30],
  690,
  121,
  900,
  s,
  [121, 36],
  c,
  [788, 64],
  692,
  691,
  690,
  904,
  903,
  c,
  [69, 12],
  905,
  c,
  [4211, 28],
  c,
  [72, 13],
  c,
  [17654, 22],
  c,
  [139, 16],
  c,
  [69, 47],
  473,
  s,
  [21, 9],
  s,
  [473, 4],
  c,
  [5, 3],
  177,
  c,
  [8, 5],
  c,
  [17, 5],
  s,
  [21, 22],
  s,
  [473, 4],
  174,
  c,
  [45, 7],
  c,
  [43, 5],
  c,
  [47, 6],
  473,
  473,
  173,
  179,
  473,
  473,
  178,
  473,
  110,
  114,
  c,
  [28, 6],
  461,
  s,
  [474, 12],
  913,
  s,
  [474, 77],
  c,
  [12773, 97],
  s,
  [140, 52],
  389,
  c,
  [5, 9],
  s,
  [140, 31],
  c,
  [3429, 3],
  916,
  c,
  [738, 24],
  918,
  c,
  [17252, 108],
  114,
  c,
  [961, 9],
  s,
  [114, 4],
  120,
  s,
  [114, 7],
  c,
  [1123, 5],
  114,
  c,
  [1124, 22],
  s,
  [114, 9],
  119,
  s,
  [114, 5],
  121,
  122,
  114,
  114,
  c,
  [102, 4],
  s,
  [114, 14],
  133,
  114,
  114,
  922,
  115,
  923,
  c,
  [159, 66],
  c,
  [6473, 5],
  c,
  [5, 5],
  108,
  c,
  [169, 9],
  s,
  [108, 4],
  120,
  s,
  [108, 7],
  125,
  126,
  108,
  130,
  108,
  108,
  c,
  [169, 8],
  108,
  148,
  108,
  c,
  [169, 6],
  108,
  108,
  c,
  [169, 3],
  s,
  [108, 37],
  133,
  108,
  c,
  [89, 10],
  415,
  415,
  120,
  s,
  [415, 4],
  c,
  [1376, 27],
  415,
  c,
  [1921, 17],
  417,
  417,
  120,
  s,
  [417, 4],
  c,
  [52, 27],
  417,
  c,
  [52, 17],
  424,
  424,
  120,
  s,
  [424, 5],
  c,
  [53, 27],
  424,
  c,
  [53, 7],
  424,
  133,
  424,
  928,
  s,
  [425, 8],
  930,
  478,
  479,
  288,
  288,
  c,
  [15196, 4],
  932,
  933,
  244,
  320,
  320,
  245,
  s,
  [320, 3],
  936,
  243,
  241,
  478,
  479,
  c,
  [1165, 64],
  938,
  939,
  c,
  [15276, 3],
  453,
  561,
  c,
  [355, 3],
  942,
  118,
  c,
  [163, 9],
  s,
  [118, 4],
  120,
  s,
  [118, 7],
  c,
  [167, 5],
  118,
  c,
  [168, 22],
  s,
  [118, 9],
  119,
  s,
  [118, 5],
  121,
  122,
  118,
  118,
  c,
  [113, 4],
  s,
  [118, 14],
  133,
  c,
  [31, 3],
  s,
  [119, 64],
  116,
  117,
  s,
  [119, 23],
  c,
  [9836, 11],
  943,
  c,
  [1818, 35],
  401,
  c,
  [48, 9],
  s,
  [401, 4],
  120,
  s,
  [401, 7],
  c,
  [57, 5],
  401,
  c,
  [58, 22],
  s,
  [401, 9],
  119,
  s,
  [401, 5],
  121,
  122,
  401,
  401,
  c,
  [74, 4],
  s,
  [401, 14],
  133,
  401,
  401,
  505,
  944,
  c,
  [6870, 3],
  945,
  179,
  s,
  [363, 75],
  389,
  s,
  [363, 68],
  s,
  [366, 68],
  384,
  s,
  [366, 74],
  c,
  [3086, 109],
  c,
  [492, 9],
  950,
  120,
  c,
  [6460, 36],
  951,
  c,
  [22125, 3],
  246,
  c,
  [52, 9],
  s,
  [246, 4],
  120,
  s,
  [246, 7],
  c,
  [61, 5],
  246,
  c,
  [62, 22],
  s,
  [246, 9],
  119,
  s,
  [246, 5],
  121,
  122,
  246,
  246,
  c,
  [78, 4],
  s,
  [246, 14],
  133,
  246,
  246,
  s,
  [247, 65],
  116,
  117,
  s,
  [247, 23],
  c,
  [15060, 73],
  s,
  [95, 27],
  532,
  s,
  [95, 62],
  c,
  [4084, 71],
  c,
  [14134, 64],
  c,
  [71, 71],
  957,
  759,
  760,
  c,
  [551, 9],
  303,
  303,
  120,
  s,
  [303, 3],
  c,
  [5528, 47],
  c,
  [4125, 53],
  c,
  [115, 9],
  306,
  306,
  120,
  s,
  [306, 3],
  c,
  [115, 100],
  960,
  375,
  c,
  [117, 9],
  s,
  [375, 4],
  120,
  s,
  [375, 7],
  c,
  [123, 5],
  375,
  c,
  [124, 22],
  s,
  [375, 9],
  119,
  s,
  [375, 5],
  121,
  122,
  375,
  375,
  c,
  [103, 4],
  s,
  [375, 14],
  133,
  375,
  375,
  s,
  [376, 65],
  116,
  117,
  s,
  [376, 23],
  c,
  [246, 8],
  454,
  c,
  [247, 4],
  454,
  c,
  [622, 58],
  c,
  [13833, 66],
  c,
  [66, 60],
  963,
  c,
  [819, 64],
  166,
  c,
  [443, 9],
  s,
  [166, 4],
  120,
  s,
  [166, 7],
  125,
  126,
  166,
  130,
  166,
  166,
  c,
  [443, 8],
  166,
  148,
  166,
  c,
  [443, 6],
  166,
  166,
  c,
  [443, 3],
  s,
  [166, 19],
  69,
  70,
  s,
  [166, 16],
  133,
  166,
  166,
  167,
  c,
  [90, 9],
  s,
  [167, 4],
  120,
  s,
  [167, 7],
  125,
  126,
  167,
  130,
  167,
  167,
  c,
  [90, 8],
  167,
  148,
  167,
  c,
  [90, 6],
  167,
  167,
  c,
  [90, 3],
  s,
  [167, 19],
  69,
  70,
  s,
  [167, 16],
  133,
  167,
  167,
  c,
  [4263, 70],
  c,
  [6503, 53],
  c,
  [2120, 10],
  c,
  [6501, 36],
  c,
  [12303, 42],
  c,
  [3050, 3],
  969,
  c,
  [46, 24],
  c,
  [5749, 7],
  971,
  c,
  [5750, 36],
  s,
  [542, 18],
  584,
  s,
  [542, 67],
  583,
  s,
  [542, 16],
  585,
  s,
  [542, 5],
  973,
  974,
  c,
  [6655, 21],
  c,
  [5258, 3],
  809,
  287,
  287,
  976,
  s,
  [559, 18],
  584,
  s,
  [559, 67],
  583,
  s,
  [559, 16],
  585,
  s,
  [559, 5],
  c,
  [270, 22],
  599,
  288,
  288,
  598,
  100,
  979,
  980,
  c,
  [6455, 3],
  981,
  377,
  573,
  573,
  383,
  376,
  983,
  382,
  984,
  573,
  c,
  [173, 18],
  985,
  986,
  s,
  [543, 10],
  377,
  s,
  [543, 5],
  383,
  543,
  543,
  376,
  543,
  543,
  382,
  813,
  543,
  370,
  s,
  [543, 30],
  379,
  384,
  s,
  [543, 27],
  380,
  543,
  543,
  c,
  [104, 8],
  543,
  c,
  [105, 3],
  s,
  [543, 6],
  c,
  [6457, 3],
  c,
  [6456, 22],
  s,
  [546, 10],
  377,
  s,
  [546, 5],
  383,
  546,
  546,
  376,
  546,
  546,
  382,
  813,
  546,
  370,
  s,
  [546, 30],
  379,
  384,
  s,
  [546, 27],
  380,
  546,
  546,
  c,
  [102, 8],
  546,
  c,
  [103, 3],
  s,
  [546, 6],
  c,
  [131, 3],
  s,
  [519, 18],
  584,
  s,
  [519, 67],
  583,
  s,
  [519, 16],
  585,
  s,
  [519, 5],
  c,
  [411, 22],
  c,
  [22, 19],
  990,
  c,
  [750, 8],
  991,
  c,
  [6500, 18],
  c,
  [13024, 65],
  c,
  [65, 65],
  832,
  833,
  994,
  995,
  c,
  [6367, 3],
  100,
  838,
  998,
  414,
  100,
  100,
  1001,
  c,
  [12677, 3],
  1002,
  c,
  [3156, 11],
  1003,
  c,
  [1037, 35],
  s,
  [514, 10],
  377,
  s,
  [514, 5],
  383,
  514,
  514,
  376,
  514,
  514,
  382,
  813,
  514,
  370,
  s,
  [514, 30],
  379,
  384,
  s,
  [514, 27],
  380,
  514,
  514,
  c,
  [297, 8],
  514,
  c,
  [298, 3],
  s,
  [514, 6],
  c,
  [613, 22],
  c,
  [373, 22],
  c,
  [22, 3],
  s,
  [469, 12],
  1007,
  s,
  [469, 77],
  861,
  c,
  [6273, 3],
  1010,
  c,
  [6215, 3],
  c,
  [6210, 3],
  864,
  1011,
  869,
  1013,
  c,
  [9, 6],
  s,
  [484, 12],
  1014,
  s,
  [484, 77],
  1018,
  1017,
  100,
  388,
  361,
  100,
  s,
  [505, 15],
  1023,
  s,
  [505, 36],
  388,
  505,
  505,
  361,
  s,
  [505, 35],
  1024,
  1026,
  100,
  s,
  [472, 12],
  913,
  s,
  [472, 84],
  c,
  [10254, 10],
  s,
  [231, 4],
  120,
  s,
  [231, 7],
  c,
  [608, 5],
  231,
  c,
  [6080, 23],
  s,
  [231, 8],
  119,
  s,
  [231, 5],
  121,
  122,
  231,
  231,
  c,
  [625, 4],
  s,
  [231, 14],
  133,
  231,
  231,
  c,
  [21995, 199],
  c,
  [11336, 125],
  c,
  [2171, 58],
  667,
  1035,
  c,
  [1072, 10],
  177,
  177,
  c,
  [6046, 110],
  c,
  [122, 10],
  180,
  180,
  c,
  [122, 35],
  185,
  185,
  531,
  1036,
  214,
  c,
  [52, 9],
  s,
  [214, 4],
  120,
  s,
  [214, 7],
  125,
  126,
  214,
  130,
  214,
  214,
  c,
  [62, 8],
  214,
  148,
  214,
  c,
  [62, 6],
  214,
  214,
  c,
  [62, 3],
  s,
  [214, 19],
  69,
  70,
  s,
  [214, 16],
  133,
  214,
  214,
  c,
  [5847, 3],
  c,
  [5706, 90],
  c,
  [480, 12],
  1039,
  c,
  [5866, 57],
  1042,
  1041,
  s,
  [11, 3],
  116,
  117,
  c,
  [259, 9],
  12,
  120,
  12,
  12,
  c,
  [312, 35],
  1043,
  1042,
  s,
  [130, 10],
  692,
  s,
  [130, 9],
  691,
  s,
  [130, 30],
  690,
  130,
  1045,
  s,
  [130, 36],
  288,
  100,
  1047,
  1048,
  c,
  [767, 66],
  110,
  c,
  [211, 9],
  s,
  [110, 4],
  120,
  s,
  [110, 7],
  c,
  [219, 5],
  110,
  c,
  [220, 22],
  s,
  [110, 9],
  119,
  s,
  [110, 5],
  121,
  122,
  110,
  110,
  c,
  [102, 4],
  s,
  [110, 14],
  133,
  110,
  110,
  115,
  c,
  [90, 9],
  s,
  [115, 4],
  120,
  s,
  [115, 7],
  c,
  [90, 5],
  115,
  c,
  [90, 22],
  s,
  [115, 9],
  119,
  s,
  [115, 5],
  121,
  122,
  115,
  115,
  c,
  [90, 4],
  s,
  [115, 14],
  133,
  115,
  115,
  1051,
  107,
  c,
  [91, 9],
  s,
  [107, 4],
  120,
  s,
  [107, 7],
  125,
  126,
  107,
  130,
  107,
  107,
  c,
  [91, 8],
  107,
  148,
  107,
  c,
  [91, 6],
  107,
  107,
  c,
  [91, 3],
  s,
  [107, 37],
  133,
  107,
  107,
  c,
  [8503, 3],
  c,
  [15162, 39],
  c,
  [339, 26],
  c,
  [5483, 4],
  c,
  [4, 4],
  c,
  [72, 64],
  s,
  [326, 5],
  484,
  483,
  c,
  [236, 9],
  324,
  324,
  120,
  s,
  [324, 3],
  c,
  [630, 35],
  244,
  245,
  454,
  c,
  [5886, 4],
  330,
  c,
  [5887, 4],
  242,
  c,
  [63, 9],
  s,
  [242, 4],
  120,
  s,
  [242, 7],
  c,
  [69, 5],
  242,
  c,
  [70, 22],
  s,
  [242, 9],
  119,
  s,
  [242, 5],
  121,
  122,
  242,
  242,
  c,
  [86, 4],
  s,
  [242, 14],
  133,
  242,
  242,
  s,
  [243, 65],
  116,
  117,
  s,
  [243, 23],
  c,
  [179, 9],
  1058,
  c,
  [4991, 37],
  1059,
  c,
  [4991, 3],
  49,
  c,
  [52, 4],
  49,
  155,
  156,
  s,
  [49, 6],
  120,
  s,
  [49, 8],
  126,
  49,
  130,
  49,
  49,
  c,
  [62, 8],
  49,
  148,
  49,
  c,
  [62, 6],
  s,
  [49, 4],
  164,
  s,
  [49, 37],
  133,
  49,
  49,
  c,
  [11162, 3],
  1060,
  c,
  [2520, 11],
  1061,
  c,
  [8133, 45],
  10,
  1062,
  c,
  [1495, 40],
  c,
  [965, 7],
  1064,
  c,
  [965, 53],
  c,
  [10687, 4],
  1067,
  c,
  [8107, 122],
  1070,
  1071,
  c,
  [3757, 3],
  1072,
  c,
  [2986, 6],
  1073,
  c,
  [9486, 37],
  c,
  [10160, 4],
  c,
  [2704, 22],
  585,
  383,
  376,
  585,
  585,
  382,
  813,
  585,
  c,
  [10182, 18],
  1076,
  c,
  [97, 6],
  1077,
  c,
  [97, 18],
  c,
  [9986, 3],
  c,
  [3, 3],
  1080,
  377,
  570,
  570,
  383,
  376,
  570,
  382,
  813,
  570,
  c,
  [60, 18],
  c,
  [131, 45],
  c,
  [22, 21],
  1084,
  s,
  [545, 10],
  377,
  s,
  [545, 5],
  383,
  545,
  545,
  376,
  545,
  545,
  382,
  813,
  545,
  370,
  s,
  [545, 30],
  379,
  384,
  s,
  [545, 27],
  380,
  545,
  545,
  c,
  [103, 8],
  545,
  c,
  [104, 3],
  s,
  [545, 6],
  c,
  [176, 6],
  c,
  [235, 3],
  1085,
  c,
  [235, 18],
  s,
  [522, 18],
  584,
  s,
  [522, 67],
  583,
  s,
  [522, 16],
  585,
  s,
  [522, 5],
  1086,
  c,
  [9721, 4],
  1088,
  1089,
  c,
  [141, 6],
  1090,
  c,
  [141, 18],
  s,
  [516, 10],
  377,
  s,
  [516, 5],
  383,
  516,
  516,
  376,
  516,
  c,
  [43, 3],
  516,
  370,
  s,
  [516, 30],
  379,
  384,
  s,
  [516, 27],
  380,
  516,
  516,
  c,
  [102, 8],
  516,
  c,
  [103, 3],
  s,
  [516, 6],
  c,
  [109, 3],
  1091,
  1007,
  287,
  1092,
  1014,
  484,
  287,
  1093,
  869,
  c,
  [3124, 6],
  1095,
  1014,
  287,
  287,
  c,
  [11, 7],
  1098,
  869,
  288,
  288,
  c,
  [10, 6],
  1099,
  1100,
  c,
  [3051, 52],
  s,
  [505, 38],
  1102,
  1104,
  100,
  384,
  388,
  361,
  c,
  [16848, 4],
  1110,
  382,
  1109,
  c,
  [588, 37],
  c,
  [22, 3],
  1112,
  1113,
  c,
  [9074, 40],
  1115,
  c,
  [9123, 48],
  1117,
  c,
  [49, 8],
  157,
  c,
  [50, 9],
  s,
  [157, 4],
  120,
  s,
  [157, 7],
  125,
  126,
  157,
  130,
  157,
  157,
  c,
  [60, 8],
  157,
  148,
  157,
  c,
  [60, 6],
  157,
  157,
  c,
  [60, 3],
  s,
  [157, 19],
  69,
  70,
  s,
  [157, 16],
  133,
  157,
  157,
  158,
  c,
  [90, 9],
  s,
  [158, 4],
  120,
  s,
  [158, 7],
  125,
  126,
  158,
  130,
  158,
  158,
  c,
  [90, 8],
  158,
  148,
  158,
  c,
  [150, 7],
  158,
  c,
  [90, 3],
  s,
  [158, 19],
  69,
  70,
  s,
  [158, 16],
  133,
  158,
  c,
  [89, 10],
  c,
  [229, 31],
  1118,
  c,
  [11421, 72],
  1121,
  s,
  [129, 10],
  692,
  s,
  [129, 9],
  691,
  s,
  [129, 30],
  690,
  129,
  1123,
  s,
  [129, 36],
  1124,
  1042,
  1125,
  c,
  [158, 6],
  7,
  78,
  102,
  7,
  c,
  [160, 4],
  7,
  c,
  [2662, 57],
  c,
  [2825, 3],
  100,
  111,
  c,
  [284, 9],
  s,
  [111, 4],
  120,
  s,
  [111, 7],
  c,
  [293, 5],
  111,
  c,
  [294, 22],
  s,
  [111, 9],
  119,
  s,
  [111, 5],
  121,
  122,
  111,
  111,
  c,
  [109, 4],
  s,
  [111, 14],
  133,
  111,
  111,
  710,
  711,
  1129,
  c,
  [92, 9],
  426,
  426,
  120,
  s,
  [426, 5],
  c,
  [381, 27],
  426,
  c,
  [380, 7],
  426,
  133,
  426,
  1130,
  c,
  [56, 9],
  321,
  321,
  120,
  s,
  [321, 3],
  c,
  [1796, 44],
  309,
  309,
  120,
  s,
  [309, 3],
  c,
  [6261, 100],
  1132,
  c,
  [549, 64],
  168,
  c,
  [181, 9],
  s,
  [168, 4],
  120,
  s,
  [168, 7],
  125,
  126,
  168,
  130,
  168,
  168,
  c,
  [188, 8],
  168,
  148,
  168,
  c,
  [188, 6],
  168,
  168,
  c,
  [188, 3],
  s,
  [168, 19],
  69,
  70,
  s,
  [168, 16],
  133,
  168,
  168,
  1134,
  1135,
  377,
  583,
  383,
  376,
  583,
  583,
  382,
  813,
  583,
  c,
  [1693, 21],
  c,
  [1333, 3],
  1136,
  c,
  [1376, 18],
  c,
  [5286, 3],
  1137,
  377,
  571,
  571,
  383,
  376,
  571,
  382,
  813,
  571,
  c,
  [56, 24],
  1138,
  c,
  [1905, 21],
  1139,
  c,
  [11416, 24],
  1141,
  382,
  1142,
  c,
  [1191, 18],
  832,
  833,
  1143,
  c,
  [10794, 21],
  1010,
  c,
  [10794, 75],
  c,
  [1456, 3],
  1093,
  c,
  [4, 3],
  1145,
  c,
  [1461, 7],
  1148,
  c,
  [8, 7],
  1150,
  c,
  [8, 7],
  c,
  [1344, 22],
  1152,
  1153,
  c,
  [1489, 90],
  384,
  c,
  [91, 90],
  s,
  [506, 10],
  377,
  s,
  [506, 5],
  383,
  506,
  506,
  376,
  506,
  506,
  382,
  813,
  506,
  370,
  s,
  [506, 30],
  379,
  384,
  s,
  [506, 27],
  380,
  506,
  506,
  c,
  [285, 8],
  506,
  c,
  [286, 3],
  s,
  [506, 6],
  c,
  [5081, 44],
  c,
  [336, 3],
  s,
  [502, 10],
  377,
  s,
  [502, 5],
  383,
  502,
  502,
  376,
  502,
  502,
  382,
  813,
  502,
  370,
  s,
  [502, 30],
  379,
  384,
  s,
  [502, 27],
  380,
  502,
  502,
  c,
  [102, 8],
  502,
  c,
  [103, 3],
  s,
  [502, 6],
  c,
  [153, 3],
  c,
  [352, 90],
  1160,
  c,
  [4665, 137],
  c,
  [10653, 70],
  c,
  [1798, 31],
  1167,
  c,
  [1315, 8],
  c,
  [1568, 3],
  1170,
  c,
  [3165, 11],
  1171,
  c,
  [1366, 35],
  165,
  c,
  [48, 9],
  s,
  [165, 4],
  120,
  s,
  [165, 7],
  125,
  126,
  165,
  130,
  165,
  165,
  c,
  [58, 8],
  165,
  148,
  165,
  c,
  [58, 6],
  165,
  165,
  c,
  [58, 3],
  s,
  [165, 19],
  69,
  70,
  s,
  [165, 16],
  133,
  165,
  165,
  1172,
  377,
  577,
  577,
  383,
  376,
  577,
  382,
  813,
  577,
  c,
  [2928, 62],
  s,
  [481, 12],
  1007,
  s,
  [481, 77],
  1175,
  1176,
  c,
  [2597, 10],
  c,
  [10, 3],
  1178,
  869,
  1180,
  c,
  [12, 6],
  s,
  [495, 10],
  377,
  s,
  [495, 5],
  383,
  495,
  495,
  376,
  495,
  495,
  382,
  813,
  495,
  370,
  s,
  [495, 30],
  379,
  384,
  s,
  [495, 27],
  380,
  495,
  495,
  c,
  [216, 8],
  495,
  c,
  [217, 3],
  s,
  [495, 6],
  c,
  [774, 93],
  1182,
  c,
  [91, 90],
  c,
  [1627, 6],
  1184,
  c,
  [1602, 18],
  s,
  [508, 10],
  377,
  s,
  [508, 5],
  383,
  508,
  508,
  376,
  508,
  508,
  382,
  813,
  508,
  370,
  s,
  [508, 30],
  379,
  384,
  s,
  [508, 27],
  380,
  508,
  508,
  c,
  [102, 8],
  508,
  c,
  [103, 3],
  s,
  [508, 6],
  c,
  [1242, 25],
  149,
  c,
  [722, 9],
  s,
  [149, 4],
  120,
  s,
  [149, 7],
  125,
  126,
  149,
  130,
  149,
  149,
  c,
  [722, 8],
  149,
  c,
  [780, 8],
  149,
  149,
  c,
  [722, 3],
  s,
  [149, 19],
  69,
  70,
  s,
  [149, 16],
  133,
  149,
  149,
  152,
  c,
  [90, 9],
  s,
  [152, 4],
  120,
  s,
  [152, 7],
  125,
  126,
  152,
  130,
  152,
  152,
  c,
  [90, 8],
  152,
  148,
  152,
  c,
  [90, 6],
  152,
  152,
  c,
  [90, 3],
  s,
  [152, 19],
  69,
  70,
  s,
  [152, 16],
  133,
  152,
  152,
  159,
  c,
  [90, 9],
  s,
  [159, 4],
  120,
  s,
  [159, 7],
  125,
  126,
  159,
  130,
  159,
  159,
  c,
  [90, 8],
  159,
  148,
  159,
  c,
  [90, 6],
  159,
  c,
  [960, 4],
  s,
  [159, 19],
  69,
  70,
  s,
  [159, 16],
  133,
  159,
  159,
  c,
  [1158, 66],
  c,
  [358, 3],
  1189,
  382,
  1190,
  c,
  [942, 19],
  578,
  578,
  383,
  376,
  578,
  382,
  813,
  578,
  c,
  [2170, 24],
  1191,
  c,
  [543, 18],
  1192,
  c,
  [871, 3],
  1193,
  c,
  [885, 10],
  c,
  [1691, 23],
  1196,
  c,
  [7874, 9],
  c,
  [62, 14],
  162,
  c,
  [294, 9],
  s,
  [162, 4],
  120,
  s,
  [162, 7],
  125,
  126,
  162,
  130,
  162,
  162,
  c,
  [294, 8],
  162,
  148,
  162,
  c,
  [294, 6],
  162,
  162,
  c,
  [294, 3],
  s,
  [162, 19],
  69,
  70,
  s,
  [162, 16],
  133,
  162,
  162,
  377,
  574,
  574,
  383,
  376,
  574,
  382,
  813,
  574,
  c,
  [1195, 62],
  1199,
  c,
  [219, 3],
  1200,
  377,
  1201,
  c,
  [191, 23],
  1202,
  377,
  575,
  575,
  383,
  376,
  575,
  382,
  813,
  575,
  c,
  [306, 24],
  1203,
  c,
  [53, 18],
  1204,
  1205,
  c,
  [966, 90],
  1207,
  c,
  [91, 90]
])
}),
defaultActions: bda({
  idx: u([
  3,
  6,
  9,
  10,
  11,
  s,
  [14, 9, 1],
  s,
  [24, 4, 1],
  s,
  [46, 8, 1],
  s,
  [64, 9, 1],
  75,
  76,
  77,
  s,
  [79, 7, 1],
  89,
  s,
  [91, 8, 1],
  100,
  s,
  [103, 9, 1],
  113,
  123,
  125,
  126,
  131,
  s,
  [134, 13, 1],
  148,
  s,
  [150, 15, 1],
  166,
  167,
  172,
  175,
  176,
  187,
  190,
  191,
  194,
  195,
  196,
  199,
  202,
  230,
  236,
  237,
  238,
  246,
  250,
  251,
  252,
  254,
  256,
  257,
  259,
  260,
  261,
  273,
  277,
  283,
  287,
  288,
  299,
  300,
  301,
  304,
  306,
  317,
  s,
  [320, 4, 1],
  326,
  332,
  334,
  336,
  354,
  356,
  357,
  363,
  s,
  [367, 9, 1],
  385,
  387,
  390,
  402,
  413,
  422,
  426,
  441,
  447,
  453,
  455,
  465,
  468,
  470,
  478,
  479,
  481,
  483,
  487,
  488,
  492,
  494,
  495,
  498,
  502,
  503,
  504,
  507,
  514,
  515,
  517,
  519,
  522,
  525,
  530,
  542,
  s,
  [544, 4, 1],
  550,
  555,
  558,
  560,
  562,
  563,
  565,
  574,
  575,
  576,
  590,
  592,
  593,
  596,
  597,
  609,
  610,
  612,
  616,
  s,
  [618, 4, 1],
  623,
  624,
  625,
  632,
  634,
  635,
  636,
  642,
  645,
  648,
  649,
  653,
  666,
  669,
  673,
  675,
  682,
  684,
  688,
  695,
  699,
  701,
  706,
  707,
  709,
  712,
  719,
  723,
  729,
  s,
  [735, 5, 1],
  742,
  743,
  744,
  746,
  748,
  755,
  758,
  761,
  765,
  767,
  769,
  772,
  773,
  774,
  777,
  778,
  783,
  784,
  789,
  791,
  s,
  [793, 4, 1],
  799,
  802,
  805,
  807,
  812,
  814,
  824,
  826,
  830,
  831,
  834,
  837,
  839,
  840,
  842,
  843,
  845,
  846,
  848,
  850,
  851,
  853,
  863,
  870,
  871,
  876,
  878,
  881,
  882,
  s,
  [883, 4, 2],
  890,
  892,
  894,
  897,
  899,
  902,
  903,
  905,
  907,
  910,
  915,
  917,
  s,
  [920, 6, 2],
  931,
  934,
  938,
  939,
  940,
  s,
  [943, 5, 1],
  950,
  951,
  955,
  957,
  962,
  967,
  969,
  971,
  978,
  990,
  992,
  995,
  996,
  997,
  s,
  [999, 5, 1],
  1007,
  1011,
  1022,
  1029,
  1031,
  1036,
  1037,
  1041,
  1043,
  1044,
  1046,
  1048,
  1049,
  1051,
  1054,
  s,
  [1057, 6, 1],
  1065,
  1067,
  1070,
  1071,
  1076,
  1077,
  1078,
  1080,
  1085,
  1086,
  1088,
  1089,
  1090,
  1092,
  1093,
  1095,
  1097,
  1101,
  1114,
  1116,
  1119,
  1121,
  1122,
  1124,
  s,
  [1126, 5, 1],
  1132,
  s,
  [1134, 5, 1],
  1143,
  1147,
  1154,
  1156,
  1159,
  1161,
  1163,
  1166,
  s,
  [1168, 4, 1],
  1175,
  1176,
  1178,
  1181,
  1183,
  1184,
  1187,
  1191,
  1192,
  1199,
  1203,
  1206,
  1207,
  1208
]),
  goto: u([
  5,
  456,
  461,
  462,
  463,
  467,
  468,
  s,
  [14, 7, 1],
  s,
  [22, 4, 1],
  s,
  [253, 8, 1],
  46,
  398,
  588,
  589,
  590,
  s,
  [222, 4, 1],
  406,
  407,
  408,
  s,
  [327, 7, 1],
  283,
  s,
  [52, 8, 1],
  420,
  334,
  335,
  345,
  346,
  359,
  236,
  237,
  336,
  337,
  361,
  27,
  39,
  40,
  45,
  s,
  [60, 13, 1],
  74,
  s,
  [76, 15, 1],
  457,
  459,
  409,
  263,
  266,
  609,
  613,
  615,
  632,
  633,
  362,
  591,
  511,
  116,
  393,
  397,
  413,
  117,
  403,
  404,
  405,
  340,
  344,
  198,
  226,
  227,
  228,
  220,
  209,
  269,
  360,
  379,
  73,
  75,
  289,
  292,
  302,
  352,
  355,
  356,
  357,
  435,
  441,
  348,
  351,
  3,
  48,
  93,
  94,
  550,
  524,
  525,
  526,
  528,
  529,
  s,
  [531, 4, 1],
  430,
  270,
  273,
  634,
  623,
  513,
  232,
  175,
  187,
  219,
  210,
  142,
  97,
  98,
  411,
  412,
  423,
  422,
  419,
  297,
  432,
  438,
  445,
  120,
  402,
  338,
  341,
  238,
  284,
  285,
  267,
  281,
  383,
  368,
  250,
  318,
  353,
  354,
  358,
  387,
  373,
  452,
  448,
  454,
  347,
  349,
  339,
  465,
  261,
  264,
  558,
  530,
  562,
  565,
  569,
  518,
  391,
  431,
  279,
  s,
  [601, 4, 1],
  617,
  608,
  618,
  610,
  614,
  616,
  621,
  592,
  587,
  598,
  512,
  229,
  172,
  179,
  182,
  184,
  215,
  212,
  124,
  477,
  141,
  112,
  100,
  102,
  394,
  106,
  418,
  323,
  446,
  343,
  241,
  34,
  36,
  38,
  282,
  377,
  381,
  365,
  370,
  251,
  290,
  293,
  304,
  314,
  307,
  313,
  385,
  374,
  436,
  442,
  455,
  350,
  199,
  207,
  389,
  262,
  265,
  551,
  555,
  547,
  541,
  580,
  560,
  563,
  537,
  520,
  392,
  271,
  274,
  619,
  635,
  638,
  640,
  641,
  612,
  624,
  627,
  630,
  631,
  593,
  486,
  509,
  510,
  153,
  154,
  194,
  195,
  196,
  171,
  176,
  178,
  188,
  189,
  181,
  213,
  122,
  125,
  133,
  134,
  8,
  13,
  478,
  104,
  113,
  99,
  105,
  395,
  428,
  427,
  298,
  319,
  325,
  433,
  439,
  400,
  342,
  286,
  268,
  367,
  244,
  245,
  294,
  291,
  444,
  552,
  548,
  539,
  566,
  523,
  275,
  605,
  636,
  639,
  625,
  628,
  622,
  594,
  597,
  288,
  480,
  501,
  155,
  156,
  174,
  123,
  136,
  138,
  128,
  475,
  390,
  109,
  101,
  299,
  440,
  248,
  249,
  295,
  305,
  308,
  311,
  437,
  201,
  553,
  581,
  561,
  567,
  564,
  521,
  538,
  272,
  620,
  515,
  470,
  485,
  482,
  487,
  494,
  147,
  150,
  161,
  173,
  126,
  135,
  6,
  131,
  476,
  396,
  300,
  443,
  549,
  540,
  584,
  568,
  572,
  276,
  488,
  498,
  500,
  503,
  148,
  151,
  160,
  164,
  127,
  137,
  310,
  483,
  490,
  489,
  496,
  499,
  507,
  163,
  579,
  491,
  492,
  576,
  504,
  493,
  497
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack
    var lstack = new Array(128);        // location stack
    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks
    var yyloc;

    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 1209 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function copy_yylloc(loc) {
        var rv = shallow_copy(loc);
        if (rv && rv.range) {
            rv.range = rv.range.slice(0);
        }
        return rv;
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }




        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = shallow_copy(l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = shallow_copy(l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        rv = shallow_copy(l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: copy_yylloc(lexer.yylloc),
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;




    lexer.setInput(input, sharedState_yy);

    // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
    // this initial `setInput()` call: hence we can now check and decide
    // whether we'll go with the standard, slower, lex() API or the
    // `fast_lex()` one:
    if (typeof lexer.canIUse === 'function') {
        var lexerInfo = lexer.canIUse();
        if (lexerInfo.fastLex && typeof fastLex === 'function') {
            lex = fastLex;
        }
    } 

    yyloc = lexer.yylloc;
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;





    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState_yy);
    }
    if (sharedState_yy.pre_parse) {
        sharedState_yy.pre_parse.call(this, sharedState_yy);
    }

    newState = sstack[sp - 1];
    for (;;) {
        // retrieve state number from top of stack
        state = newState;               // sstack[sp - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = 2;
            newState = this.defaultActions[state];
        } else {
            // The single `==` condition below covers both these `===` comparisons in a single
            // operation:
            //
            //     if (symbol === null || typeof symbol === 'undefined') ...
            if (!symbol) {
                symbol = lex();
            }
            // read action for current state and first input
            t = (table[state] && table[state][symbol]) || NO_ACTION;
            newState = t[1];
            action = t[0];











            // handle parse error
            if (!action) {
                var errStr;
                var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                var expected = this.collect_expected_token_set(state);

                // Report error
                if (typeof lexer.yylineno === 'number') {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                } else {
                    errStr = 'Parse error: ';
                }
                if (typeof lexer.showPosition === 'function') {
                    errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                }
                if (expected.length) {
                    errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                } else {
                    errStr += 'Unexpected ' + errSymbolDescr;
                }
                // we cannot recover from the error!
                p = this.constructParseErrorInfo(errStr, null, expected, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }


        }










        switch (action) {
        // catch misc. parse failures:
        default:
            // this shouldn't happen, unless resolve defaults are off
            if (action instanceof Array) {
                p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }
            // Another case of better safe than sorry: in case state transitions come out of another error recovery process
            // or a buggy LUT (LookUp Table):
            p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') {
                retval = r;
            }
            break;

        // shift:
        case 1:
            stack[sp] = symbol;
            vstack[sp] = lexer.yytext;
            lstack[sp] = copy_yylloc(lexer.yylloc);
            sstack[sp] = newState; // push state

            ++sp;
            symbol = 0;




            // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



            yyloc = lexer.yylloc;
            continue;

        // reduce:
        case 2:



            this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
            yyrulelen = this_production[1];










            r = this.performAction.call(yyval, yyloc, newState, sp - 1, vstack, lstack);

            if (typeof r !== 'undefined') {
                retval = r;
                break;
            }

            // pop off stack
            sp -= yyrulelen;

            // don't overwrite the `symbol` variable: use a local var to speed things up:
            var ntsymbol = this_production[0];    // push nonterminal (reduce)
            stack[sp] = ntsymbol;
            vstack[sp] = yyval.$;
            lstack[sp] = yyval._$;
            // goto new state = table[STATE][NONTERMINAL]
            newState = table[sstack[sp - 1]][ntsymbol];
            sstack[sp] = newState;
            ++sp;









            continue;

        // accept:
        case 3:
            if (sp !== -2) {
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                sp--;
                if (typeof vstack[sp] !== 'undefined') {
                    retval = vstack[sp];
                }
            }
            break;
        }

        // break out of loop: we accept or fail with error
        break;
    }
    
    // ... AND FINALLY ...

    retval = this.cleanupAfterParse(retval, true, true);


    

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;



function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = Relic;
  exports.Parser = Relic.Parser;
  exports.parse = function () {
    return Relic.parse.apply(Relic, arguments);
  };
  
}


export default Relic;